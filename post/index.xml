<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/post/</link>
    <description>Recent content in Posts on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Class 15: Recursive Data Types</title>
      <link>https://uvacs2102.github.io/class15/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class15/</guid>
      <description>

&lt;h3 id=&#34;schedule:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;You should read MCS Chapter 7 this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;20 October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9d25492c6e134346a212652c6d0052ab&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;links:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Python code from class and list definitions: &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class15.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;proving-correctness:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Proving Correctness&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def slow_power(a, b):
   y = 1
   z = b
   while z &amp;gt; 0:
      y = y * a
      z = z - 1
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We model the Python program with a state machine:&lt;/p&gt;

&lt;p&gt;$S ::= \mathbb{N} \times \mathbb{N}$&lt;br /&gt;
$G ::= { (y, z) \rightarrow (y \cdot a, z - 1) \, | \, \forall y, z \in \mathbb{N}^{+}}$&lt;br /&gt;
$q_0 ::= (1, b)$&lt;/p&gt;

&lt;p&gt;It is important to remember this is a &lt;em&gt;model&lt;/em&gt;. It does not capture
many important aspects of execution of a real Python program. In
particular, it only models inputs in $\mathbb{N}$, when the actual
inputs could be other types in PYthon.  It also assume all math
opderations work mathematically, not Pythonically.&lt;/p&gt;

&lt;p&gt;To prove partial correctness, we show $P(q = (y, z)) := y = a^{b-z}$
is a &lt;em&gt;preserved invariant&lt;/em&gt;. Then, we show that it holds in state
$q_0$.  Finally, we show that in all final states, $y = a^b$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invariant is Preserved:&lt;/strong&gt; We need to show that $\forall q \in S . \forall t \in S . (q, t) \in G \implies P(q) \implies P(t)$.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$q = (y, z)$. $P(q = (y, z))$: $y = a^{b-z}$.&lt;/li&gt;
&lt;li&gt;If there is an edge from $q$ to $t$, that means $t = (y \cdot a, z-1)$ and $z \ge 1$ since this is the only edge from $q$ in $G$.&lt;/li&gt;
&lt;li&gt;We show $P(t = (y \cdot a, z-1))$ holds by multiplying both sides of $P(q)$ by $a$: $$ya = (a^{b -z}) \cdot a = a^{b - z + 1} = a ^{b - (z - 1)}.$$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Invariant holds in $q_0$:&lt;/strong&gt; $q_0 = (1, b)$. So, we need to show $P(q_0 = (1, b))$: $1 = a^{b - b}$. This holds since $a^{0} = 1$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final states:&lt;/strong&gt; All states where $z \ge 1$ have an outgoing edge, but no states where $z = 0$ do. So, the final states are all of the form $(\alpha, 0)$. If a final state is reachable from $q_0$, the invariant must hold since we proved it is preserve. Hence, in the final state $(\alpha, 0)$ we know $\alpha = a^{b}$.&lt;/p&gt;

&lt;p&gt;This proves &lt;em&gt;partial correctness&lt;/em&gt;: if the program terminates, it
terminates in a state where the property ($y = a^b$ is satisfied).  To
prove &lt;em&gt;total correctness&lt;/em&gt; we also need to know the execution
&lt;em&gt;eventually&lt;/em&gt; reaches a final state.&lt;/p&gt;

&lt;p&gt;We prove this by showing that from any initial state $q_0 = (1, b)$,
the machine will reach a final state $q_f = (y, 0)$ in $b$ steps.  The
proof in class used the Well Ordering Principle. You could also prove
this using regular Induction.&lt;/p&gt;

&lt;h1 id=&#34;pairs:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Pairs&lt;/h1&gt;

&lt;p&gt;What is the difference between scalar data and compound data structures?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A $\text{\em Pair}$ is a datatype that supports these three operations:&lt;br /&gt;
\begin{quote}
     $\text{\em make_pair}: \text{\em Object} \times \text{\em Object} \rightarrow \text{\em Pair}$\
     $\text{\em pair_first}: \text{\em Pair} \rightarrow \text{\em Object}$\&lt;br /&gt;
     $\text{\em pair_last}: \text{\em Pair} \rightarrow \text{\em Object}$\&lt;br /&gt;
\end{quote}
where, for any objects $a$ and $b$, $\text{\em pair_first}(\text{\em make_pair}(a, b)) = a$ and $\text{\em pair_last}(\text{\em make_pair}(a, b)) = b$.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def make_pair(a, b):
    def selector(which):
        if which:
            return a
        else:
            return b
    return selector

def pair_first(p):
    return p(True)

def pair_last(p):
    return p(False)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lists:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Lists&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition (1).&lt;/strong&gt; A &lt;em&gt;List&lt;/em&gt; is either (1) a &lt;em&gt;Pair&lt;/em&gt; where the second part of
  the pair is a &lt;em&gt;List&lt;/em&gt;, or (2) the empty list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition (2).&lt;/strong&gt; A &lt;em&gt;List&lt;/em&gt; is a ordered sequence of objects.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 14: Invariant Principle</title>
      <link>https://uvacs2102.github.io/class14/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class14/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;20 October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Exam 1 was returned Tuesday.  If you did not pick yours up yet, you
can get it after class today.  We will start charging
exponentially-increasing storage fees for inexcusably unclaimed exams
starting after Prof. Mahmoody&amp;rsquo;s office hours Monday.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;02ef275aa1474918a22516979d995c6d&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class14.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;state-machines-review-from-class-13&#34;&gt;State Machines (review from Class 13)&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;state machine&lt;/em&gt;, $M = (S, G: S \times S, q_0 \in S)$, is a binary
relation (called a &lt;em&gt;transition relation&lt;/em&gt;) on a set (both the domain and
codomain are the same set).  One state, denoted $q_0$, is designated as
the &lt;em&gt;start state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;execution&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times S, q_0
\in S)$ is a (possibly infinite) sequence of states, $(x_0, x_1, \cdots,
x_n)$ where (1) $x_0 = q_0$ (it begins with the start state), and (2)
$\forall i \in {0, 1, \ldots, n - 1} \ldotp (x&lt;em&gt;i, x&lt;/em&gt;{i + 1}) \in G$
(if $q$ and $r$ are consecutive states in the sequence, then there is an
edge $q \rightarrow r$ in $G$).&lt;/p&gt;

&lt;p&gt;A state $q$ is &lt;em&gt;reachable&lt;/em&gt; if it appears in some execution.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;preserved invariant&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times
S, q_0 \in S)$ is a predicate, $P$, on states, such that whenever $P(q)$
is true of a state $q$, and $q \rightarrow r \in G$, then $P&amp;reg;$ is
true.&lt;/p&gt;

&lt;h3 id=&#34;bishop-state-machine&#34;&gt;Bishop State Machine&lt;/h3&gt;

&lt;p&gt;$S = { (\fillin ) \, | \, r, c \in \mathbb{N} }$
$G = { (r, c) \rightarrow (r&amp;rsquo;, c&amp;rsquo;) \, | \, r, c \in \mathbb{N} \wedge (\exists d \in \mathbb{N}^{+} \textrm{ such that } r&amp;rsquo; = r \fillin d \wedge r&amp;rsquo; \ge 0 \wedge c&amp;rsquo; = c \fillin d \wedge c&amp;rsquo; \ge 0 }$
$q_0 = (0, 2)$&lt;/p&gt;

&lt;p&gt;What states are &lt;em&gt;reachable&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&#34;progress-machine&#34;&gt;``Progress&amp;rdquo; Machine&lt;/h3&gt;

&lt;p&gt;$S = { (x, d) \, | \, x \in \mathbb{Z}, d \in { \mathrm{\bf F}, \mathrm{\bf B}} }$
$G = { (x, \mathrm{\bf F}) \rightarrow (x + 1, \mathrm{\bf B}) \, | \, x \in \mathbb{Z} } \cup
     { (x, \mathrm{\bf B}) \rightarrow (x - 2, \mathrm{\bf F}) \, | \, x \in \mathbb{Z} }$
$q_0 = (0, \mathrm{\bf F})$&lt;/p&gt;

&lt;p&gt;Which states are &lt;em&gt;reachable&lt;/em&gt;?&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;preserved-invariants&#34;&gt;Preserved Invariants&lt;/h2&gt;

&lt;p&gt;A predicate $P(q)$ is a &lt;em&gt;preserved invariant&lt;/em&gt; of machine $M = (S, G \subseteq S \times S, q_0 \in
  S)$ if:
$$
\forall q \in S \ldotp (P(q) \wedge (q \rightarrow r) \in G) \implies P&amp;reg;
$$&lt;/p&gt;

&lt;p&gt;What are some &lt;em&gt;preserved invariants&lt;/em&gt; for the (original) Bishop State Machine?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invariant Principle.&lt;/strong&gt; If a &lt;em&gt;preserved invariant&lt;/em&gt; of a state machine
  is true for the start state, it is true for all reachable states.&lt;/p&gt;

&lt;p&gt;To show $P(q)$ for machine $M = (S, G \subseteq S \times S, q_0 \in
  S)$ all $q \in S$, show:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Base case: $P(\fillin)$&lt;/li&gt;
&lt;li&gt;$\forall s \in S \ldotp \fillin \implies \fillin$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Prove that the original Bishop State Machine never reaches a square where $r + c$ is odd.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h1 id=&#34;slow-exponentiation&#34;&gt;Slow Exponentiation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def slow_power(a, b):
   y = 1
   z = b
   while z &amp;gt; 0:
      y = y * a
      z = z - 1
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$S ::= \mathbb{N} \times \mathbb{N}$
$G ::= { (y, z) \rightarrow (y \cdot a, z - 1) \, | \, \forall y, z \in \mathbb{N}^{+}}$
$q_0 ::= (1, b)$&lt;/p&gt;

&lt;p&gt;Prove &lt;code&gt;slow_power(a, b)&lt;/code&gt; = $a^b$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;fast-exponentiation&#34;&gt;Fast Exponentiation&lt;/h1&gt;

&lt;p&gt;This is the algorithm from Section 6.3.1 written as Python code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def power(a, b):
   x = a
   y = 1
   z = b
   while z &amp;gt; 0:
      r = z % 2 # remainder of z / 2
      z = z // 2 # quotient of z / 2
      if r == 1:
         y = x * y
      x = x * x
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6</title>
      <link>https://uvacs2102.github.io/ps6posted/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps6posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps6.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 20 Oct at 6:29:00pm&lt;/strong&gt;. Please read the
collaboration policy carefully.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 13: State Machines</title>
      <link>https://uvacs2102.github.io/class13/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class13/</guid>
      <description>

&lt;h3 id=&#34;schedule:af2ff3ef0db44829d3ff131eac0d7ec7&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;There is no Problem Set due this week. &lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; will be posted soon and due next &lt;strong&gt;Friday (October 20) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Exam 1 was returned in class today.  Please read the solutions posted
in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/exam1comments.pdf&#34;&gt;Exam 1
Comments&lt;/a&gt;.
If you didn&amp;rsquo;t pick up Exam 1 in class today, you can get it at Dave&amp;rsquo;s
office hours tomorrow, or before or after class on Thursday.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a9794b8b691346209a71c909a67e860c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class13.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;state-machines:af2ff3ef0db44829d3ff131eac0d7ec7&#34;&gt;State Machines&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;state machine&lt;/em&gt; is a binary relation (called a &lt;em&gt;transition relation&lt;/em&gt;)
on a set (both the domain and codomain are the same set).  One state is
designated as the &lt;em&gt;start state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;$$M = (S, G: S \times S, q_0 \in S)$$&lt;/p&gt;

&lt;p&gt;What does it mean if $G$ is &lt;em&gt;total&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What does it mean if $G$ is not a &lt;em&gt;function&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parity Counter.&lt;/strong&gt; Describe a state machine that determines if the
  number of steps is even.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unbounded Counter.&lt;/strong&gt; Describe a state machine that counts the number of steps.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;How well do state machines model real computers?  What kind of
transition relation does the state machine modeling your computer have?&lt;/p&gt;

&lt;h2 id=&#34;state-machine-execution:af2ff3ef0db44829d3ff131eac0d7ec7&#34;&gt;State Machine Execution&lt;/h2&gt;

&lt;p&gt;An &lt;em&gt;execution&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times S, q_0 \in S)$ is a (possibly infinite) sequence of states, $(x_0, x_1, \cdots, x_n)$ where:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$x_0 = q_0$ (it begins with the start state), and&lt;/li&gt;
&lt;li&gt;$\forall i \in {0, 1, \ldots, n - 1} \ldotp (x&lt;em&gt;i, x&lt;/em&gt;{i + 1}) \in G$ (if $q$ and $r$ are consecutive states in the sequence, then there is an edge $q \rightarrow r$ in $G$)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A state $q$ is &lt;em&gt;reachable&lt;/em&gt; if it appears in some execution.  (That is,
there is a sequence of transitions starting from $q_0$, following edges
in $G$, that ends with $q$.)&lt;/p&gt;

&lt;p&gt;$$
M_1 = (S = \mathbb{N}, G = {(x, y) | y = x^2 }, q_0 = 1)
$$
$$
M_2 = (S = \mathbb{N}, G = {(x, y) | \exists k \in \mathbb{N} \ldotp y = kx }, q_0 = 1)
$$&lt;/p&gt;

&lt;p&gt;Which states are &lt;em&gt;reachable&lt;/em&gt; for $M_1$ and $M_2$?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall Break Office Hours</title>
      <link>https://uvacs2102.github.io/fbofficehours/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/fbofficehours/</guid>
      <description>

&lt;p&gt;The office hours schedule for next week will be different from normal
because of “Fall Break” and the Exam (as usual, all will be in Rice
436 except the professors&amp;rsquo; as noted):&lt;/p&gt;

&lt;h4 id=&#34;monday-2-oct&#34;&gt;Monday (2 Oct)&lt;/h4&gt;

&lt;p&gt;Mohammad Mahmoody (Rice 511), 10:45-11:45am&lt;br /&gt;
Sarah Meng, 4:30-6:00pm&lt;/p&gt;

&lt;h4 id=&#34;tuesday-3-oct&#34;&gt;Tuesday (3 Oct)&lt;/h4&gt;

&lt;p&gt;Nate Olsen, 10-11:30am&lt;br /&gt;
Michael Woon, 11am-12:30pm&lt;br /&gt;
Henry Spece, 3:30-5pm&lt;/p&gt;

&lt;h4 id=&#34;wednesday-4-oct&#34;&gt;Wednesday (4 Oct)&lt;/h4&gt;

&lt;p&gt;Colin Harfst, 9:30am-12:30pm&lt;br /&gt;
Anna Wu, noon-1:30pm&lt;br /&gt;
Michael Woon, 12:30-2:00pm&lt;br /&gt;
David Evans (Rice 507), 2:30-3:30pm&lt;br /&gt;
Bhuvanesh Murali, 3-5pm&lt;br /&gt;
Helen Simecek, 3:30-5pm&lt;br /&gt;
Yasasvini Puligundle, 5-6pm&lt;br /&gt;
Xueying Bai, 6-7pm&lt;br /&gt;
Fan Feng, 7-8:30pm&lt;br /&gt;
Nate Olsen, 7:30-9:00pm&lt;/p&gt;

&lt;h4 id=&#34;thursday-5-oct&#34;&gt;Thursday (5 Oct)&lt;/h4&gt;

&lt;p&gt;Amar Singh, 9am-10:30&lt;br /&gt;
Xiao Zhang, 10-11am&lt;br /&gt;
Prashant Gorthi, 11am-noon&lt;/p&gt;

&lt;p&gt;No office hours Thursday afternnon and evening. The normal office
hours schedule will resume on Monday, 9 October.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 5 Comments</title>
      <link>https://uvacs2102.github.io/ps5comments/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps5comments/</guid>
      <description>&lt;p&gt;The Problem Set 5 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps5solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 12: Review</title>
      <link>https://uvacs2102.github.io/class12/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class12/</guid>
      <description>

&lt;h3 id=&#34;schedule:bc216d98f3ca2300699af2d41b8a2a45&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://uvacs2102.github.io/class11&#34;&gt;Class 11 Notes&lt;/a&gt; for information and preparation advice for Exam 1, which will be in class next Thursday, 5 October.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;f6aa2e5580f940d984c6508ff6f26d46&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class12.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;strong-induction-principle:bc216d98f3ca2300699af2d41b8a2a45&#34;&gt;Strong Induction Principle&lt;/h2&gt;

&lt;p&gt;Let $P$ be a predicated on $\mathbb{N}$.  If&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(0)$ is true, and&lt;/li&gt;
&lt;li&gt;$(\forall m \in \mathbb{N}, m \le n . P(n)) \implies P(n + 1)$ for all $n \in \mathbb{N}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(m)$ is true for all $m \in \mathbb{N}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an inference rule:&lt;/p&gt;

&lt;p&gt;$$
\infer{\forall m \in \mathbb{N} . P(m)}{P(0), \forall n \in \mathbb{N} . (P(0) \vee P(1) \wedge \cdots \wedge P(n)) \implies P(n + 1)}
$$&lt;/p&gt;

&lt;p&gt;With arbitrary basis, $b \in \mathbb{N}$:&lt;/p&gt;

&lt;p&gt;$$
\infer{\forall m \in { b, b+1, b+2, \ldots } . P(m)}{P(b), \forall n \in \mathbb{N} . (P(b) \vee P(b + 1) \wedge \cdots \wedge P(n)) \implies P(n + 1)}
$$&lt;/p&gt;

&lt;p&gt;Show that &lt;em&gt;strong&lt;/em&gt; induction is not actually stronger than regular induction. (Hint: if the predicate for strong induction is $P(m)$, explain how to construct a predicate, $P&amp;rsquo;(m)$, that works with regular induction.)&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h3 id=&#34;example-strong-induction-proof:bc216d98f3ca2300699af2d41b8a2a45&#34;&gt;Example Strong Induction Proof&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Theorem:&lt;/strong&gt; Every number, $n \in \mathbb{N}, n \geq 4$ can be written as $\alpha \cdot 2 + \beta \cdot 5$ where $\alpha, \beta \in \mathbb{N}$.&lt;/p&gt;

&lt;p&gt;Proof by Strong Induction:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First we need to define the predicate: $$P(n) := \exists \alpha, \beta \in \mathbb{N} . n = \alpha \cdot 2 + \beta \cdot 5$$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Basis: we are proving for all $n &amp;gt; 3$:&lt;/p&gt;

&lt;p&gt;$P(4)$: $\alpha = 2, \beta = 0$ gives $4 = 2 \cdot 2 + 0 \cdot 5$.
$P(5)$: $\alpha = 0, \beta = 1$ gives $5 = 0 \cdot 2 + 1 \cdot 5$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Induction step: $\forall n \in {6, \ldots }$&lt;/p&gt;

&lt;p&gt;By strong induction, assume $P(m)$ is true for all $m \in { 4, 5, 6,
\ldots, m}$.&lt;/p&gt;

&lt;p&gt;Show $P(m + 1)$: Since $P(m - 1)$ is true (by the \emph{strong} induction
hypothesis), we know $\exists \alpha, \beta \in \mathbb{N} . m - 1 =
\alpha \cdot 2 + \beta \cdot 5$. We can show $P(m + 1)$ since
$m + 1 = (\alpha + 1) \cdot 2 + \beta \cdot 5$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;proof-by-contra-positive-review:bc216d98f3ca2300699af2d41b8a2a45&#34;&gt;Proof by Contra-Positive (Review)&lt;/h2&gt;

&lt;p&gt;Recall: $P \implies Q$ is equivalent to $\neg Q \implies \neg P$. (If
you are shaky on this, prove it to yourself using a truth table.)&lt;/p&gt;

&lt;p&gt;Typical use: where the negation of the proposition is easier to reason
about than the original proposition (e.g., irrational is a complex
property to describe, but rational (NOT irrational) is a simple one. So to prove that ``If $r$ is irrational then $\sqrt{r}$ is also irrational&amp;rdquo; we can prove the contrapositive which is &amp;ldquo;if $\sqrt{r}$&amp;rdquo; is rational, then $r$ is also rational$ which is quite straightforward.&lt;/p&gt;

&lt;h2 id=&#34;proof-by-contradiction-review:bc216d98f3ca2300699af2d41b8a2a45&#34;&gt;Proof by Contradiction (Review)&lt;/h2&gt;

&lt;p&gt;To prove $P$, show $\neg P \implies False$.&lt;/p&gt;

&lt;p&gt;Example: Proving the $\mathbb{Z}$ is not well ordered.&lt;/p&gt;

&lt;p&gt;Goal: proving the proposition $G$ saying ``$\mathbb{Z}$ has no minimum&amp;rdquo;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To prove by contradiction, assume $\neg G$ (that is, $\mathbb{Z}$ does have a minimum).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then, $\exists m \in \mathbb{Z}$ that is the minimum of $\mathbb{Z}$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;But, this leads to a contradiction: $m - 1 \in \mathbb{Z}$ and $m - 1 &amp;lt; m$. So, even though the number $m$ was said to be the minimum of $\mathbb{Z}$, it is in fact not the minimum.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Thus, we have a contradiction, so something must be wrong. All our logical inferences after step 1 are correct, so the assumption we made in step 1 must be invalid. If $\neg G$ is invalid, $G$ must be true.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Typical use: when the statment we want to prove has universal quantifier. for example, $\forall x \in \mathbb{Z}. P(x)$. Note that the statment that $\mathbb{Z}$ has \emph{no} minimum, when written formally, uses a universal quantifier (make sure to double check it). Then, instead of arguing that for all $x \in A$, $P(x)$ holds, we assume (for sake of contradiction) that there exists one $x$ for which $\neg(P(x))$ (note that this is indeed the negated statement) from which  we get a contradiction.&lt;/p&gt;

&lt;h1 id=&#34;binary-relation-properties:bc216d98f3ca2300699af2d41b8a2a45&#34;&gt;Binary Relation Properties&lt;/h1&gt;

&lt;p&gt;When we draw the graph of binary relations, the Domain (&lt;code&gt;input&amp;quot; set) has outgoing edges. Codomain (&lt;/code&gt;output&amp;rdquo; set) has
incoming edges. So when we use the compact notation referring to different properties of binary relations, keep in mind that the words ``in-out&amp;rdquo; refer to the edge (not the input/output sets).  The properties about outgoing edges are &lt;em&gt;function&lt;/em&gt;
($\le 1 out$) and &lt;em&gt;total&lt;/em&gt; ($\ge 1$ out). Adding elements to the
codomain cannot effect these properties.  The properties about
incoming edges are &lt;em&gt;surjection&lt;/em&gt; ($\ge 1$ in) and &lt;em&gt;injection&lt;/em&gt; ($\le 1$
in). Adding elements to the domain cannot effect these properties.&lt;/p&gt;

&lt;p&gt;When we say the any relation with property $X$ (e.g., $\ge 1$ out) about the relations \emph{must} also have propety $Y$. It means that property $X$ implies $Y$ logically (about relations). In case the answer is &amp;ldquo;no&amp;rdquo; (i.e. that property $X$ does not imply $Y$) all we have to find is one relation $R$ that satisfies property $X$ but not property $Y$. If the answer is `yes&amp;rsquo; we need to show that for all $R$, if property $X$ holds, so does $Y$. So doing so might need more work.&lt;/p&gt;

&lt;p&gt;If an edge is added to the graph of a relation, which properties
&lt;em&gt;might&lt;/em&gt; be impacted?&lt;/p&gt;

&lt;p&gt;If an edge is removed to the graph of a relation, which properties
&lt;em&gt;might&lt;/em&gt; be impacted?&lt;/p&gt;

&lt;p&gt;If an element is removed from the domain of a relation, which properties
&lt;em&gt;might&lt;/em&gt; be impacted?&lt;/p&gt;

&lt;p&gt;If an element is removed from the codomain of a relation, which
properties &lt;em&gt;might&lt;/em&gt; be impacted?&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 4 Comments</title>
      <link>https://uvacs2102.github.io/ps4comments/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps4comments/</guid>
      <description>&lt;p&gt;The Problem Set 4 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps4solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 11: Induction Practice</title>
      <link>https://uvacs2102.github.io/class11/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class11/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thursday&amp;rsquo;s Class&lt;/strong&gt; may include review for Exam 1.  Before 6:59pm
  Wednesday, send &lt;a href=&#34;mailto:uvacs2102staff@gmail.com&#34;&gt;&lt;em&gt;uvacs2102staff@gmail.com&lt;/em&gt;&lt;/a&gt; topics you would like to review:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fewer than 10 total requests: class is not being sufficiently challenged and we should be doing more difficult material (except for the 10 requestors who get exam exemptions).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;exactly 10 total requests: all requestors get automatic exam exemptions, review requested topics.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;more than 10 requests implies we should spend Thursday’s class on reviewing requested topics, no exam exemptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exam-1&#34;&gt;Exam 1&lt;/h3&gt;

&lt;p&gt;Exam 1 will be in class on Thursday, 5 October.  You can get a good
idea what to expect on Exam 1 by looking at the &lt;a href=&#34;https://uvacs2102.github.io/docs/practiceexam1.pdf&#34;&gt;Practice Exam
1&lt;/a&gt; (from last year&amp;rsquo;s class). We strongly
encourage you to try to problems on your own, before looking at the
&lt;a href=&#34;https://uvacs2102.github.io/docs/practiceexam1-solutions.pdf&#34;&gt;posted solutions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources.&lt;/strong&gt; You will be permitted to use a &lt;em&gt;single paper page&lt;/em&gt; of
notes that you prepare and bring to the exam.  It is fine to
collaborate with others to prepare your notes.  The page should be no
larger than a US Letter size page ($8.5 \times 11$ inches), and you
may write (or print) on both sides of the page.  You may not use any
special devices (e.g., magnifying glasses) to read your page. No other
resources, other than your own brain, body, and writing instrument,
are permitted during the exam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content.&lt;/strong&gt; The problems on the exam will cover material from Classes
  1&amp;ndash;11, Problem Sets 1&amp;ndash;5 (including the provided solutions), and MCS
  Chapters 1&amp;ndash;5.  Everything on the exam will be something you have seen
  in at least two of these (Classes, Problem Sets, and MCS Book), and
  most of the exam will be things you have seen in all three.  If you
  understand the problems on the problem sets and questions on the class
  notes well enough to be able to answer similar questions, you should
  do well on the exam.&lt;/p&gt;

&lt;p&gt;The main topics the exam will cover include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Propositions, axioms, and proofs (you should understand what each of
these are and how to define them precisely)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inference rules (how to determine and show if an inference rule is
sound or unsound, how to correctly use inference rules in a proof)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical formula (how to interpret logical formulas and convert English
statements into logic, determine the validity or satisfiability of a
formula, and show equivalence or non-equivalence of two formulas)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical quantifiers (how to reason about logical formula using
$\forall$ and $\exists$, including showing logical equivalence and
implication)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Proof methods (you should be able to read and write proofs that use
direct proof, contrapositive proof, and proof by contradiction)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Well ordering (you should be able to explain what it means for a set
to be well ordered, determine if a given set and operator is well
ordered, and be able to construct proofs using the well ordering
principle and identify flaws in misuses of the well ordering
principle)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Induction (you should understand mathematical induction and be able to
construct proofs using induction and identify flaws in misuses of
induction in proofs)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For most students, we believe the best way to prepare for the exam
will be to (1) go over the problem sets and their solutions, and make
sure you understand well any of the problems you did not get before;
(2) go through the provided practice exam and try to solve all the
problems on your own before reading the solutions; (3) go through the
questions in the class notes and convince yourself you can answer them
well; (4) re-read chapters of the book, solving the associated
practice problems, especially for any sections on topics where you had
difficulty on the problem sets.  If you do #1 and #2 and understand
well the problems on the practice exam, you should be confident you&amp;rsquo;ll
do well on the exam; if you struggled on the problem sets, you would
benefit from doing #3 and #4 as well.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0efd2b7dcbe64ad9993d64508a604213&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class11.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;induction-principle&#34;&gt;Induction Principle&lt;/h2&gt;

&lt;p&gt;Let $P$ be a predicated on $\mathbb{N}$.  If&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(0)$ is true, and&lt;/li&gt;
&lt;li&gt;$P(n) \implies P(n + 1)$ for all $n \in \mathbb{N}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(m)$ is true for all $m \in \mathbb{N}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prove:&lt;/strong&gt; For all sets $A$, $|pow(A)| = 2^|A|$.&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Prove:&lt;/strong&gt; The sum of the first $n$ positive integers is $\frac{n(n+1)}{2}$.&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;generalizing-to-well-ordered-sets&#34;&gt;Generalizing to Well-Ordered Sets&lt;/h3&gt;

&lt;p&gt;We can use Induction for any well-ordered set, where there is an
operation (like &amp;lsquo;+ 1&amp;rsquo;) and a starting point (like &amp;lsquo;0&amp;rsquo;) that covers the
whole set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prove.&lt;/strong&gt; All non-empty finite subsets of $\mathbb{N}$ have a minimum element.&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;induction-practice&#34;&gt;Induction Practice&lt;/h2&gt;

&lt;p&gt;Take-Away Game: start with $n$ sticks; at each turn a player must remove
1, 2 or 3 sticks; player who takes the last stick wins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prove: for a Take-Away game with any initial number of sticks, $n$, either
Player 1 has a winning strategy or Player 2 does.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove: Player 1 has a winning strategy for a Take-Away game with $n$ sticks, if \bigfillin.  Otherwise, Player 2 has a winning strategy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 5</title>
      <link>https://uvacs2102.github.io/ps5posted/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps5posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps5.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 29 September at 6:29:00pm&lt;/strong&gt;. Please read the
collaboration policy carefully - unlike previous assignments the
&lt;em&gt;Students&lt;/em&gt; &amp;rarr; &lt;em&gt;Submissions&lt;/em&gt; relation for this assignment may not be
injective.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 10: Set Cardinality, Induction</title>
      <link>https://uvacs2102.github.io/class10/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class10/</guid>
      <description>

&lt;h3 id=&#34;schedule:cefb84ebc6e45e7105a37c4f4d413033&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;This week you should finish reading MCS Chapter 4 (section 4.5) and
Section 5.1.  We will discuss Induction (Section 5.1) next class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps4&#34;&gt;&lt;strong&gt;Problem Set 4&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.  The
original version of Problem Set 4, Question 6, asked for a &lt;em&gt;function&lt;/em&gt;,
when we really meant to ask for a &lt;em&gt;total function&lt;/em&gt; (as we defined it
in class today, and the book defines it). The problem set is updated
now to specify this. If you already answered the original question,
you do not need to update your answer, just indicate clearly for which
questions the function you defined is partial. Sorry for the
confusion!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt; (not yet posted) will be due Friday, 29 September.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exam 1&lt;/strong&gt; will be in-class on Thursday, 5 October. It will cover
  Classes 1 - 11, Problem Sets 1 - 5, and MCS Chapters 1 - 5.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3dc8afcc1d1e4a979715fe94298dd84a&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class10.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternate definition:&lt;/strong&gt; The &lt;em&gt;cardinality&lt;/em&gt; of the set
$$
N_k = { n | n \in \mathbb{N} \wedge n &amp;lt; k }
$$
is $k$.  If there is a &lt;em&gt;bijection&lt;/em&gt; between two sets, they have the same
cardinality.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;surjective relation&lt;/em&gt; between $A$ and $B$ what do we know
about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;surjective function&lt;/em&gt; between $A$ and $B$ what do we know
about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;total surjective function&lt;/em&gt; between $A$ and $B$ what do we know
about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;total surjective injective function&lt;/em&gt; between $A$ and $B$
what do we know about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What is the cardinality of $A \cup B$?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;induction-principle:cefb84ebc6e45e7105a37c4f4d413033&#34;&gt;Induction Principle&lt;/h1&gt;

&lt;p&gt;Let $P$ be a predicated on $\mathbb{N}$.  If&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(0)$ is true, and&lt;/li&gt;
&lt;li&gt;$P(n) \implies P(n + 1)$ for all $n \in \mathbb{N}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(m)$ is true for all $m \in \mathbb{N}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;template-for-induction-proofs:cefb84ebc6e45e7105a37c4f4d413033&#34;&gt;Template for Induction Proofs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;State, &amp;ldquo;We prove by induction.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Define a predicate, $P(n)$.  This is the &lt;em&gt;induction hypothesis&lt;/em&gt;.  Our goal is to show that $P(n)$ is true for all $n \in \mathbb{N}$.&lt;/li&gt;
&lt;li&gt;Prove $P(0)$ is true.  (&lt;em&gt;base case&lt;/em&gt; or &lt;em&gt;basis step&lt;/em&gt;.)&lt;/li&gt;
&lt;li&gt;Prove that $P(n) \implies P(n + 1)$ for every $n \in \mathbb{N}$.  (&lt;em&gt;induction step&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Conclude that $P(n)$ is true for all $n \in \mathbb{N}$ by induction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How is the method of &lt;em&gt;proof by induction principle&lt;/em&gt; similar to and different from &lt;em&gt;proof by well-ordering principle&lt;/em&gt;?&lt;/p&gt;

&lt;h1 id=&#34;power-sets:cefb84ebc6e45e7105a37c4f4d413033&#34;&gt;Power Sets&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;power set&lt;/strong&gt; of $A$ ($\textrm{pow}(A)$)is the set of all subsets of $A$:
$$
B \in \textrm{pow}(A) \iff B \subseteq A.
$$&lt;/p&gt;

&lt;p&gt;Prove that the size of the power set of a set $S$ with $|S| = N$ is
$2^N$ using induction. (We&amp;rsquo;ll do this in Class 11, but see how far you
can get on your own.)&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 3 Comments</title>
      <link>https://uvacs2102.github.io/ps3comments/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps3comments/</guid>
      <description>&lt;p&gt;The Problem Set 3 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps3solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 9: Relations, Finite Set Cardinality</title>
      <link>https://uvacs2102.github.io/class9/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class9/</guid>
      <description>

&lt;h3 id=&#34;schedule:b1685b9d514e4fd02cc72721228d457c&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;This week you should finish reading MCS Chapter 4 (section 4.5) and
Section 5.1.  We will discuss Induction (Section 5.1) next class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps4&#34;&gt;&lt;strong&gt;Problem Set 4&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.  The
original version of Problem Set 4, Question 6, asked for a &lt;em&gt;function&lt;/em&gt;,
when we really meant to ask for a &lt;em&gt;total function&lt;/em&gt; (as we defined it
in class today, and the book defines it). The problem set is updated
now to specify this. If you already answered the original question,
you do not need to update your answer, just indicate clearly for which
questions the function you defined is partial. Sorry for the
confusion!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt; (not yet posted) will be due Friday, 29 September.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exam 1&lt;/strong&gt; will be in-class on Thursday, 5 October. It will cover
  Classes 1 - 11, Problem Sets 1 - 5, and MCS Chapters 1 - 5.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c60255e3f2074eed9581407ac4fb3871&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class9.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;total-and-partial-functions:b1685b9d514e4fd02cc72721228d457c&#34;&gt;Total and Partial Functions&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a mathematical datatype that associates elements from
one set, called the &lt;em&gt;domain&lt;/em&gt;, with elements from another set, called a
&lt;em&gt;codomain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;$$ f: \textrm{\em domain} \rightarrow \textrm{\em codomain} $$&lt;/p&gt;

&lt;p&gt;If the function is &lt;em&gt;total&lt;/em&gt;, every element of the domain has one
associated codomain element; if the function is &lt;em&gt;partial&lt;/em&gt;, there may be
elements of the domain that do not have an associated codomain element.&lt;/p&gt;

&lt;h2 id=&#34;relation-relationships:b1685b9d514e4fd02cc72721228d457c&#34;&gt;Relation Relationships&lt;/h2&gt;

&lt;p&gt;Definition review: &lt;strong&gt;binary relation&lt;/strong&gt;, $R$, consists of a domain set,
$A$, and a codomain set, $B$, and a subset of $A \times B$ called the
&lt;em&gt;graph&lt;/em&gt; of $R$.&lt;/p&gt;

&lt;p&gt;For each statement below, give the name and at least one example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A binary relation where no element of $A$ has more than one outgoing edge:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A binary relation where every element of $A$ has exactly one outgoing edge:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A binary relation where every element of $B$ has exactly one incoming edge:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A binary relation where every element of $A$ has exactly one outgoing
edge and every element of $B$ has exactly one incoming edge:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;If there exists a &lt;em&gt;bijective&lt;/em&gt; relation between $S$ and $T$ defined by the graph $G$ which of these &lt;em&gt;must&lt;/em&gt; be true:&lt;/p&gt;

&lt;p&gt;a. there exists some &lt;em&gt;injective&lt;/em&gt; relation between $S$ and $T$.
b. there exists some &lt;em&gt;bijective&lt;/em&gt; relation between $T$ and $S$.
c. there exists a &lt;em&gt;total&lt;/em&gt; function, $f: S \rightarrow T$.
d. $S - T = \emptyset$.
e. the number of elements of $S$ is equal to the number of elements of $T$.
f. $G - (S \times T) = \emptyset$.
g. $(S \times T) - G = \emptyset$.
h. $(S \times T) - G \neq \emptyset$.&lt;/p&gt;

&lt;h1 id=&#34;relation-practice:b1685b9d514e4fd02cc72721228d457c&#34;&gt;Relation Practice&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;inverse&lt;/em&gt; of a relation $R: A \rightarrow B, G \subseteq A \times B$ is defined by reversing all the arrows:
$$
R^{-1}: B \rightarrow A, G^{-1} \subseteq B \times A
$$&lt;/p&gt;

&lt;p&gt;$$
(b, a) \in G^{-1} \iff \fillin\fillin\fillin\fillin
$$&lt;/p&gt;

&lt;p&gt;What does it mean if $R \equiv R^{-1}$?&lt;/p&gt;

&lt;h1 id=&#34;set-cardinality:b1685b9d514e4fd02cc72721228d457c&#34;&gt;Set Cardinality&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Finite Cardinality.&lt;/strong&gt; The book&amp;rsquo;s definition is: ``If $A$ is a finite set, the &lt;em&gt;cardinality&lt;/em&gt; of
  $A$, written $|A|$, is the number of elements in $A$.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Does this definition require adding a new fundamental set operation,
or is it meaningful with just the set operations we have defined?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternate definition:&lt;/strong&gt; The &lt;em&gt;cardinality&lt;/em&gt; of the set $$ N_k = { n |
n \in \mathbb{N} \wedge n &amp;lt; k } $$ is $k$. (Next class, we&amp;rsquo;ll use
this to define the &lt;em&gt;cardinality&lt;/em&gt; of any set. You should be able to
figure out how to do this on your own with what you know now.)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NAND/XOR Challenge Solved!</title>
      <link>https://uvacs2102.github.io/nandxorchallengesolved/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/nandxorchallengesolved/</guid>
      <description>&lt;p&gt;Congratulations to Jake Smith for solving the NAND/XOR challenge from &lt;a href=&#34;https://uvacs2102.github.io/class5&#34;&gt;Class 5&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The minimum number of NAND gates needed to implement XOR is &lt;strong&gt;5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;His solution used a brute force search through all possible formulas
using NANDs to test them for logical equivalence to XOR.&lt;/p&gt;

&lt;p&gt;You can find the Python code he used to do the search here: &lt;a href=&#34;https://github.com/ION28/CS2102_ChallengeProblemSolutions/blob/master/CP1_NAND_Brute_Force.py&#34;&gt;
https://github.com/ION28/CS2102_ChallengeProblemSolutions/blob/master/CP1_NAND_Brute_Force.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;His write-up of the solution, including a list of all 200 ways to
define XOR using 5 NAND operations is here: &lt;a href=&#34;https://uvacs2102.github.io/docs/jts5np_Challenge01_NAND_BruteForce_Submission_2.pdf&#34;&gt;Solution (PDF)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 4</title>
      <link>https://uvacs2102.github.io/ps4posted/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps4posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps4&#34;&gt;&lt;strong&gt;Problem Set 4&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps4.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 22 September at 6:29:00pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>