<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NAND/XOR Challenge Solved!</title>
      <link>https://uvacs2102.github.io/nandxorchallengesolved/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/nandxorchallengesolved/</guid>
      <description>&lt;p&gt;Congratulations to Jake Smith for solving the NAND/XOR challenge from &lt;a href=&#34;https://uvacs2102.github.io/class5&#34;&gt;Class 5&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The minimum number of NAND gates needed to implement XOR is &lt;strong&gt;5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;His solution used a brute force search through all possible formulas
using NANDs to test them for logical equivalence to XOR.&lt;/p&gt;

&lt;p&gt;You can find the Python code he used to do the search here: &lt;a href=&#34;https://github.com/ION28/CS2102_ChallengeProblemSolutions/blob/master/CP1_NAND_Brute_Force.py&#34;&gt;
_https://github.com/ION28/CS2102_ChallengeProblemSolutions/blob/master/CP1_NAND_Brute&lt;em&gt;Force.py&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;His write-up of the solution, including a list of all 200 ways to
define XOR using 5 NAND operations is here: &lt;a href=&#34;https://uvacs2102.github.io/docs/jts5np_Challenge01_NAND_BruteForce_Submission_2.pdf&#34;&gt;Solution (PDF)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 4</title>
      <link>https://uvacs2102.github.io/ps4posted/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps4posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps4&#34;&gt;&lt;strong&gt;Problem Set 4&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps4.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 22 September at 6:29:00pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 8: Sequences, Relations, Functions</title>
      <link>https://uvacs2102.github.io/class8/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class8/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;&lt;strong&gt;Problem Set 3&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;2a3dfdb08071473cb23b4f28b5a67433&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class8.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;sequences&#34;&gt;Sequences&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;sequence&lt;/strong&gt; is a mathematical datatype that bears similarities to sets. A sequence $S$ also contains some elements, but we usually refer to them as &lt;em&gt;components&lt;/em&gt;. There are two major differences between sets and sequences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Components of a sequence are &lt;strong&gt;ordered&lt;/strong&gt;. There is either $0$, or $1$ or $2$, or &amp;hellip; $n$ components, when the sequence if &lt;em&gt;finite&lt;/em&gt; or it could be an infinite sequence that has an $i$&amp;lsquo;th component for any non-zero natural number $i$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Different components of a sequence could be equal. For example $(a,b,a)$ has $a$ repeating, and this is a different sequence compared to $(a,b,b)$ even though they both have 3 componetns. If we interprete them as &lt;em&gt;sets&lt;/em&gt;, then they will be equal sets with $2$ elements each.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;cartesian-product&#34;&gt;Cartesian Product&lt;/h1&gt;

&lt;p&gt;We can use set products to get new sets whose elements are sequences. Cartesian product is a very useful way of doing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Products.&lt;/strong&gt; A &lt;em&gt;Cartesian product&lt;/em&gt; of sets $S_1, S_2, \cdots, S_n$
  is a set consisting of all possible sequences of $n$ elements where the
  $i$\textsuperscript{th} element is chosen from $S_i$.&lt;/p&gt;

&lt;p&gt;$$ S_1 \times S_2 \times \cdots \times S_n = { (s_1, s_2, \cdots, s_n) | s_i \in S_i } $$&lt;/p&gt;

&lt;p&gt;How many elements are in $A \times B$?&lt;/p&gt;

&lt;h1 id=&#34;relations-and-binary-relations&#34;&gt;Relations and Binary Relations&lt;/h1&gt;

&lt;p&gt;A &lt;em&gt;relation&lt;/em&gt; between some elements from set $A$ and some elements from set $B$ could be represented by putting all such pairs $(a,b)$ in a set $P$. As you can see, this way, $P$ would be a subset of the cartesian product $A \times B$, namely $P \subseteq A \times B$. More formally we have the following definition.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;binary relation&lt;/strong&gt;, $P$, is defined with respect to a &lt;em&gt;domain&lt;/em&gt; set, $A$, and a
&lt;em&gt;codomain&lt;/em&gt; set, $B$, and it holds that  $P$ is $P \subseteq A \times B$. When we draw $P$ by connecting elements of $A$ to $B$ based on their membership in $P$, we call this  the &lt;em&gt;graph&lt;/em&gt; of
$R$.&lt;/p&gt;

&lt;p&gt;The notion of relations could be generalized to having relations between elements coming from multiple sets $A,B,C$, and we can also talk about relations of the form $P \subseteq A \times B \times C$, but the binary relation remains a very important data type as it allows us to define &lt;em&gt;functions&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;

&lt;p&gt;The concept of a function $F$ models is a special form of a binary relation $R$ between $A$ and $B$ where for every element  $a \in A$ there is a &lt;em&gt;unique&lt;/em&gt; element in $b \in B$ that is in relation with $a$ (i.e. $(a,b) \in R$). More formally, we use a direct new notation just reserved for working with functions.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a mathematical datatype that associates elements from
one set, called the &lt;em&gt;domain&lt;/em&gt;, with elements from another set, called a
&lt;em&gt;codomain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;$$ f: \textrm{\em domain} \rightarrow \textrm{\em codomain} $$&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining a function.&lt;/strong&gt; To define a function, we need to describe how
  elements in the domain are associated with elements in the codomain.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;What are the (sensible) domains and codomains of each function below:&lt;/p&gt;

&lt;p&gt;$$ f(n) ::= |n| \qquad \qquad f(x) ::= x^2  \qquad\qquad f(n) ::= n + 1 \qquad\qquad f(a, b) ::= a / b $$&lt;/p&gt;

&lt;p&gt;$$ f(x) ::= \sqrt{x}  \qquad \qquad \qquad f(S) ::= \textrm{minimum}_{&amp;lt;}(S) $$&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 2 Comments</title>
      <link>https://uvacs2102.github.io/ps2comments/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps2comments/</guid>
      <description>&lt;p&gt;The Problem Set 2 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps2solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 7: Sets</title>
      <link>https://uvacs2102.github.io/class7/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class7/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;&lt;strong&gt;Problem Set 3&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a5f790a4fb0740d29bb3ad6dce3fa68d&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class7.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;notes-and-questions&#34;&gt;Notes and Questions&lt;/h1&gt;

&lt;p&gt;What is a &lt;em&gt;data type&lt;/em&gt;?  What are the differences between a &lt;em&gt;mathematical
data type&lt;/em&gt; and a data type in your favorite programming language?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;set&lt;/strong&gt; is an unordered colection of objects.  A set is defined by its
membership operation: $x \in S$ is true if $x$ is in the set $S$. When $x$ is not in $S$ we write it as $x \notin S$. A set has only &lt;em&gt;one&lt;/em&gt; copy of each element. Namely, there is no repetition in elements of a set. Also, a set $A$ could be a member o another set $B$, denoted by $A \in B$. Note that members of $A$ are not necessarily members of $B$ unless they are explicitly put in $B$ directly.&lt;/p&gt;

&lt;h2 id=&#34;set-operations&#34;&gt;Set Operations&lt;/h2&gt;

&lt;p&gt;Subset: $\subseteq$ (note that this does not mean &lt;em&gt;strict subset&lt;/em&gt;)
$$A \subseteq B \iff \forall x \in A. \fillin \in \fillin.$$&lt;/p&gt;

&lt;p&gt;Set Equality: $=$
$$A = B \iff A \fillin B \wedge B \fillin A.$$&lt;/p&gt;

&lt;p&gt;Set Union: $\cup$
$$\forall x. x \in A \cup B \iff x \in A \fillin x \in B.$$&lt;/p&gt;

&lt;p&gt;Set Intersection: $\cap$
$$\forall x. x \in A \cap B \iff x \in A \fillin x \in B.$$&lt;/p&gt;

&lt;p&gt;Set Difference: $-$
$$\forall x. x \in A - B \iff x \in A \wedge x \notin B.$$&lt;/p&gt;

&lt;p&gt;Set Complement: $\overline{S}$
$$ \forall  x \in D. x \in \overline{A} \iff x \notin A.$$&lt;/p&gt;

&lt;p&gt;($D$ is the ``domain of discourse&amp;rdquo;, the universe of all objects under
discussion.)&lt;/p&gt;

&lt;!--page--&gt;

&lt;h3 id=&#34;russell-s-paradox&#34;&gt;Russell&amp;rsquo;s Paradox&lt;/h3&gt;

&lt;p&gt;$$ S_{R} = \textrm{ the set of all sets that are not members of themselves} $$&lt;/p&gt;

&lt;p&gt;Is $S&lt;em&gt;{R} \in S&lt;/em&gt;{R}$?&lt;/p&gt;

&lt;p&gt;What is the source of this paradox? Note that in this question, we are implicitly assuming that $S&lt;em&gt;{R}$ is a set, but we have never &amp;ldquo;constructed&amp;rdquo; this set properly to use it. Namely, here we are implicitly assuming that there is already a &amp;ldquo;set of all sets&amp;rdquo; $S&lt;/em&gt;{all}$ from which we remove those sets like $T$ for which $T \in T$. By removing all such $T$ from $S_{all}$ we get the set $S_R$.&lt;/p&gt;

&lt;h3 id=&#34;using-quantifiers-more-carefully&#34;&gt;Using Quantifiers More Carefully&lt;/h3&gt;

&lt;p&gt;Note that in some of the  propositions that we used to define the set operations (such as union, intersection, etc.) above, we wrote quantified $x$ without saying which set it is from. For example  $\forall x. [\dots]$. It is much preferred to always say what $x$ is belonging to when we quantify over $x$. The reason is to avoid traps like that of Russell&amp;rsquo;s paradox! This should not worry us in this class, as we will always work with well-defined &lt;em&gt;universes&lt;/em&gt; that include all the elements of the sets that we work with. Therefore, we can always assume implicitly that $x \in U$ (for a well defined set universe $U$) even if not explicitly mentioned.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&#34;set-practice&#34;&gt;Set Practice&lt;/h3&gt;

&lt;p&gt;Here are some practice problems involving sets.  We won&amp;rsquo;t go through
these in class, but you should ask questions about any are unclear.  (At
least a few of these will be on Exam 1.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define $A \subset B$ (strict subset).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prove $A \cup B \equiv B \cup A$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prove $A - B = \emptyset \iff A \subseteq B$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prove $A = B \iff (\forall a \in A \ldotp a \in B) \wedge (\forall b \in B \ldotp b \in A).$
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 3</title>
      <link>https://uvacs2102.github.io/ps3posted/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps3posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;&lt;strong&gt;Problem Set 3&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps3.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 15 September at 6:29:00pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 6: Quantifiers and More</title>
      <link>https://uvacs2102.github.io/class6/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class6/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;Everyone should have received their graded PS1 by now. Please read &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps1solutions.pdf&#34;&gt;the comments posted in collab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;&lt;strong&gt;Problem Set 2&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You should finish reading MCS Chapter 3 by Tuesday (12 September).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; 
data-id=&#34;44b72b8383c14676af241944ea541667&#34; data-ratio=&#34;1.77777777777778&#34; 
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class6.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;If you believe real computing systems have the property that the values
you read from memory will match what you wrote there, see:&lt;/p&gt;

&lt;p&gt;Sudhakar Govindavajhala and Andrew W. Appel. &lt;a href=&#34;http://sip.cs.princeton.edu/pub/memerr.pdf&#34;&gt;&lt;em&gt;Using Memory Errors to Attack a Virtual Machine&lt;/em&gt;&lt;/a&gt;, IEEE Symposium on Security and Privacy 2003.&lt;/p&gt;

&lt;p&gt;Bianca Schroeder, Eduardo Pinheiro, Wolf-Dietrich Weber. &lt;a href=&#34;http://www.cs.utoronto.ca/~bianca/papers/sigmetrics09.pdf&#34;&gt;&lt;em&gt;DRAM Errors
in the Wild: A Large-Scale Field
Study&lt;/em&gt;&lt;/a&gt;. SIGMETRICS 2009.&lt;/p&gt;

&lt;p&gt;Kaveh Razavi, Ben Gras, Erik Bosman, Bart Preneel, Cristiano Giuffrida
and Herbert Bos. &lt;a href=&#34;https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/razavi&#34;&gt;&lt;em&gt;Flip Feng Shui: Hammering a Needle in the Software
Stack&lt;/em&gt;&lt;/a&gt;. USENIX
Security 2016.&lt;/p&gt;

&lt;p&gt;Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang, and Radu Teodorescu. &lt;a href=&#34;https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_xiao.pdf&#34;&gt;&lt;em&gt;One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege Escalation&lt;/em&gt;&lt;/a&gt;, USENIX Security 2016.&lt;/p&gt;

&lt;p&gt;Sahand Saba&amp;rsquo;s &lt;a href=&#34;http://sahandsaba.com/understanding-sat-by-implementing-a-simple-sat-solver-in-python.html&#34;&gt;&lt;em&gt;Understanding SAT by Implementing a Simple SAT Solver in
Python&lt;/em&gt;&lt;/a&gt;  [&lt;a href=&#34;https://github.com/evansuva/simple-sat&#34;&gt;Code with Dave&amp;rsquo;s modifications: https://github.com/evansuva/simple-sat&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://baldur.iti.kit.edu/sat-competition-2017/&#34;&gt;SAT Competition 2017&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Millennium Problems on &lt;a href=&#34;http://www.claymath.org/millennium-problems/&#34;&gt;Clay institute&amp;rsquo;s
website&lt;/a&gt;. Whether or not we can&lt;br /&gt;
solve the &lt;em&gt;satisfiability&lt;/em&gt; of a given CNF or 3CNF formula in polynomial time,
is the P vs. NP question in this list.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;programs-and-proofs&#34;&gt;Programs and Proofs&lt;/h1&gt;

&lt;p&gt;What does it mean to &lt;em&gt;test&lt;/em&gt; a computing system?  What does it mean for a computing system to &lt;em&gt;always behave correctly&lt;/em&gt;?&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;p&gt;Can a mathematical proof guarantee a real computing system will behave correctly?&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;minima&#34;&gt;Minima&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;minimum&lt;/em&gt; of a set with respect to some comparator operator is the
element which is &amp;ldquo;less than&amp;rdquo; (according to that comparator) every
other element: $m \in S$ is the &lt;em&gt;minimum&lt;/em&gt; of $S$ if and only if
$\forall x \in S - { m } . m \prec x$.&lt;/p&gt;

&lt;p&gt;$$
\forall S \in \textrm{pow}(\mathbb{N}) - { \varnothing } \ldotp \exists m \in S\ldotp \forall x \in S - {m}\ldotp m &amp;lt; x
$$&lt;/p&gt;

&lt;h1 id=&#34;formulas-propositions-and-inference-rules&#34;&gt;Formulas, Propositions, and Inference Rules&lt;/h1&gt;

&lt;p&gt;$P \implies Q$ is a &lt;em&gt;formula&lt;/em&gt;.&lt;br /&gt;
$\forall P \in { T, F } . \forall Q \in { T, F } . P \implies Q$ is a &lt;em&gt;proposition&lt;/em&gt;.&lt;br /&gt;
$\infer{Q}{P}$ is an &lt;em&gt;inference rule&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;formula&lt;/em&gt; is &lt;em&gt;satisfiable&lt;/em&gt; if there is some way to make it true.&lt;/p&gt;

&lt;p&gt;$P \implies Q$ is satisfiable:&lt;/p&gt;

&lt;p&gt;$\exists P \in { T, F } . \exists Q \in {T, F } . P \implies Q$&lt;/p&gt;

&lt;p&gt;We can show a formula is satisfiable by giving &lt;em&gt;one&lt;/em&gt; choice for the
variable assignments that makes it true. For example, $P = T$, $Q =
T$.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;formula&lt;/em&gt; is &lt;em&gt;valid&lt;/em&gt; if there is no way to make it false.&lt;/p&gt;

&lt;p&gt;$P \implies Q$ is &lt;em&gt;not&lt;/em&gt; valid:&lt;/p&gt;

&lt;p&gt;$\forall P \in { T, F } . \forall Q \in {T, F } . P \implies Q$&lt;/p&gt;

&lt;p&gt;This proposition is false, we can chose $P = T$, $Q = F$.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;inference rule&lt;/em&gt; is sound if it never leads to a false conclusion. An inference rule
$\infer{Q}{P}$ is sound if and only if the formula
$P \implies Q$ is valid. So, this way, we can find out whether an inference rule is sound or not, by checking out whether the corresponding formula is valid or not.&lt;/p&gt;

&lt;h1 id=&#34;negating-quantifiers&#34;&gt;Negating Quantifiers&lt;/h1&gt;

&lt;p&gt;What is the negation of $\forall x \in S . P(x)$?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;What is the negation of $\exists x \in S . P(x)$?
&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;satisfiability&#34;&gt;Satisfiability&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A formula is in &lt;em&gt;SAT&lt;/em&gt; if it is in CNF form and it is
  satisfiable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A formula is in &lt;em&gt;3SAT&lt;/em&gt; if it is in 3CNF form and it is
  satisfiable.&lt;/p&gt;

&lt;p&gt;$$
(x_1 \vee x_2 \vee x_3) \wedge (x_1 \vee \overline{x_2} \vee x_3) \wedge (\overline{x_1} \vee x_2 \vee \overline{x_3})
$$&lt;/p&gt;

&lt;p&gt;\begin{center} \tiny \begin{math} (x&lt;em&gt;{48} \vee x&lt;/em&gt;{4} \vee \overline{x&lt;em&gt;{9}})
\wedge (\overline{x&lt;/em&gt;{44}} \vee x&lt;em&gt;{50} \vee \overline{x&lt;/em&gt;{37}}) \wedge
(\overline{x&lt;em&gt;{8}} \vee \overline{x&lt;/em&gt;{1}} \vee x&lt;em&gt;{28}) \wedge (x&lt;/em&gt;{21} \vee
x&lt;em&gt;{27} \vee \overline{x&lt;/em&gt;{32}}) \wedge (x&lt;em&gt;{17} \vee x&lt;/em&gt;{29} \vee
\overline{x&lt;em&gt;{30}}) \wedge (x&lt;/em&gt;{30} \vee x&lt;em&gt;{24} \vee x&lt;/em&gt;{37}) \wedge
(\overline{x&lt;em&gt;{22}} \vee \overline{x&lt;/em&gt;{27}} \vee \overline{x&lt;em&gt;{44}}) \wedge
(x&lt;/em&gt;{8} \vee \overline{x&lt;em&gt;{25}} \vee \overline{x&lt;/em&gt;{24}}) \wedge
(\overline{x&lt;em&gt;{44}} \vee x&lt;/em&gt;{50} \vee x&lt;em&gt;{14}) \wedge (x&lt;/em&gt;{45} \vee x&lt;em&gt;{15} \vee
x&lt;/em&gt;{37}) \wedge (\overline{x&lt;em&gt;{16}} \vee x&lt;/em&gt;{14} \vee \overline{x&lt;em&gt;{36}}) \wedge
(\overline{x&lt;/em&gt;{33}} \vee x&lt;em&gt;{5} \vee x&lt;/em&gt;{26}) \wedge (x&lt;em&gt;{18} \vee
\overline{x&lt;/em&gt;{7}} \vee \overline{x&lt;em&gt;{24}}) \wedge (x&lt;/em&gt;{31} \vee x&lt;em&gt;{38} \vee
x&lt;/em&gt;{28}) \wedge (x&lt;em&gt;{31} \vee \overline{x&lt;/em&gt;{33}} \vee \overline{x&lt;em&gt;{8}}) \wedge
(x&lt;/em&gt;{49} \vee x&lt;em&gt;{7} \vee \overline{x&lt;/em&gt;{6}}) \wedge (x&lt;em&gt;{34} \vee
\overline{x&lt;/em&gt;{8}} \vee x&lt;em&gt;{46}) \wedge (x&lt;/em&gt;{4} \vee \overline{x&lt;em&gt;{5}} \vee
\overline{x&lt;/em&gt;{35}}) \wedge (x&lt;em&gt;{43} \vee x&lt;/em&gt;{27} \vee x&lt;em&gt;{39}) \wedge
(\overline{x&lt;/em&gt;{46}} \vee \overline{x&lt;em&gt;{40}} \vee \overline{x&lt;/em&gt;{27}}) \wedge
(\overline{x&lt;em&gt;{25}} \vee x&lt;/em&gt;{14} \vee \overline{x&lt;em&gt;{49}}) \wedge (x&lt;/em&gt;{38} \vee
x&lt;em&gt;{5} \vee x&lt;/em&gt;{15}) \wedge (x&lt;em&gt;{9} \vee x&lt;/em&gt;{14} \vee \overline{x&lt;em&gt;{19}}) \wedge
(x&lt;/em&gt;{45} \vee \overline{x&lt;em&gt;{42}} \vee \overline{x&lt;/em&gt;{39}}) \wedge (x&lt;em&gt;{34} \vee
\overline{x&lt;/em&gt;{22}} \vee \overline{x&lt;em&gt;{28}}) \wedge (\overline{x&lt;/em&gt;{20}} \vee
x&lt;em&gt;{15} \vee \overline{x&lt;/em&gt;{8}}) \wedge (\overline{x&lt;em&gt;{44}} \vee
\overline{x&lt;/em&gt;{10}} \vee \overline{x&lt;em&gt;{9}}) \wedge (x&lt;/em&gt;{22} \vee
\overline{x&lt;em&gt;{31}} \vee x&lt;/em&gt;{14}) \wedge (\overline{x&lt;em&gt;{9}} \vee
\overline{x&lt;/em&gt;{42}} \vee \overline{x&lt;em&gt;{15}}) \wedge (\overline{x&lt;/em&gt;{40}} \vee
x&lt;em&gt;{12} \vee \overline{x&lt;/em&gt;{32}}) \wedge (\overline{x&lt;em&gt;{20}} \vee
\overline{x&lt;/em&gt;{6}} \vee \overline{x&lt;em&gt;{15}}) \wedge (\overline{x&lt;/em&gt;{37}} \vee
x&lt;em&gt;{39} \vee \overline{x&lt;/em&gt;{23}}) \wedge (\overline{x&lt;em&gt;{3}} \vee
\overline{x&lt;/em&gt;{40}} \vee \overline{x&lt;em&gt;{32}}) \wedge (\overline{x&lt;/em&gt;{4}} \vee
\overline{x&lt;em&gt;{25}} \vee x&lt;/em&gt;{7}) \wedge (\overline{x&lt;em&gt;{20}} \vee
\overline{x&lt;/em&gt;{36}} \vee \overline{x&lt;em&gt;{37}}) \wedge (\overline{x&lt;/em&gt;{40}} \vee
\overline{x&lt;em&gt;{35}} \vee x&lt;/em&gt;{39}) \wedge (\overline{x&lt;em&gt;{43}} \vee
\overline{x&lt;/em&gt;{40}} \vee \overline{x&lt;em&gt;{7}}) \wedge (x&lt;/em&gt;{34} \vee x&lt;em&gt;{44} \vee
x&lt;/em&gt;{26}) \wedge (x&lt;em&gt;{13} \vee x&lt;/em&gt;{27} \vee x&lt;em&gt;{28}) \wedge (x&lt;/em&gt;{12} \vee
\overline{x&lt;em&gt;{36}} \vee x&lt;/em&gt;{7}) \wedge (\overline{x&lt;em&gt;{16}} \vee x&lt;/em&gt;{9} \vee
\overline{x&lt;em&gt;{24}}) \wedge (\overline{x&lt;/em&gt;{48}} \vee x&lt;em&gt;{14} \vee x&lt;/em&gt;{28}) \wedge
(x&lt;em&gt;{16} \vee x&lt;/em&gt;{4} \vee x&lt;em&gt;{40}) \wedge (\overline{x&lt;/em&gt;{25}} \vee x&lt;em&gt;{15} \vee
x&lt;/em&gt;{37}) \wedge (x&lt;em&gt;{47} \vee \overline{x&lt;/em&gt;{26}} \vee \overline{x&lt;em&gt;{23}}) \wedge
(x&lt;/em&gt;{4} \vee \overline{x&lt;em&gt;{13}} \vee x&lt;/em&gt;{36}) \wedge (x&lt;em&gt;{48} \vee
\overline{x&lt;/em&gt;{13}} \vee \overline{x&lt;em&gt;{37}}) \wedge (x&lt;/em&gt;{4} \vee x&lt;em&gt;{35} \vee
\overline{x&lt;/em&gt;{27}}) \wedge (\overline{x&lt;em&gt;{22}} \vee x&lt;/em&gt;{47} \vee x&lt;em&gt;{26}) \wedge
(\overline{x&lt;/em&gt;{22}} \vee \overline{x&lt;em&gt;{46}} \vee x&lt;/em&gt;{27}) \wedge
(\overline{x&lt;em&gt;{20}} \vee x&lt;/em&gt;{49} \vee x&lt;em&gt;{11}) \wedge (x&lt;/em&gt;{42} \vee
\overline{x&lt;em&gt;{10}} \vee x&lt;/em&gt;{28}) \wedge (\overline{x&lt;em&gt;{45}} \vee x&lt;/em&gt;{28} \vee
\overline{x&lt;em&gt;{37}}) \wedge (x&lt;/em&gt;{14} \vee \overline{x&lt;em&gt;{32}} \vee
\overline{x&lt;/em&gt;{23}}) \wedge (x&lt;em&gt;{22} \vee x&lt;/em&gt;{14} \vee x&lt;em&gt;{23}) \wedge
(\overline{x&lt;/em&gt;{17}} \vee \overline{x&lt;em&gt;{46}} \vee \overline{x&lt;/em&gt;{7}}) \wedge
(\overline{x&lt;em&gt;{31}} \vee x&lt;/em&gt;{46} \vee \overline{x&lt;em&gt;{50}}) \wedge (x&lt;/em&gt;{34} \vee
\overline{x&lt;em&gt;{41}} \vee x&lt;/em&gt;{43}) \wedge (x&lt;em&gt;{17} \vee \overline{x&lt;/em&gt;{9}} \vee
x&lt;em&gt;{15}) \wedge (x&lt;/em&gt;{46} \vee x&lt;em&gt;{14} \vee \overline{x&lt;/em&gt;{12}}) \wedge
(\overline{x&lt;em&gt;{20}} \vee x&lt;/em&gt;{12} \vee x&lt;em&gt;{14}) \wedge (x&lt;/em&gt;{41} \vee x&lt;em&gt;{42} \vee
\overline{x&lt;/em&gt;{15}}) \wedge (x&lt;em&gt;{48} \vee x&lt;/em&gt;{46} \vee \overline{x&lt;em&gt;{36}}) \wedge
(\overline{x&lt;/em&gt;{22}} \vee \overline{x&lt;em&gt;{4}} \vee \overline{x&lt;/em&gt;{49}}) \wedge
(x&lt;em&gt;{22} \vee x&lt;/em&gt;{12} \vee \overline{x&lt;em&gt;{42}}) \wedge (x&lt;/em&gt;{13} \vee
\overline{x&lt;em&gt;{38}} \vee x&lt;/em&gt;{39}) \wedge (x&lt;em&gt;{48} \vee \overline{x&lt;/em&gt;{16}} \vee
\overline{x&lt;em&gt;{27}}) \wedge (x&lt;/em&gt;{17} \vee \overline{x&lt;em&gt;{18}} \vee
\overline{x&lt;/em&gt;{26}}) \wedge (x&lt;em&gt;{48} \vee \overline{x&lt;/em&gt;{40}} \vee
\overline{x&lt;em&gt;{35}}) \wedge (\overline{x&lt;/em&gt;{43}} \vee \overline{x&lt;em&gt;{40}} \vee
\overline{x&lt;/em&gt;{49}}) \wedge (x&lt;em&gt;{29} \vee x&lt;/em&gt;{11} \vee \overline{x&lt;em&gt;{32}}) \wedge
(x&lt;/em&gt;{33} \vee \overline{x&lt;em&gt;{17}} \vee x&lt;/em&gt;{39}) \wedge (\overline{x&lt;em&gt;{25}} \vee
\overline{x&lt;/em&gt;{9}} \vee \overline{x&lt;em&gt;{6}}) \wedge (x&lt;/em&gt;{40} \vee \overline{x&lt;em&gt;{50}}
\vee x&lt;/em&gt;{19}) \wedge (x&lt;em&gt;{8} \vee x&lt;/em&gt;{10} \vee \overline{x&lt;em&gt;{27}}) \wedge (x&lt;/em&gt;{5}
\vee x&lt;em&gt;{9} \vee \overline{x&lt;/em&gt;{26}}) \wedge (x&lt;em&gt;{45} \vee \overline{x&lt;/em&gt;{38}} \vee
\overline{x&lt;em&gt;{27}}) \wedge (\overline{x&lt;/em&gt;{4}} \vee \overline{x&lt;em&gt;{40}} \vee
\overline{x&lt;/em&gt;{42}}) \wedge (x&lt;em&gt;{21} \vee x&lt;/em&gt;{50} \vee x&lt;em&gt;{12}) \wedge
(\overline{x&lt;/em&gt;{8}} \vee \overline{x&lt;em&gt;{14}} \vee \overline{x&lt;/em&gt;{42}}) \wedge
(\overline{x&lt;em&gt;{17}} \vee x&lt;/em&gt;{47} \vee \overline{x&lt;em&gt;{27}}) \wedge (x&lt;/em&gt;{49} \vee
\overline{x&lt;em&gt;{12}} \vee \overline{x&lt;/em&gt;{6}}) \wedge (x&lt;em&gt;{27} \vee x&lt;/em&gt;{49} \vee
\overline{x&lt;em&gt;{32}}) \wedge (\overline{x&lt;/em&gt;{29}} \vee \overline{x&lt;em&gt;{12}} \vee
\overline{x&lt;/em&gt;{26}}) \wedge (x&lt;em&gt;{48} \vee \overline{x&lt;/em&gt;{2}} \vee x&lt;em&gt;{6}) \wedge
(x&lt;/em&gt;{16} \vee x&lt;em&gt;{36} \vee x&lt;/em&gt;{49}) \wedge (x&lt;em&gt;{33} \vee \overline{x&lt;/em&gt;{12}} \vee
\overline{x&lt;em&gt;{26}}) \wedge (\overline{x&lt;/em&gt;{33}} \vee x&lt;em&gt;{29} \vee x&lt;/em&gt;{49}) \wedge
(\overline{x&lt;em&gt;{48}} \vee x&lt;/em&gt;{2} \vee x&lt;em&gt;{19}) \wedge (x&lt;/em&gt;{25} \vee x&lt;em&gt;{36} \vee
x&lt;/em&gt;{49}) \wedge (x&lt;em&gt;{21} \vee x&lt;/em&gt;{40} \vee \overline{x&lt;em&gt;{14}}) \wedge
(\overline{x&lt;/em&gt;{34}} \vee \overline{x&lt;em&gt;{44}} \vee \overline{x&lt;/em&gt;{6}}) \wedge
(x&lt;em&gt;{48} \vee \overline{x&lt;/em&gt;{50}} \vee \overline{x&lt;em&gt;{1}}) \wedge (x&lt;/em&gt;{5} \vee
\overline{x&lt;em&gt;{12}} \vee x&lt;/em&gt;{7}) \wedge (x&lt;em&gt;{21} \vee \overline{x&lt;/em&gt;{35}} \vee
\overline{x&lt;em&gt;{27}}) \wedge (\overline{x&lt;/em&gt;{22}} \vee \overline{x&lt;em&gt;{16}} \vee
\overline{x&lt;/em&gt;{14}}) \wedge (\overline{x&lt;em&gt;{13}} \vee \overline{x&lt;/em&gt;{35}} \vee
\overline{x&lt;em&gt;{12}}) \wedge (\overline{x&lt;/em&gt;{4}} \vee \overline{x&lt;em&gt;{35}} \vee
\overline{x&lt;/em&gt;{42}}) \wedge (\overline{x&lt;em&gt;{50}} \vee \overline{x&lt;/em&gt;{40}} \vee
x&lt;em&gt;{7}) \wedge (x&lt;/em&gt;{25} \vee x&lt;em&gt;{47} \vee \overline{x&lt;/em&gt;{12}}) \end{math}
\end{center}&lt;/p&gt;

&lt;h2 id=&#34;converting-truth-tables-to-dnf&#34;&gt;Converting Truth Tables to DNF&lt;/h2&gt;

&lt;p&gt;\begin{tabular}{cc|cc}
$P$ &amp;amp; $Q$ &amp;amp; $P \implies Q$ &amp;amp; $P \oplus Q$ \ \hline
\T &amp;amp; \T   &amp;amp; \T &amp;amp; \F &lt;br /&gt;
\T &amp;amp; \F   &amp;amp; \F &amp;amp; \T &lt;br /&gt;
\F &amp;amp; \T   &amp;amp; \T &amp;amp; \T &lt;br /&gt;
\F &amp;amp; \F   &amp;amp; \T &amp;amp; \F &lt;br /&gt;
\end{tabular}&lt;/p&gt;

&lt;p&gt;The output of the operator is \T\ if and only if the inputs do match &lt;em&gt;one row&lt;/em&gt; where the output is \T.  So, to get a DNF we can go over all the rows where hte output is \T, and for each write a clause that means we &lt;em&gt;are&lt;/em&gt; in that row. Then we OR all such (conjunctive) clauses. For example, for $P \oplus Q$ we get&lt;/p&gt;

&lt;p&gt;$$(P \wedge \neg Q) \vee (\neg P \wedge Q)$$&lt;/p&gt;

&lt;h2 id=&#34;converting-truth-tables-to-cnf&#34;&gt;Converting Truth Tables to CNF&lt;/h2&gt;

&lt;p&gt;\begin{tabular}{cc|cc}
$P$ &amp;amp; $Q$ &amp;amp; $P \implies Q$ &amp;amp; $P \oplus Q$ \ \hline
\T &amp;amp; \T   &amp;amp; \T &amp;amp; \F &lt;br /&gt;
\T &amp;amp; \F   &amp;amp; \F &amp;amp; \T &lt;br /&gt;
\F &amp;amp; \T   &amp;amp; \T &amp;amp; \T &lt;br /&gt;
\F &amp;amp; \F   &amp;amp; \T &amp;amp; \F &lt;br /&gt;
\end{tabular}&lt;/p&gt;

&lt;p&gt;The output of the operator is \T\ if and only if the inputs do not match &lt;em&gt;any row&lt;/em&gt; where the output is \F.  So, to get a CNF we can go over all the rows where hte output is \F, and for each write a clause that means we are &lt;em&gt;not&lt;/em&gt; in that row. Then we AND all such clauses. For example, for $P \oplus Q$ we get&lt;/p&gt;

&lt;p&gt;$$(\neg P \vee \neg Q) \wedge (P \vee Q)$$&lt;/p&gt;

&lt;h2 id=&#34;the-related-3cnf-formulation&#34;&gt;The related 3CNF formulation&lt;/h2&gt;

&lt;p&gt;When we are only interested to know whether or not a given formula is satisfiable, we can write a 3CNF that is satisfiable iff the original formula is. In order to do that, we first write an equivalent CNF, and then convert it to a 3CNF (which is not necessarily equivalent, but only guarantees to preserve the &lt;em&gt;satisfiability&lt;/em&gt; feature) as follow. For each clause with less than 3 literals such as $(A \lor \neg B)$ we add a dummy variable $C$ (only for this clause) and interprete the $(A \lor \neg B)$ as a formula over all of $A,B,C$ and write a CNF for them (which happens to be 3CNF!). For longer clauses such as
$(A \lor B \lor C \lor D)$ we do another trick of breaking them into smaller parts using new dummy variables as follows $(A \lor B \lor \neg X) \wedge (\neg X \lor C \lor D).$&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 1 Comments</title>
      <link>https://uvacs2102.github.io/ps1comments/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps1comments/</guid>
      <description>&lt;p&gt;The Problem Set 1 comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps1solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 5: CNF, Computing, Quantifiers</title>
      <link>https://uvacs2102.github.io/class5/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class5/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;&lt;strong&gt;Problem Set 2&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b6468be050744777ac59c696390d3d89&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class5.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightrl&#34;&gt;
&lt;strong&gt;Challenge Problem Opportunity.&lt;/strong&gt; Find the shortest formula that is
  equivalent to XOR(&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;) using just NAND operations. Shortest
  means the minimum number of NAND operations. A convincing answer
  would include a proof that no shorter formula exists.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;If you want to learn more about how to learn the logic implemented by a chip
and cryptosystems used in car immobolizers, see &lt;a href=&#34;https://www.cs.virginia.edu/~evans/pubs/usenix08/usenix08.pdf&#34;&gt;&lt;em&gt;Reverse-Engineering a
Cryptographic RFID
Tag&lt;/em&gt;&lt;/a&gt; (Karsten
Nohl, David Evans, Starbug, and Henryk Pl&amp;ouml;tz, &lt;em&gt;USENIX Security
Symposium&lt;/em&gt; 2008), or &lt;a href=&#34;https://www.youtube.com/watch?v=fCwY27EnOF8&#34;&gt;this
video&lt;/a&gt;.  Please don&amp;rsquo;t steal any
cars.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;notes-and-questions&#34;&gt;Notes and Questions&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition: satisfiable.&lt;/strong&gt; A logical formula is &lt;em&gt;satisfiable&lt;/em&gt; if there
  is &lt;em&gt;some&lt;/em&gt; way to make it &lt;strong&gt;true&lt;/strong&gt;.  That is, there is at least one
  assignment of truth value to its variables that makes the forumla
  true.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition: conjunctive normal form (CNF).&lt;/strong&gt; A logical formula that is
  written as a conjunction of &lt;em&gt;clauses&lt;/em&gt;, where each clause is a
  disjunction of &lt;em&gt;literals&lt;/em&gt;, and each literal is either a variable or a
  negation of a variable, is in &lt;em&gt;conjunctive normal form&lt;/em&gt;.  If each
  clause has excatly three literals, it is called &lt;em&gt;three conjunctive
  normal form&lt;/em&gt; (3CNF).&lt;/p&gt;

&lt;p&gt;$$
(a_1 \vee a_2 \vee \neg a_3) \wedge
(a_1 \vee \neg a_2 \vee a_3) \wedge
(\neg a_1 \vee a_2 \vee \neg a_3) \wedge
(\neg a_1 \vee a_2 \vee a_3)
$$&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;Show that every logical formula can be written in conjunctive normal form.
Also, show that if we only care about &lt;em&gt;satisfiability&lt;/em&gt; we can always write it
in 3CNF form. Namely, for every CNF formula $F$, we can write a 3CNF formula
$G$ such that $F$ is satisfiable if and only if $G$ is satisfiable.&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;p&gt;What is the maximum number of (different) clauses in a 3CNF formula
involving 5 variables?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What is the maximum number of (different) clauses in a &lt;em&gt;satisfiable&lt;/em&gt;
3CNF formula involving 5 variables?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What is the maximum number of (different) clauses in a &lt;em&gt;valid&lt;/em&gt; 3CNF formula involving 5 variables?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;logical-quantifiers&#34;&gt;Logical Quantifiers&lt;/h2&gt;

&lt;p&gt;$\forall x \in S. P(x)$ means $P$ holds for &lt;em&gt;every&lt;/em&gt; element of $S$.&lt;br /&gt;
$\exists x \in S. P(x)$ means $P$ holds for &lt;em&gt;at least one&lt;/em&gt; element of $S$.&lt;/p&gt;

&lt;p&gt;Define &lt;em&gt;valid&lt;/em&gt; and &lt;em&gt;satisfiable&lt;/em&gt; using logical quantifiers:&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;$\forall x \in S. P(x)$ is equivalent to $\neg(\exists x \in S. \qquad \qquad)$&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;Notation: $\textrm{pow}(S)$ denotes the &lt;em&gt;powerset&lt;/em&gt; of $S$.  The powerset
of a set is the set of all possible subsets of that S.  So,
$\textrm{pow}(\mathbb{N})$ denotes all subsets of the natural numbers.&lt;/p&gt;

&lt;p&gt;Notation: $A - B$ denotes the &lt;em&gt;difference&lt;/em&gt; between two sets.  It is the
elements of $A$, with every element of $B$ removed.&lt;/p&gt;

&lt;p&gt;Notation: $\varnothing$ is the &lt;em&gt;empty set&lt;/em&gt;.  It is the set with no elements: ${ }$.&lt;/p&gt;

&lt;p&gt;\begin{center}
\Large&lt;/p&gt;

&lt;p&gt;$$
\fillin S \in \textrm{pow}(\mathbb{N}) - { \varnothing } \ldotp \fillin m \in S\ldotp \fillin x \in S - {m}\ldotp m &amp;lt; x
$$
\end{center}&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 2</title>
      <link>https://uvacs2102.github.io/ps2posted/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps2posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;&lt;strong&gt;Problem Set 2&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps2.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 8 September at 6:29:00pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Additional Resources</title>
      <link>https://uvacs2102.github.io/additionalresources/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/additionalresources/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve added a page, &lt;a href=&#34;https://uvacs2102.github.io/resources&#34;&gt;Resources&lt;/a&gt;, with links to some
suggested resources beyond the course materials. If you find other
useful resources, please post them in slack and we&amp;rsquo;ll add them to this
list.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 4: Logical Operators and Formulas</title>
      <link>https://uvacs2102.github.io/class4/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class4/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps1&#34;&gt;&lt;strong&gt;Problem Set 1&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next week, we will cover the rest of Chapter 3 (Satisfiability and
Quantifiers).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9785beead9024671b78c03e16f5bfba2&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class4.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Scott Brown, &lt;a href=&#34;http://ms.appliedprobability.org/data/files/selected%20articles/39-1-1.pdf&#34;&gt;&lt;em&gt;The Life and Work of Augustus De Morgan&lt;/em&gt;&lt;/a&gt;. Applied Probability 2006.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.claymath.org/content/correspondence-de-morgan-0&#34;&gt;Ada&amp;rsquo;s Correspondence with De Morgan&lt;/a&gt; (Clay Mathematics Institute)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;notes-and-questions&#34;&gt;Notes and Questions&lt;/h1&gt;

&lt;h2 id=&#34;well-ordering-principle-proof&#34;&gt;Well-Ordering Principle Proof&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Odd Summation.&lt;/strong&gt; (Problem 2.12) Prove that for all $n &amp;gt; 0$, the sum of the first $n$ odd numbers is $n^2$.&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;
#
#

## Notations

Mathematics and other domains often use many symbols to mean the same
thing.  Section 3.2 of the book gives some common notations, but there
are others in common use.

\begin{center}
\begin{tabular}{cccc}
English &amp; Logic &amp; C, Java, Rust &amp; Python \\ \hline
$P$ \smallcaps{implies} $Q$ &amp; $P \implies Q$ {\em or} $P \longrightarrow Q$ &amp; - &amp; - \\
\smallcaps{not}$(P)$ &amp; $\neg P$ {\em or} $\overline{P}$ &amp; \verb+!p+ &amp; \verb+not p+ \\
$P$ \smallcaps{and} $Q$ &amp; $P \wedge Q$ &amp; \verb+p &amp;&amp; q+ &amp; \verb+p and q+ \\
$P$ \smallcaps{or} $Q$ &amp; $P \vee Q$ &amp; \verb+P || Q+ &amp; \verb+p or q+ \\
$P$ \smallcaps{xor} $Q$ &amp; $P \oplus Q$ &amp; \verb+p ^ q+ (bitwise) or \verb+p != q+ &amp; \verb+p ^ q+ \\
\end{tabular}
\end{center}

For what values in Java or C are \verb+p ^ q+ and \verb+p != q+ both valid, but have different meanings?

## Logical Formulas

\begin{center}
\begin{tabular}{c|c|c}
$P$ &amp; \smallcaps{not}$(P)$ &amp; \_\_\_\_\_\_\_\_ \\ \hline
\T &amp; \F &amp; \\
\F &amp; \T &amp; \\
\end{tabular}
\end{center}

How many one-input Boolean operators are there?  How many do we need to
produce them all?

#

\begin{center}
\begin{tabular}{cc|c|c|c|c|c}
$P$ &amp; $Q$ &amp; $P \wedge Q$ &amp; $P \vee Q$ &amp; $P \implies Q$ &amp; \_\_\_\_\_\_\_\_ &amp; $P \oplus Q$ \\ \hline
\T &amp; \T   &amp; \T &amp; \T &amp; &amp; \T &amp; \F \\
\T &amp; \F   &amp;    &amp; \T &amp; &amp; \F &amp; \T \\
\F &amp; \T   &amp;    &amp; \T &amp; &amp; \F &amp; \T \\
\F &amp; \F   &amp;   &amp; \F &amp;  &amp; \T &amp; \F \\
\end{tabular}
\end{center}

How many two-input Boolean operators are there?

#

**De Morgan&#39;s Laws:** 
$$\neg(P \wedge Q) \equiv (\neg P) \vee (\neg Q)  \qquad \neg(P \vee Q) \equiv (\neg P) \wedge (\neg Q)$$

How can these be written without the $\neg$ in front?

##

Prove that it is possible to make all two-input Boolean operators using
just \smallcaps{not} and any _odd_ two-input operator. (An operator is _odd_,
if the number of outputs that are **True** are odd.)

##

**Definition: valid.** A logical formula is _valid_ if there is no way
  to make it **false**.  That is, no matter what truth values its
  variables have, it is always **true**.  (Another name for this is a
  _tautology_.)

**Definition: satisfiable.** A logical formula is _satisfiable_ if there
  is _some_ way to make it **true**.  That is, there is at least one
  assignment of truth value to its variables that makes the forumla
  true.

For each of the formulas below, determine if it is _valid_ and if it is _satisfiable_.

1. $(P \vee \neg P)$

2. $(P \vee Q) \wedge (\neg P \vee Q)$

3. $((P \implies Q) \wedge (Q \implies P)) \vee (P \xor Q)$



&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Class 3: Well-Ordering Principle</title>
      <link>https://uvacs2102.github.io/class3/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class3/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;This week, you should read MCS Chapter 2 and MCS Chapter 3 (at least
through the end of Section 3.4).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps1&#34;&gt;&lt;strong&gt;Problem Set 1&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Office hours started Monday afternoon. See &lt;a href=&#34;https://uvacs2102.github.io/officehours/&#34;&gt;the course
calendar&lt;/a&gt; for the full office
hours schedule.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;dd5193b1df334282a62697cf2343ad3a&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class3.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://math.berkeley.edu/~kpmann/Well-ordering.pdf&#34;&gt;&lt;em&gt;The Well-Ordering Theorem: one of the Greatest Mathematical Controversies of All Time&lt;/em&gt;&lt;/a&gt;, Kathryn Mann.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;notes-and-questions&#34;&gt;Notes and Questions&lt;/h1&gt;

&lt;p&gt;What properties must a sensible ordering function have?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set is &lt;em&gt;ordered&lt;/em&gt; with respect to an ordering relation (e.g., $&amp;lt;$), if two things hold. First: every pair of inequal elements $a,b$ in $A$
either satisfy $a&amp;lt;b$ or $b&amp;lt;a$. Second  $a&amp;lt;b$ and $b&amp;lt;a$ should always imply that $a&amp;lt;b$ (this is called the transitivity).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; An ordered set,with respect to an ordering
  relation (e.g., $&amp;lt;$), is &lt;em&gt;well-ordered&lt;/em&gt;  if all of its non-empty subsets has a minimum
  element.&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;Which of these are well-ordered?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The set of non-negative integers, comparator $&amp;lt;$.&lt;/li&gt;
&lt;li&gt;The set of integers, comparator $&amp;lt;$.&lt;/li&gt;
&lt;li&gt;The set of integers, comparator $|a| &amp;lt; |b|$.&lt;/li&gt;
&lt;li&gt;The set of integers, comparator if |a| = |b|: $a &amp;lt; b$, else: $|a| &amp;lt; |b|$.&lt;/li&gt;
&lt;li&gt;The set of national soccer teams, comparator winning games.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prove the set of positive rationals is &lt;em&gt;not&lt;/em&gt; well-ordered under $&amp;lt;$.&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Provide a comparison function that can be used to well-order the positive rationals.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h3 id=&#34;template-for-well-ordering-proofs-section-2-2&#34;&gt;Template for Well-Ordering Proofs (Section 2.2)&lt;/h3&gt;

&lt;p&gt;To prove that $P(n)$ is true for all $n \in \mathbb{N}$:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the set of counterexamples, $C ::= { n \in \mathbb{N} | NOT(P(n)) }$.&lt;/li&gt;
&lt;li&gt;Assume for contradiction that $C$ is ______________. &lt;!-- non-empty.--&gt;&lt;/li&gt;
&lt;li&gt;By the well-ordering principle, there must be __________________ &lt;!-- some smallest element--&gt;, $m \in C$.&lt;/li&gt;
&lt;li&gt;Reach a contradiction (this is the creative part!).  One way to reach a contradiction would be to show $P(m)$.  Another way is to show there must be an element $m&amp;rsquo; \in C$ where $m&amp;rsquo; &amp;lt; m$.&lt;/li&gt;
&lt;li&gt;Conclude that $C$ must be empty, hence there are no counter-examples and $P(n)$ always holds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Example: Betable Numbers.&lt;/strong&gt; A number is &lt;em&gt;betable&lt;/em&gt; if it can be
  produced using some combination of \$2 and \$5 chips.  Prove that all
  integer values greater than \$3 are betable.&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;
#
#
#

**Example: Division Property.** Given integer $a$ and positive integer $b$, there exist integers $q$ and $r$ such that:
      $a = qb + r$ and $0 \le r &lt; b$.

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;
#
#


_The whole problem with the world is that fools and fanatics are always so certain of themselves, and wiser people so full of doubts._ Bertrand Russell

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Office Hours Posted</title>
      <link>https://uvacs2102.github.io/officehoursposted/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/officehoursposted/</guid>
      <description>&lt;p&gt;The office hours schedule is now posted on the course site (&lt;a href=&#34;https://uvacs2102.github.io/officehours&#34;&gt;Office
Hours&lt;/a&gt;) and
&lt;a href=&#34;https://calendar.google.com/calendar/embed?src=5msg7a1mn7fk4ocj1h41cksh80%40group.calendar.google.com&amp;amp;ctz=America/New_York&#34;&gt;Calendar&lt;/a&gt;. The
schedule will likely be adjusted as the semester progresses. Office
hours start on Monday (3pm), and will follow the schedule here after
that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 2: Proof Methods</title>
      <link>https://uvacs2102.github.io/class2/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class2/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;Before &lt;strong&gt;Friday, 6:29pm&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Read, print, and sign the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;Course Pledge&lt;/a&gt;.  You should print
the &lt;a href=&#34;https://uvacs2102.github.io/docs/pledge.pdf&#34;&gt;PDF version&lt;/a&gt; for signing, and submit a scan of
your signed pledge as a PDF file using Collab.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read Jeremy Kun&amp;rsquo;s &lt;a href=&#34;https://medium.com/@jeremyjkun/habits-of-highly-mathematical-people-b719df12d15e&#34;&gt;&lt;em&gt;Habits of Highly Mathematical People&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Submit a &lt;a href=&#34;https://goo.gl/forms/DR7nsouNf6sqqIK22&#34;&gt;Course Registration Survey&lt;/a&gt; (which includes some questions based on Kun&amp;rsquo;s essay).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before Tuesday&amp;rsquo;s class: Read MCS Chapter 2&lt;/li&gt;
&lt;li&gt;Before Thursday&amp;rsquo;s class: Read MCS Chapter 3&lt;/li&gt;
&lt;li&gt;Due Friday at 6:29pm: &lt;a href=&#34;https://uvacs2102.github.io/ps/ps1&#34;&gt;&lt;strong&gt;Problem Set 1&lt;/strong&gt;&lt;/a&gt; (now posted)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class2.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;

&lt;p&gt;&lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;70680d1d66fe484a96bcb37e03677657&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&lt;br&gt;
&lt;a href=&#34;https://uva.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=7de9ca1e-3adc-4559-8a58-c10bcee9ec92&#34;&gt;&lt;b&gt;Video&lt;/b&gt;&lt;/a&gt; (requires collab authentication)
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;div class=&#34;latex&#34;&gt;

# Notes and Questions

**Contrapositive Inference Rule**  

$$
\infer{NOT(Q) \implies NOT(P)}{P \implies Q} 
\qquad
\infer{P \implies Q}{NOT(Q) \implies NOT(P)}
$$


**Theorem to Prove:** If the product of $x$ and $y$ is even, at least one of $x$ or $y$ must be even.

#

An integer, $z$, is **even** if there exists an integer $k$ such that $z = 2k$.  Is this a _definition_, _axiom_, or _proposition_?

##

An integer, $z$, is **odd** if there exists an integer $k$ such that $z
= 2k + 1$.  (Note that there is no connection between the variables used
here, and to define even above.)

To prove an implication, $P \implies Q$:  

   1. assume $P$.  

   2. Show chain of logical deductions that leads to $Q$.

&lt;!--page--&gt;

_Thinking implies disagreement; and disagreement implies nonconformity; and nonconformity implies heresy; and heresy implies disloyalty—so, obviously, thinking must be stopped._  
Adlai Stevenson, A Call to Greatness (1954)


**Odd-Even Lemma:** If an integer is not even, it is odd.  Note: A
  _lemma_ is just a name for a theorem, typically used for proving
  another theorem.

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;p&gt;How should one decide what can be accepted as an axiom, and what must be proven?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;What is the purpose of a &lt;em&gt;proof&lt;/em&gt;?  (in cs2102? in software development? in algorithm design?)&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;p&gt;Why do meaningful digital signatures require discrete mathematics?&lt;/p&gt;

&lt;div class=&#34;biggap&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;In physics, your solution should convince a reasonable person. In math, you have to convince a person who&amp;rsquo;s trying to make trouble.&lt;/em&gt;
Frank Wilczek&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>