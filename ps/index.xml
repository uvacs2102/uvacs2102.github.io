<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ps-rsses on cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/ps/index.xml</link>
    <description>Recent content in Ps-rsses on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/ps/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Problem Set 8</title>
      <link>https://uvacs2102.github.io/ps/ps8/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps8/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf
   Friday, 3 November}.}
   &lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on
   &lt;strong&gt;Friday, 3 November&lt;/strong&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-collaboration-policy-identical-to-ps5&#34;&gt;Collaboration Policy - Collaboration Policy (identical to PS5)&lt;/h3&gt;

&lt;p&gt;For this assignment, you may work in groups of one to three students
to write-up a solution together.  If you work with teammates, exactly
one of you should submit one assignment that represents your
collective best work with all of your names and UVA ids clearly marked
on it on it.  &lt;em&gt;Everyone on a team should understand everything you
turn in for the assignment well enough to be able to produce it
completely on your own.&lt;/em&gt; All teammates must review the submissions
before it is submitted to make sure you understand everything on it
and that your name and UVA id are clearly marked on it.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on infinite sets &amp;mdash; Chapter 8 of the MCS book,
and &lt;a href=&#34;https://uvacs2102.github.io/class17&#34;&gt;Class 17&lt;/a&gt;, &lt;a href=&#34;https://uvacs2102.github.io/class18&#34;&gt;Class 18&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps8.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all 8 problems.  Your answers should be clear, consise, and convincing.&lt;/p&gt;

&lt;h3 id=&#34;countable-sets&#34;&gt;Countable Sets&lt;/h3&gt;

&lt;p&gt;For each set defined below, prove that the set described is &lt;em&gt;countable&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$\text{\em Evens} = { 2n \, | \, n \in \mathbb{N} }$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\mathbb{N} \cup { \pi, \tau }$ (where $\pi$ is the ratio of a circle&amp;rsquo;s circumference to its diameter and $\tau$ is the ratio of a circle&amp;rsquo;s circumference to its radius)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set $X$ of all finite state machines, $M = (S, G, q_0)$ where $S = \mathbb{N}_k$
for &lt;em&gt;some&lt;/em&gt; natural number $k&amp;gt;0$, and $G \subseteq S \times S$ and $q_0 \in S$ are
otherwise unrestricted. (Note that here we are &lt;em&gt;not&lt;/em&gt; working with a fixed $k$, and for example machines with  $S = \mathbb{N}_2$ and machines with $S = \mathbb{N}_9$ are both counted in the set $X$).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;possibly-countable-sets&#34;&gt;Possibly Countable Sets&lt;/h3&gt;

&lt;p&gt;For each set defined below, determine if the set is &lt;em&gt;countable&lt;/em&gt; or
&lt;em&gt;uncountable&lt;/em&gt; and support your answer with a convincing proof.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The set of all &lt;em&gt;stree&lt;/em&gt; objects, defined by:
\begin{itemize}
\item Base object: $\text{\bf null}$ is an {\em stree}.
\item Constructor: for any {\em stree} objects $q_1, q_2$, $\text{combine}(q_1, q_2)$ is an {\em stree}.
\end{itemize}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\mathbb{R} - \mathbb{Q}$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of all &lt;em&gt;infinite&lt;/em&gt; state machines, $M = (S, G, q_0)$ where $S = \mathbb{N}$, and $G \subseteq S \times S$ and $q_0 \in S$ are
otherwise unrestricted.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;properties-of-infinite-sets&#34;&gt;Properties of Infinite Sets&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In class 17 we defined a set $C$ to be countable, if there is a surjective function $f: \mathbb{N} \rightarrow C$. Prove that we get an equivalent definition if we call $C$ countable whenever then there is a &lt;em&gt;total&lt;/em&gt; surjective function, $$f: \mathbb{N} \rightarrow C.$$
Note that you  need to prove &lt;em&gt;two&lt;/em&gt; directions, that whenever $C$ satisfies in the first definition of countable, it does satisfy in the second definition of countable, and vice versa.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCS Problem 8.23.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 7</title>
      <link>https://uvacs2102.github.io/ps/ps7/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps7/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf
   Friday, 27 Oct}.  
}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on
   &lt;strong&gt;Friday, 27 October&lt;/strong&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-identical-to-ps5&#34;&gt;Collaboration Policy (identical to PS5)&lt;/h3&gt;

&lt;p&gt;For this assignment, you may work in groups of one to three students
to write-up a solution together.  If you work with teammates, exactly
one of your should submit one assignment that represents your
collective best work with all of your names and UVA ids clearly marked
on it on it.  &lt;em&gt;Everyone on a team should understand everything you
turn in for the assignment well enough to be able to produce it
completely on your own.&lt;/em&gt; All teammates must review the submissions
before it is submitted to make sure you understand everything on it
and that your name and UVA id are clearly marked on it.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on recursive data types and structural
induction &amp;mdash; read Chapter 7 of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class15&#34;&gt;Class 15&lt;/a&gt;
and &lt;a href=&#34;https://uvacs2102.github.io/class16&#34;&gt;Class 16&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Problems 1&amp;ndash;8 are expected for everyone; solve as many as you can.  The
Programming with Procedures problems are optional (see the note before
them).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps7.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;tsilly-lists&#34;&gt;Tsilly Lists&lt;/h2&gt;

&lt;p&gt;Consider an alternate way of defining a list from the one we used in
Class 15 and 16, where instead of &lt;em&gt;prepend&lt;/em&gt;, lists are constructed using
&lt;em&gt;postpend&lt;/em&gt; (to avoid confusion, we call our postpended list a &lt;em&gt;tsil&lt;/em&gt;,
and reserve &lt;em&gt;list&lt;/em&gt; for the original prepended list):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;tsil&lt;/em&gt; is either the empty tsil ($\lambda$), or the result of
  $\text{postpend}(t, e)$ for some tsil $t$ and object $e$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define the meaning of the following operations (similarly to the
beginning of &lt;a href=&#34;https://uvacs2102.github.io/class16&#34;&gt;Class 16&lt;/a&gt;) for the tsil: $\text{last}: Tsil
\rightarrow Object$, $\text{frest}: Tsil \rightarrow Tsil$, and
$\text{empty}: Tsil \rightarrow Boolean$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Provide a constructive definition of &lt;em&gt;length&lt;/em&gt; for the tsil data type.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that there is an equivalent tsil for every list.  (Your answer
should include a clear definition of what &lt;em&gt;equivalent&lt;/em&gt; means.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;structural-induction-on-trees&#34;&gt;Structural Induction on Trees&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/class16&#34;&gt;Class 16&lt;/a&gt;, we defined a recursive data type, lists, that
only relied on &lt;em&gt;one&lt;/em&gt; (smaller) list in its recursive definition.  Here
we give a recursive definition for the data type of \emph{binary}
trees. In a binary tree, each node can have 0,1,or 2 children, and
each node has a label of its own that (in this case) is always a
natural number.&lt;/p&gt;

&lt;p&gt;The main two operators corresponding to the base and the construct cases are are:&lt;/p&gt;

&lt;p&gt;\begin{equation&lt;em&gt;}
\begin{split}
\qquad &amp;amp; \text{\bf null}: \text{\em Tree} &lt;br /&gt;
       &amp;amp; \text{node}: \text{\em Tree} \times \mathbb{N} \times \text{\em Tree} \rightarrow \text{\em Tree}
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;We also define the following operations on binary trees.&lt;/p&gt;

&lt;p&gt;The meaning of the operations is defined for all trees $t_1, t_2$, and all $n \in \mathbb{N}$, by:
\begin{equation&lt;em&gt;}
\begin{split}
\text{label}: \text{\em Tree} \rightarrow \mathbb{N} \colon \qquad &amp;amp; \text{label}(\text{node}(t_1, n, t_2)) \rightarrow n &lt;br /&gt;
\text{left}: \text{\em Tree} \rightarrow \text{\em Tree} \colon  \qquad &amp;amp; \text{left}(\text{node}(t_1, n, t_2)) \rightarrow t_1 &lt;br /&gt;
\text{right}: \text{\em Tree} \rightarrow \text{\em Tree} \colon \qquad &amp;amp; \text{right}(\text{node}(t_1, n, t_2)) \rightarrow t_2 &lt;br /&gt;
\text{empty}: \text{\em Tree} \rightarrow { \T, \F } \colon  \qquad &amp;amp; \text{empty}(\text{\bf null}) \rightarrow \T &lt;br /&gt;
\qquad &amp;amp; \text{empty}(\text{node}(t_1, n, t_2) \rightarrow \F &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;height&lt;/em&gt; of a tree is the &lt;em&gt;maximum&lt;/em&gt; distance (number of edges) from
its root (the one node that has no parent node) to a leaf. For example the hight of the tree at the bottom of this page is 2. Provide a
&lt;em&gt;constructive&lt;/em&gt; definition of &lt;em&gt;height&lt;/em&gt; for our binary tree type.  (Hint:
the height of $\text{node}(\text{\bf null}, n, \text{\bf null})$ is
$0$.  The height of $\text{\bf null}$ should also be $0$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that the maximum number of nodes in a binary tree of height $h$
is $2^{h + 1} - 1$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The in-order traversal of a binary tree is a list of the node labels in
the order they appear from left-to-right across the tree.  For example,
the in-order traversal of the tree shown below would be the list $(4, 8,
9, 13, 22, 27)$.&lt;/p&gt;

&lt;p&gt;\begin{center}
\includegraphics[scale=0.7]{./content/docs/binarytree.pdf}
\end{center}&lt;/p&gt;

&lt;p&gt;We can define $\text{traverse}$ to produce a (prepend) list as follows (note the $+$ operation here is list concatenation, as defined in &lt;a href=&#34;https://uvacs2102.github.io/class16&#34;&gt;Class 16&lt;/a&gt;) :
\begin{equation&lt;em&gt;}
\begin{split}
&amp;amp; \text{traverse}(\text{\bf null}) = \text{\bf null} &lt;br /&gt;
&amp;amp; \text{traverse}(\text{node}(t_1, n, t_2)) = \text{traverse}(t_1) + \text{prepend}(n, \text{traverse}(t_2)) &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prove that for all trees $t$ with $n$ nodes, the result of
$\text{traverse(t)}$ is a list of length $n$.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ordered-binary-trees&#34;&gt;Ordered Binary Trees&lt;/h2&gt;

&lt;p&gt;Here we would like to  define an $\text{\em OrderedBinaryTree}$ as a data type where for each node  with label $n$, all of the children in the left sub-tree have labels &lt;em&gt;smaller&lt;/em&gt; than $n$, and all the children in the right sub-tree have labels &lt;em&gt;larger&lt;/em&gt; than $n$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Base case:&lt;/strong&gt; $\text{\bf null} \in \text{\em OrderedBinaryTree}$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constructor case:&lt;/strong&gt; if $t_1, t_2 \in \text{\em OrderedBinaryTree}$
and $n \in \mathbb{N}$, and $(\text{empty}(t_1) \vee \text{maximum}(t_1) &amp;lt; n)$ and
$(\text{empty}(t_1) \vee \text{minimum}(t_2) &amp;gt; n)$, then $\text{node}(t_1, n, t_2) \in \text{\em OrderedBinaryTree}$.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may assume all the other tree operations (including
$\text{traverse}$ from question 5) are defined for \text{\em
OrderedBinaryTree} s also.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define the $\text{minimum}: \text{\em OrderedBinaryTree} \rightarrow
\mathbb{N}$ and $\text{maximum}: \text{\em OrderedBinaryTree}
\rightarrow \mathbb{N}$ operations used in the definition of $\text{\em
OrderedBinaryTree}$ above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) Prove that $\forall t \in \text{\em OrderedBinaryTree}
\ldotp \text{traverse}(t)$ is an ordered list.  (A list, $p = (p_1, p_2,
\cdots, p_n)$ is an ordered list if $\forall i \in { 1, \cdots, n-1 }
\ldotp p&lt;em&gt;i &amp;lt; p&lt;/em&gt;{i + 1}$.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;programming-with-procedures&#34;&gt;Programming with Procedures&lt;/h2&gt;

&lt;p&gt;\dbox{These problems are {\em optional}, and provided to give students
who are interested some experience with functional programming which
will make you a more powerful, snazzy, and prolific programmer.  You
do not need to do them to earn &amp;ldquo;gold star&amp;rdquo; level credit on this
assignment, and nothing on the exams will depend on them.  You will
receive &amp;ldquo;bonus&amp;rdquo; credit on this assignment for turning in good answers
to these questions.}&lt;/p&gt;

&lt;p&gt;These questions assume you have some experience programming in Python,
but are sadly lacking in previous experience using procedures as
parameters and results and realize that you cannot be a true kunoichi
programmer without becoming adept with programming with procedures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download:&lt;/strong&gt; &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt; (if the link in the PDF file doesn&amp;rsquo;t work, use &lt;em&gt;&lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;https://uvacs2102.github.io/docs/pairs.py&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt;, we defined &lt;code&gt;make_pair&lt;/code&gt; and various
procedures for building and using lists.  You should download this code,
run it in your favorite Python3 environment, and make sure you
understand it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;list_tostring(lst)&lt;/code&gt; that takes a list (constructed
using the &lt;code&gt;list_append&lt;/code&gt; function from &lt;code&gt;pairs.py&lt;/code&gt;) as its input and
returns a string representation of that list.  For example,
&lt;code&gt;list_tostring(list_prepend(1, list_prepend(2, list_prepend(3, None))))&lt;/code&gt;
should print out &lt;code&gt;[1, 2, 3]&lt;/code&gt;.  (You can use &lt;code&gt;str(x)&lt;/code&gt; to turn any Python
object &lt;code&gt;x&lt;/code&gt; into a string.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;list_map(fn, lst)&lt;/code&gt; that takes as inputs a
function and a list, and returns a list that is the result of applying
the input function to each element of &lt;code&gt;lst&lt;/code&gt;.  For example,
&lt;code&gt;list_map(lambda x: x + 1, list123)&lt;/code&gt;
should return the list &lt;code&gt;[2, 3, 4]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;list_accumulate(fn, lst, base)&lt;/code&gt; that takes as
inputs a function, a list, and a base value, and returns the result of
applying the function through the list.  For example,
&lt;code&gt;list_accumulate(lambda a, b: a + b, lst, 0)&lt;/code&gt;
should return the sum of all the elements in the list, and
&lt;code&gt;list_accumulate(lambda a, b: a * b, lst, 1)&lt;/code&gt;
should return their product, and &lt;code&gt;list_accumulate(lambda a, b: b + 1, lst, 0)&lt;/code&gt;
should return the length of the list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define &lt;code&gt;list_map&lt;/code&gt; (as in problem 10) using &lt;code&gt;list_accumulate&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6</title>
      <link>https://uvacs2102.github.io/ps/ps6/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps6/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 20 October}.  
The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX).}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 20
October&lt;/strong&gt;. The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;As with PS5, you should work in groups of one to three students to
write-up a solution together. The rest of the collaboration policy is
identical to what it was on &lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;PS5&lt;/a&gt;, and is not repeated here.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Sections 6.1-6.3 of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class13&#34;&gt;Class
13&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class14&#34;&gt;Class 14&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps6.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.
Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating
PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the 8 problems as you can.  For maximum credit, your
answers should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;p&gt;Problems marked with $(\star)$ are challenging enough that it is not
necessary to solve them well to get a ``gold-star level&amp;rdquo; grade on this
assignment (although we certainly hope you will try and some will
succeed!)&lt;/p&gt;

&lt;h1 id=&#34;state-machines&#34;&gt;State Machines&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Describe a state machine that can be used to determine if the number
of steps is divisible by 3.  You should clearly define the set of states
in your machine, and how each is interpreted, and the transition
relation.  (Don&amp;rsquo;t forget to also specify $q_0$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Describe the set of states that are &lt;em&gt;reachable&lt;/em&gt; for the ``Progress&amp;rdquo;
Machine defined as $M = (S, G, q_0)$:&lt;/p&gt;

&lt;p&gt;$S = { (x, d) \, | \, x \in \mathbb{Z}, d \in { \mathrm{\bf F}, \mathrm{\bf B}} }$&lt;br /&gt;
$G = { (x, \mathrm{\bf F}) \rightarrow (x + 1, \mathrm{\bf B}) \, | \, x \in \mathbb{Z} } \cup
 { (x, \mathrm{\bf B}) \rightarrow (x - 2, \mathrm{\bf F}) \, | \, x \in \mathbb{Z} }$&lt;br /&gt;
$q_0 = (0, \mathrm{\bf F})$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$M = (S, G \subseteq S \times S, q_0 \in S)$ is a state machine where
the cardinality of $S$ is finite, and transition relation, $G$, is a
total injective function.  Show that it is possible for some states in
$S$ to be unreachable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--page--&gt;

&lt;h1 id=&#34;knight-s-moves&#34;&gt;Knight&amp;rsquo;s Moves&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;($\star$) A &lt;em&gt;knight&lt;/em&gt; in chess can move two squares up, down, left, or right, followed by one square in a direction perpendicular to the two squares (so, it can move two squares up or down, followed by one square left or right; or, can move two squares left or right, followed by one square up or down).  We can define the possible moves of a knight on an infinite chess board as the Knight State Machine (similarly to how we defined the Bishop State Machine in &lt;a href=&#34;https://uvacs2102.github.io/class14&#34;&gt;Class 14&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;$S = { (r, c) \, | \, r, c \in \mathbb{N} }$
$G = { (r, c) \rightarrow (r&amp;rsquo;, c&amp;rsquo;) \, | \, r, c \in \mathbb{N} \wedge
((r&amp;rsquo; = r \pm 2 \wedge c&amp;rsquo; = c \pm 1) \vee (r&amp;rsquo; = r \pm 1 \wedge c&amp;rsquo; = c \pm 2)) \wedge r&amp;rsquo; \ge 0 \wedge c&amp;rsquo; \ge 0 }$
$q_0 = (0, 0)$&lt;/p&gt;

&lt;p&gt;Prove that all states in $S$ are reachable for the Knight State Machine.
(Hint: use induction, but be careful to either set up an appropriate
$P(n)$ or break the proof into two separate induction proofs to show you
can reach any column and can reach any rwo.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;invariant-principle&#34;&gt;Invariant Principle&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MCS Problem 6.3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the principle of induction to prove the invariant principle.
(Hint: your induction predicate, $P(n)$ should use $n$ as the number of
steps.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCS Problem 6.11. Parts  (b) and &amp;copy; are considered ($\star$)-ed parts. For part (a) you can only list the items that are preserved invariants, but for part (b) and &amp;copy;
your answers should contain full proofs for any claims or answers (even for part (b) where the wording of the problem in the book asks for only a number).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is also some typos in how the part (a) is listd. The actual (simpler-to-solve) peroperties are as follows. $rem(a,b)$ is the remainder of dividing $a$ by $b$ and is the same as $a \mod b$.&lt;/p&gt;

&lt;p&gt;(6.5) $rem(n_b+n_w, 3) \neq 2$&lt;/p&gt;

&lt;p&gt;(6.6) $rem(n_w-n_b, 3) = 2$&lt;/p&gt;

&lt;p&gt;(6.7) $rem(n_b-n_w, 3) = 2$&lt;/p&gt;

&lt;p&gt;(6.8) $n_b + n_w &amp;gt; 5$&lt;/p&gt;

&lt;p&gt;(6.9) $n_b + n_w &amp;lt; 5$&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;($\star$) Prove the Python program below is a correct implementation of the
factorial function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def factorial(n):
    x = 1 # poor choices of variable names for programmers
    y = 1 
    while x &amp;lt;= n:
        y = y * x
        x = x + 1
    return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be &lt;em&gt;correct&lt;/em&gt;, for any input $n \in \mathbb{N}$, the program should
always return a result equal to $n!$.  The factorial of $n$ is defined
as the product of all positive integers up to and including $n$.  (Note
that $0! = 1$.)&lt;/p&gt;

&lt;p&gt;A good answer will explain (1) how to map the program to a state machine, (2) come up with a preserved invariant property that (2.a) holds at the beginning and (2.b) if it holds at the termination, it implies the right answer is produced. A perfect answer also shall argue why the program terminates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 5</title>
      <link>https://uvacs2102.github.io/ps/ps5/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps5/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29:00pm} on {\bf Friday, 29
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 29
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully-different-from-ps4&#34;&gt;Collaboration Policy (Read Carefully - different from PS4)&lt;/h3&gt;

&lt;p&gt;Unlike previous assignments, for this assignment, you may work in
groups of one to three students to write-up a solution together.  If
you work with teammates, exactly one of your should submit one
assignment that represents your collective best work with all of your
names and UVA ids clearly marked on it on it.  &lt;em&gt;Everyone on a team
should understand everything you turn in for the assignment well
enough to be able to produce it completely on your own.&lt;/em&gt; All teammates
must review the submissions before it is submitted to make sure you
understand everything on it and that your name and UVA id are clearly
marked on it. If you would like to find teammates for this assignment,
you may use the &lt;code&gt;#teaming&lt;/code&gt; channel on slack.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 4, including Section 4.5
(Cadrinality of Finite Sets) and Chapter 5 (Induction) of the MCS
book, and &lt;a href=&#34;https://uvacs2102.github.io/class9&#34;&gt;Class 9&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class10&#34;&gt;Class 10&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps5.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.
Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating
PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the nine problems as you can.  For maximum credit,
your answers should be correct, clear, well-written, and
convincing. The problem (4) marked with $(\star)$ is more challenging
than others, and so it is not necessary to solve it fully to get a
``green-star level&amp;rdquo; grade on this assignment (although we certainly
hope you will try and some will succeed!)&lt;/p&gt;

&lt;h1 id=&#34;properties-of-functions-and-relations&#34;&gt;Properties of functions and relations&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In last week&amp;rsquo;s problem set we considered the relation, $\le$, with
the domain set, $\mathbb{N}$ and codomain set $\mathbb{N}$. Which of
these properties does the relation have: function, total, injective,
surjective, bijective? (You do not need to provide a detailed proof,
but should support your answer with a very brief explanation.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As we saw in class, five basic properties of binary relations $R :
A \rightarrow B$ are:
\begin{quote}
\begin{enumerate}[(1)]
\item $R$ is a surjection [$\ge 1$ in]
\item $R$ is an injection [$\le 1$ in]
\item $R$ is a function [$\le 1$ out]
\item $R$ is total [$\ge 1$ out]
\item $R$ is empty [$= 0$ out]
\end{enumerate}
\end{quote}&lt;/p&gt;

&lt;p&gt;Below are some assertions about a relation $R$. For each assertion,
write the numbers (1, 2, 3, 4, 5 from above) of all properties above
that the relation $R$ &lt;em&gt;must&lt;/em&gt; have (that is, the properties that are
implied by the stated assertion); write ``none&amp;rdquo; if $R$ might not have
any of these properties.&lt;/p&gt;

&lt;p&gt;Variables $a, a_1, a_2, \cdots$ are elements of $A$, and $b, b_1, b_2,
\cdots$ are elements of $B$.&lt;/p&gt;

&lt;p&gt;The first answer is provided as an example.
\begin{quote}
\begin{enumerate}[a.]
\item $\forall a \ldotp \forall b \ldotp a R b.$ \qquad\qquad Answer: (1), (4)
\item $\neg(\forall a \ldotp \forall b \ldotp a R b).$
\item $\forall a \ldotp \exists b \ldotp a R b.$
\item $\forall b \ldotp \exists a \ldotp a R b.$
\item $R$ is a bijection.
\item $\forall a_1, a_2, b \ldotp (a_1 R b \wedge a_2 R b) \implies a_1 = a_2.$
\item $\forall a_1, a_2, b_1, b_2 \ldotp (a_1 R b_1 \wedge a_2 R b_2 \wedge b_1 \neq b_2) \implies a_1 \neq a_2.$
\end{enumerate}
\end{quote}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(Problem 4.34 from the LCN book.)  Let $R \colon A \to B$ and $S \colon B \to C$ be binary relations such that $S \circ R$ is a bijection
and $|A|=2$.
Give an example of such $R, S$ where neither R nor S is a function. Indicate exactly which properties (of total, surjection, function, and injection) your examples
of $R$ and $S$ have.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) Consider the sets $A$ and $B$ where $|A| = n$ and $|B| =
m$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{quote}
\begin{enumerate}[a.]&lt;/p&gt;

&lt;p&gt;\item Assuming $n = m$ (just for this sub-part), how many {\em bijective} relations are there $R: A \rightarrow B$.&lt;/p&gt;

&lt;p&gt;\item How many {\em partial} functions are there $f: A \rightarrow B$.  (Note
that the set of {\em partial} functions includes all {\em total} functions;
partial means there {\em may} be domain elements with no associated codomain
element.)&lt;/p&gt;

&lt;p&gt;\item How many {\em injective} relations are there $R: A \rightarrow B$. (Hint: try to relate it to previous part.)
\end{enumerate}
\end{quote}&lt;/p&gt;

&lt;h1 id=&#34;cardinality-of-finite-sets&#34;&gt;Cardinality of Finite Sets&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Assume $R: A \rightarrow B$ is an &lt;em&gt;total&lt;/em&gt; &lt;em&gt;injective&lt;/em&gt; relation
between $A$ and $B$.  What must be true about the relationship between
$|A|$ and $|B|$?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assume $R: A \rightarrow B$ is an &lt;em&gt;total&lt;/em&gt; &lt;em&gt;surjective&lt;/em&gt; &lt;em&gt;function&lt;/em&gt;
between $A$ and $B$.  What must be true about the relationship between
$|A|$ and $|B|$?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;induction&#34;&gt;Induction&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;Problem Set 2&lt;/a&gt; (Problem 6) you used the well-ordering
principle to prove that any non-negative integer value less than
$2^{k+1}$ can be written as $a_0 \cdot 2^0 + a_1 \cdot 2^1 + a_2 \cdot
2^2 + \cdots + a_k \cdot 2^k$ where all the $a_i$ values are either 0 or 1.  Prove the same property using induction.  (Hint: the induction
should be on $k$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove by induction that every non-empty finite set of rational
numbers has a minimum element.  (Bonus: explain why this does not
contradict the fact that the rational numbers are not well ordered.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A &lt;em&gt;convex polygon&lt;/em&gt; is a polygon where all line segments connecting
any two points in the polygon are fully contained in the polygon.  For
example, of the three polygons below, the left two are convex, but the
rightmost one is not.  Prove by induction that any convex polygon with
$n$ sides can be divided into $n - 2$ triangles.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{center}
\newdimen\R
\R=0.8cm
\begin{tikzpicture}[scale=1.0]
\node[draw, regular polygon, regular polygon sides=5] at (0,0) {Convex};
\node[draw, regular polygon, regular polygon sides=7] at (4.5,0) {Convex};
\node[draw, star, star points=6, star point ratio=.6]
at (9,0) {non-convex};&lt;/p&gt;

&lt;p&gt;\end{tikzpicture}
\end{center}
\begin{comment}
\draw (1,0) &amp;ndash; (0,2) &amp;ndash; (3,3) &amp;ndash; (4,2.5) &amp;ndash; (2.5, -1) &amp;ndash; cycle;
\draw (1,0) &amp;ndash; (0,2) &amp;ndash; (2,3) &amp;ndash; (4,2.5) &amp;ndash; (2, 1.5) &amp;ndash; (4, 1) &amp;ndash; cycle;
\end{comment}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 4</title>
      <link>https://uvacs2102.github.io/ps/ps4/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps4/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29:00pm} on {\bf Friday, 22
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 22
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;The collaboration policy is identical to what it was on previous
assignments (for example see &lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;), so is not included
here. The only change is that except instead of learning something
interesting about anyone you work with&amp;rsquo;s home town, this time you
should learn about the first music that was important to them.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on the parts of Chapter 4 of the MCS book
that we covered in &lt;a href=&#34;https://uvacs2102.github.io/class7&#34;&gt;Class 7&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class8&#34;&gt;Class 8&lt;/a&gt;. So it
will be 4.1 and 4.2 and parts of 4.3 and 4.4. On Tuesday, we will
discuss other material covered in this chapter.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps4.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the problems as you can.
For maximum credit, your
answers should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;h1 id=&#34;sets&#34;&gt;Sets&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;For each set $S$ defined below, indicate whether or not it is
&lt;em&gt;always&lt;/em&gt; equal to $A$, where $A$ and $B$ are arbitrary sets.  Support your answer
with a brief explanation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{quote}
\begin{enumerate}[a.]
\item $S ::= A \cup \emptyset$.
\item $S ::= { x \mid x \in A \wedge x \in \overline{B} }$
\item $S ::= { x \mid x \in A \wedge x \notin \overline{A} }$
\item $S ::= A \cap (B \cup A)$.
\item $S ::= A - (B \cap \overline{B})$.
\end{enumerate}
\end{quote}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use the definitions of the set operations to prove that for all sets
$A$ and $B$, $$A = (A \cap B) \cup (A - B).$$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/class7&#34;&gt;Class 7&lt;/a&gt;, we defined set difference as:
$$\forall x. x \in A - B \iff x \in A \wedge x \notin B.$$
Provide an alternate (but equivalent in meaning) definition of set
difference using only the other defined set operations (you may use any
of the union ($\cup$), intersection ($\cap$), and complement
($\overline{S}$) operations in your definition, but no other operations
or qualifiers).  A good answer will include a proof that shows your
definition is equivalent to the original set difference definition.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suppose $A,B$ are two finite sets.
\begin{enumerate}[a.]
\item What is the smallest set $U$ that \emph{could} be a universe with respect to both sets $A,B$?
\item What is $\overline{A}$ with respect to the universe defiuned in part (a)?
\end{enumerate}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In class 7, we saw a version of De Morgan&amp;rsquo;s law for sets. In Problem 4.5 of MCS book you are asked to prove this formally. Namely, give a formal proof that
$$ \overline{A \cup B} = \overline{A} \cap \overline{B} $$
for any sets $A,B$ and a universe $U$ where $A \subseteq U$ and $B  \subseteq U$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;functions-and-relations&#34;&gt;Functions and Relations&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;For each expression below, identify a &lt;em&gt;domain&lt;/em&gt; and &lt;em&gt;codomain&lt;/em&gt; that
make $f$ a &lt;em&gt;total function&lt;/em&gt;.\footnote{This is updated from the
original version of PS4, where the question used &lt;code&gt;function&#39;&#39; but we
intended to mean&lt;/code&gt;total function&amp;rdquo;. If you answered the original
question already, you do not need to update your answer, just indicate
clearly for which questions the function you defined is partial.}  For
example, for $f(x) ::= 1/x$ you could correctly answer that a possible
domain is $\mathbb{R} - { 0 }$ for which a possible codomain is
$\mathbb{R}$. But the domain, in this case, could not be $\mathbb{R}$
(because $1/0$ is not defined) and also for domain $\mathbb{R} - { 0
}$ the codomain could not be the rationals $\mathbb{Q}$ (because
$1/\sqrt{2}$ is not a rational).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{quote}
\begin{enumerate}[a.]
\item $f(x) ::= x + 1$&lt;/p&gt;

&lt;p&gt;\item $f(x) ::= \frac{x}{(x - 1)}$&lt;/p&gt;

&lt;p&gt;\item $f(S) ::= \textrm{ minimum}&lt;em&gt;{&amp;lt;}(S \cap \mathbb{N})$ where $\textrm{ minimum}&lt;/em&gt;{&amp;lt;}$ is defined for all sets $A$ that are well-ordered by $&amp;lt;$ as:
$$
\textrm{minimum}_{&amp;lt;}(A) = x \in A \textrm{ such that } \forall a \in A - { x } \ldotp x &amp;lt; a.
$$
and $&amp;lt;$ is a binary relation on the real numbers.
\end{enumerate}
\end{quote}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Consider the relation $R$, defined by comparison $&amp;lt;$, with the domain set, ${ 1,
2, 3 }$ and codomain set, ${ 0, 1, 2 }$. Namely, $(a,b) \in R$ iff $(a&amp;lt;b)$.&lt;/p&gt;

&lt;p&gt;\begin{enumerate}[a.]
\item Describe the graph of the relation.  Your description can be a
picture showing the graph, or some other clear way of defining that
graph.
\item Recall that $R$ is a set. If we let the cartesian product of the domain and codomain be the universe. What is the graph of $\overline{R}$, and what is the meaning of this relation?
\end{enumerate}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Consider the relation, $\le$, with the domain set, $\mathbb{N}$ and
codomain set $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;\begin{enumerate}[a.]
\item Describe the graph of the relation.  (For this one, you won&amp;rsquo;t be able
to draw a complete picture since the domain set is infinite.  Instead,
your description can be a picture illustrating the graph in a clear way,
or some other clear way of defining that graph.)
\item Is the relation of part (a) a function? why?
\end{enumerate}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In each case below, describe the number of elements in the cartesian product of $A$ and $B$ (i.e., $A \times B$). Explain your answers briefly.&lt;/p&gt;

&lt;p&gt;\begin{enumerate}[a.]
\item $A = \emptyset$ and $B = {\emptyset}$.
\item $A = \emptyset$ and $B = \mathbb{N} = {0,1,2,\dots }$.
\item $A =  {\emptyset}$ and $B = \mathbb{N} = {0,1,2,\dots }$.
\end{enumerate}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suppose $A,B$ are two Boolean variables, and let $OP$ be a two-input Boolean operator. In class 8 we saw that $OP$ can be seen as a function from ${T,F} \times {T,F}$ to ${T,F}$. Show that there is another way to define Boolean operators using Binary relations. Namely, show an equivalence between Boolean operators (with two inputs) and relations between ${T,F}$ and ${T,F}$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 3</title>
      <link>https://uvacs2102.github.io/ps/ps3/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps3/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29:00pm} on {\bf Friday, 15
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 15
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;The collaboration policy is identical to what it was on previous
assignments (for example see &lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;PS2&lt;/a&gt;), so is not included
here. The only change is that except instead of learning something
interesting about anyone you work with&amp;rsquo;s favorite book, for this
problem set you should learn something surprising about their home
town.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 3 (especially 3.4-3.6) of the MCS
book, and &lt;a href=&#34;https://uvacs2102.github.io/class5&#34;&gt;Class 5&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class6&#34;&gt;Class 6&lt;/a&gt; (which include
some material not in Chapter 3).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps3.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file &lt;a href=&#34;https://collab.its.virginia.edu/portal/site/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/tool/db29109f-5ace-4dcc-8e11-ded9d5adc92b?panel=Main&#34;&gt;using collab&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;For maximum credit, your answers should be correct, clear, tasteful,
well-written, and convincing.  The problem (11) marked with $(\star)$
is challenging enough that it is not necessary to solve it well to get
a ``green-star level&amp;rdquo; grade on this assignment (although we certainly
hope you will try and some will succeed!)&lt;/p&gt;

&lt;h1 id=&#34;quantified-formulas&#34;&gt;Quantified Formulas&lt;/h1&gt;

&lt;p&gt;State if the the given (quantified) propositions are &lt;em&gt;true&lt;/em&gt; or
&lt;em&gt;false&lt;/em&gt;.  You should provide a brief argument supporting your answer
(enough to convince a skeptical reader that your answer is correct and
not just a guess!). Below, $\mathbb{N}$ represents the non-negative
integers = ${0, 1, 2, \cdots }$.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$\forall x \in \mathbb{N} \ldotp \exists y \in \mathbb{N} \ldotp x = y + 1.$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\forall x \in \mathbb{N}\ldotp \exists y \in \mathbb{N}\ldotp \exists b \in {0, 1}\ldotp x = 2y + b$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\forall F \in \textrm{CNF}\ldotp \exists G \in \textrm{DNF}\ldotp F \equiv G.$ The notation $F \equiv G$ denotes that $F$ and $G$ are logically equivalent. Also, CNF is the set of all CNF formulas and DNF is the set of all DNF formulas.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;negating-quantified-formulas&#34;&gt;Negating Quantified Formulas&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Write the negation of the quantified formula of problem 1:
$$\forall x \in \mathbb{N} \ldotp \exists y \in \mathbb{N} \ldotp x =
y + 1.$$ (Note that if the original proposition was true, you now get
a false one, and vice versa.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conjunctive-normal-form&#34;&gt;Conjunctive Normal Form&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a logical formula in Conjuctive Normal Form that is equivalent to:
$$(A \vee B) \implies C$$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a logical formula  in 3CNF form that is equivalent to:
$$
A \vee \overline{B} \vee C \vee (\overline{D} \wedge E)$$
Use as few clauses as possible.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A circuit can be converted to a SAT formula by assigning a variable
label to each wire in the circuit, and using clauses to constrain the
variable values according to the circuit&amp;rsquo;s logic.  Consider a single
\smallcaps{AND} gate circuit shown below with inputs labeled $a_1$ and
$a_2$ and output labeled $x_1$. Logically, this means $x_1 = a_1
\wedge a_2$ (but we can&amp;rsquo;t have an equality constraint like this in a
SAT formula).  Write a 3CNF formula that represents the AND gate shown
below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{center}
\begin{circuitikz} \draw
(0,2) node&lt;a href=&#34;myand&#34;&gt;and port&lt;/a&gt; {}
(myand.in 1) node&lt;a href=&#34;a&#34;&gt;above left=.5cm&lt;/a&gt; {$a_1$}
(myand.in 2) node&lt;a href=&#34;b&#34;&gt;below left = .5cm&lt;/a&gt; {$a_2$}
(myand.out) node&lt;a href=&#34;c&#34;&gt;right = .1cm&lt;/a&gt; {$x_1$}
(a) -| (myand.in 1)
(b) -| (myand.in 2);
\end{circuitikz}
\end{center}&lt;/p&gt;

&lt;h2 id=&#34;logical-equivalences&#34;&gt;Logical Equivalences&lt;/h2&gt;

&lt;p&gt;Determine if the following statements are logically equivalent, and
support your answer with a clear, convincing, and concise proof.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$Q \implies (P \implies R) \qquad \textrm{and} \qquad \neg P \vee \neg Q \vee R$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$Q \implies (P \implies R) \qquad \textrm{and} \qquad (Q \implies P) \implies R$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;satisfaction&#34;&gt;Satisfaction&lt;/h2&gt;

&lt;p&gt;The length of the 3CNF formula is the number of clauses, and no clause
may be repeated.  (The order of literals within a clause doesn&amp;rsquo;t matter,
so the clauses $(x_1 \vee x_2 \vee x_3)$ and $(x_3 \vee x_1 \vee x_2)$
would count as the same clauses, but $(x_1 \vee x_2 \vee x_3)$ and
$(\overline{x_1} \vee x_2 \vee x_3$ are different clauses.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is the length of the &lt;em&gt;shortest&lt;/em&gt; unsatisfiable 3CNF formula
involving 3 variables?  (That is, each clause involves $x_1$, $x_2$, and
$x_3$, and your goal is to show that there exists an unsatisfiable
formula of length $l$, and any formula of length $&amp;lt; l$ is satisfiable.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) What is the &lt;em&gt;maximum&lt;/em&gt; number of clauses in any satisfiable 3CNF
formula using $v$ variables?  An outstanding answer would include a
convincing proof (hint: well-ordering principle!) that there exists a
satisfiable formula with $v$ variables of $l$ clauses, but no satisfiable
formula with $v$ variables and $l + 1$ clauses exist.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 2</title>
      <link>https://uvacs2102.github.io/ps/ps2/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps2/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 8
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightrl&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 8
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-similar-to-problem-set-1&#34;&gt;Collaboration Policy (similar to Problem Set 1)&lt;/h3&gt;

&lt;p&gt;Remember to follow the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;course pledge&lt;/a&gt; you read and signed at
the beginning of the semester.  For this assignment, you may discuss
the problems and work on solutions with anyone you want (including
other students in this class), but you must write your own solutions
and understand and be able to explain all work you submit on your
own. To confirm your own understanding, after discussing the problems
with others, you should attempt to write your solutions on your own
without consulting any notes from group work sessions. If you get
stuck, you may visit notes from the group work sessions, but should
make sure you understand things well enough to produce it on your own.
You may also use any external resources you want, with the exception
of solutions and comments from last year&amp;rsquo;s offering of this
course. Since the staff and students benefit from being able to both
reuse problems from previous years, and from being able to provide
detailed solutions to students, it is important that students do not
abuse these materials even if it is easy to find them. &lt;strong&gt;Using
solutions from last year&amp;rsquo;s course would be detrimental to your
learning in this course, and is considered an honor violation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use resources other than the class materials, lectures and
course staff, you should document this and mention it clearly on your
submission.  For everyone other than the course staff you work with,
you should credit them clearly on your assignment, and should find out
something interesting about their favorite book (you shouldn&amp;rsquo;t
include this in your submission, though, especially if they share
something private with you).&lt;/p&gt;

&lt;p&gt;You are &lt;b&gt;strongly encouraged&lt;/b&gt; to start early and take advantage of
the scheduled &lt;a href=&#34;https://uvacs2102.github.io/officehours&#34;&gt;office hours&lt;/a&gt; for this course.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 2 and Chapter 3 (through 3.4) of the
MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class3&#34;&gt;Class 3&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class4&#34;&gt;Class 4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps2.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be &lt;a href=&#34;https://collab.its.virginia.edu/portal/site/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/tool/db29109f-5ace-4dcc-8e11-ded9d5adc92b?panel=Main&#34;&gt;submitted as a single PDF file using collab&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all 10 problems that follow.  For full credit, your
answers should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;p&gt;(Updated: 4 Sept 2017 - reworded question 2 to avoid use of $\prec$.)&lt;/p&gt;

&lt;h2 id=&#34;un-well-ordered-sets&#34;&gt;(Un)Well-Ordered Sets&lt;/h2&gt;

&lt;p&gt;For each of these question, answer if the given set is
&lt;em&gt;well-ordered&lt;/em&gt; with respect to the given specific comparator. Support your answer with a brief, but clear and
convincing, argument.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The empty set; $&amp;lt;$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of integers less than 2102, and the comparator is $&amp;gt;$ (namely, $a$ is ordered before $b$ if and only if $a &amp;gt; b$).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of positive rational numbers with lowest terms,
$\frac{p}{q}$ where $q &amp;lt; 2102$, under the order imposed by $&amp;lt;$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of positive rational numbers; to compare two rational
numbers, $a$, $b$, write them as fractions in lowest terms (which we
know exist because of the well-ordering principle on the integers!), $a
= \frac{p}{q}$, $b = \frac{r}{s}$. Then, we announce $a \prec b$ if and only if $2^p 8^q &amp;lt; 2^r 8^s$. (Hint: does this even define an ordering?)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;well-ordering-principle-proofs-and-non-proofs&#34;&gt;Well-Ordering Principle Proofs (and Non-Proofs)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MCS Problem 2.2 (explain clearly which proof step is invalid and why).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(Similar to Problem 2.6) The &amp;ldquo;Exponential Losses&amp;rdquo; Casino has
chips with value \$1, \$2, \$4, \$8, \$16, \ldots, \$2$^{k}$, but has a
rule that bettors may not use more than one of the same value of chip to
make any bet.  Prove that all integer bets from \$1 to \$2$^{k + 1} - 1$ can
be made.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;logical-operators&#34;&gt;Logical Operators&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MCS Problem 3.9.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How many 3-input, 1-output Boolean operators are there?  Support your
answer with a convincing, concise justification.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;logical-formulas&#34;&gt;Logical Formulas&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;For the following formula, specify whether it is &lt;em&gt;valid&lt;/em&gt;, &lt;em&gt;satisfiable&lt;/em&gt;, &lt;em&gt;both&lt;/em&gt; valid and satisfiable, or &lt;em&gt;neither&lt;/em&gt; valid nor satisfiable:
$$((P \rightarrow Q) \land (Q \rightarrow P)) \lor (P \oplus Q)$$
where $\oplus$ denotes XOR. Support your answer with a clear and convincing argument.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write the following natural language statement (from the Eighth
Amendment to the US Constitution) as a logical formula. Your goal is to
produce a simple and clear statement whose meaning matches what you
believe is the intent of the natural language statements.  If there are
logical ambiguities in the statement, explain them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Excessive bail shall not be required, nor excessive fines
imposed, nor cruel and unusual punishments inflicted.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 1</title>
      <link>https://uvacs2102.github.io/ps/ps1/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps1/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 1
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightrl&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 1 September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX). Please make sure the PDF you submit is redable (see &lt;a href=&#34;https://uvacs2102.github.io/scanning&#34;&gt;advice on course site&lt;/a&gt;).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;Remember to follow the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;course pledge&lt;/a&gt; you read and signed at
the beginning of the semester.  For this assignment, you may discuss
the problems and work on solutions with anyone you want (including
other students in this class), but you must write your own solutions
and understand and be able to explain all work you submit on your
own. To confirm your own understanding, after discussing the problems
with others, you should attempt to write your solutions on your own
without consulting any notes from group work sessions. If you get
stuck, you may visit notes from the group work sessions, but should
make sure you understand things well enough to produce it on your own.
You may also use any external resources you want, with the exception
of solutions and comments from last year&amp;rsquo;s offering of this
course. Since the staff and students benefit from being able to both
reuse problems from previous years, and from being able to provide
detailed solutions to students, it is important that students do not
abuse these materials even if it is easy to find them. &lt;strong&gt;Using
solutions from last year&amp;rsquo;s course would be detrimental to your
learning in this course, and is considered an honor violation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use resources other than the class materials, lectures and
course staff, you should document this and mention it clearly on your
submission.  For everyone other than the course staff you work with,
you should credit them clearly on your assignment, and should find out
something interesting about their family history (you shouldn&amp;rsquo;t
include this in your submission, though, especially if they share
something private with you).&lt;/p&gt;

&lt;p&gt;You are &lt;b&gt;strongly encouraged&lt;/b&gt; to start early and take advantage of
the scheduled &lt;a href=&#34;https://uvacs2102.github.io/officehours&#34;&gt;office hours&lt;/a&gt; for this course.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 1 of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class1&#34;&gt;Class
1&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class2&#34;&gt;Class 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps1.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab: &lt;a href=&#34;https://collab.its.virginia.edu/portal/site/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/tool/db29109f-5ace-4dcc-8e11-ded9d5adc92b?panel=Main&#34;&gt;submission link&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all the problems on the next page.  For full credit, your answers
should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;proofs-and-certification&#34;&gt;Proofs and Certification&lt;/h2&gt;

&lt;p&gt;The introduction for the MCS book states,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Proofs also play a growing role in computer science; they are used to
certify that software and hardware will &lt;em&gt;always&lt;/em&gt; behave correctly,
something that no amount of testing can do.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The statement suggests &amp;ldquo;no amount of testing can certify software
will always behave correctly&amp;rdquo;.  Is this claim valid or invalid?  Support
your answer with a short justification.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The statement suggests &amp;ldquo;proofs can certify that software will
always behave correctly&amp;rdquo;.  Argue that this is not a correct statement.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;inference-rules&#34;&gt;Inference Rules&lt;/h2&gt;

&lt;p&gt;For each candidate rule below, state whether or not the rule is sound.
Support your answer with a convincing proof. The variables $P$, $Q$,
and $R$ are Boolean propositions (either &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$\infer{R}{P \implies Q, Q \implies R}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{P}{(NOT(NOT(P)))}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{Q \implies P}{P \implies Q}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{NOT(Q) \implies P}{P}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{Q \implies NOT(P)}{P \implies NOT(P)}$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;proofs&#34;&gt;Proofs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The proof that $\sqrt{2}$ is irrational (Theorem 1.8.1) in the
book includes relies on this implication: $d^2$ is a multiple of two
implies $d$ is a multiple of 2.  Prove that this is a valid
implication to a skeptical reader.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Problem 1.4 (parts a, b, and c) from the MCS book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that for any non-negative real numbers, $x$ and $y$, if $xy
= n$ then the minimum of $x$ and $y$ is not greater than $\sqrt{n}$.
(Hint: prove by contradiction.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set Omega</title>
      <link>https://uvacs2102.github.io/ps/psomega/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/psomega/</guid>
      <description>

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightg&#34;&gt; This problem set is not like the others.
It is &lt;em&gt;optional&lt;/em&gt;, and can only count positively.  The submission
deadline is &lt;strong&gt;Monday, 4 December&lt;/strong&gt; at &lt;strong&gt;11:59pm&lt;/strong&gt;. You should do it if you have an idea for something worthwhile, fun,
   or interesting to do (that&amp;rsquo;s a logical or, not an exclusive xor).
   A good submission for this assignment can also help your grade,
   counting like a bonus problem set.  An excellent submission could
   count like two bonus problem sets.  If you write a musical about
   Evariste Galois as good as Hamilton, you will get an automatic A+
   in the class and not need to take the final.&lt;/div&gt;&lt;/p&gt;

&lt;!--   &lt;div class=&#34;highlightr&#34;&gt;

   &lt;/div&gt;
--&gt;

&lt;h3 id=&#34;collaboration-policy&#34;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;For this assignment, you may work alone or with as many other people
as you choose. If you work in a team, your team should jointly post a
single submission with all of your names on it. All team members will
receive the same credit, unless you specify and justify an uneven
distribution in your submission. Your team may be as large as you
want, but the expectations for quality and value of your submission
scale according to &lt;span class=&#34;math&#34;&gt;sqrt(&lt;em&gt;N&lt;/em&gt;)&lt;/span&gt; (that
is, a team with 4 people should do something twice as impressive as an
individual to merit the same credit; if you are able to convince all
of the other 320 students in the class to join your team, you should
do something approximately 17.9 times as impressive as what would be
expected from a single student). You are welcome to include people not
in the class in your team (and they do not increase the value of &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;N&lt;/em&gt;&lt;/span&gt;).&lt;/p&gt;

&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;

&lt;p&gt;Create an artifact that conveys some idea related to this class to a
selected target audience.&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;You can define your target audience but should specify what it
is. Examples of target audiences include &amp;ldquo;five year olds&amp;rdquo;, &amp;ldquo;typical
third graders&amp;rdquo;, &amp;ldquo;your parents&amp;rdquo;, &amp;ldquo;UVa students majoring in history&amp;rdquo;,
&amp;ldquo;Martians&amp;rdquo;, &amp;ldquo;cs1110 students&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Your artifact can be anything you want, so long as it includes some
representation as a finite sequence of bits that can be posted on the
Internet. Examples of possible artifacts include a written story, a
comic, a video, a song (lyrics), or an interpretive dance.  If your
artifact cannot be posted on the Internet (for example, if you bake a
cake, build a quantum computer, or develop a time machine) you should
still make some description of your artifact (including a picture if
helpful) that can be posted.&lt;/p&gt;

&lt;h2 id=&#34;submission&#34;&gt;Submission&lt;/h2&gt;

&lt;!-- You should submit your artifact by use this web form:
&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSfMqhD_T3hUvNB0uLWr1Cs8VmIWsJPtHYLajTJV4Y1RLioq1w/viewform&#34;&gt;Problem Set Omega Submission Form&lt;/a&gt;.
--&gt;

&lt;p&gt;Your submission should include: (a) a description of your target
  audience; and (b) a link to your artifact, hosted at a URL that will
  not disappear shortly after you graduate.&lt;/p&gt;

&lt;p&gt;Your submission may also (optionally) include a &lt;em&gt;poetic license&lt;/em&gt;
  statement.  Everything technical in your artifact should be correct,
  unless you carefully document how you know it is incorrect. To
  convey the essence of an idea effectively to a general audience, it
  may be necessary to simplify some things in ways that are not
  technically correct but do not violate the important essence of the
  idea. If you do this, include a poetic license statement to your
  submission that explains and justifies your decisions (otherwise,
  you will lose points for any technical inaccuracies).&lt;/p&gt;

&lt;h2 id=&#34;optional-presentation&#34;&gt;Optional Presentation&lt;/h2&gt;

&lt;p&gt;If you would like to present, perform, or share your artifact in class
on 5 December (the last day of class), you must submit your request by
&lt;strong&gt;5:59pm&lt;/strong&gt; on &lt;strong&gt;Monday, 4 December&lt;/strong&gt;.  Your request should explain
what you would like to do and how much time you think you need for
this. Given the size of the class, it may not be possible for all
teams that want to present to do so, so selection will be done based
on what you submit with an emphasis on things that will be worthwhile
or enjoyable for the whole class.&lt;/p&gt;

&lt;h2 id=&#34;evaluation-criteria&#34;&gt;Evaluation Criteria&lt;/h2&gt;

&lt;p&gt;Since this is an &amp;ldquo;optional&amp;rdquo; assignment, submissions that are not
considered to have significant value will not be worth any credit. To
be worth credit, your submission should be something that (in the
subjective opinion of the course instructors) would be worth showing
to someone in your target audience.&lt;/p&gt;

&lt;p&gt;Submissions will be evaluated on technical correctness and perceived
effectiveness in conveying an important idea to your defined target
audience.  Aesthetic merit, entertainment value, and creativity are
also important, but only in as much as they support the goal of
conveying an idea from discrete math to your target audience.&lt;/p&gt;

&lt;h2 id=&#34;motivating-examples&#34;&gt;Motivating Examples&lt;/h2&gt;

&lt;p&gt;To give you some ideas, here are some examples of things students have
done in past years for similar assignments (including some from
classes other than cs2102).&lt;/p&gt;

&lt;h3 id=&#34;cs2102-fall-2016&#34;&gt;cs2102 Fall 2016&lt;/h3&gt;

&lt;p&gt;(You can see a larger selection of submissions from Fall 2016 here: &lt;a href=&#34;https://uvacs2102.github.io/f16/pszhighlights&#34;&gt;psZhighlights&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YC-ewXitC5w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
Logical Operators&lt;br&gt;
&lt;b&gt;Helen Simecek&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1nPaLNygB3QrwSIWW8rMoJFkycMAJvkh38Id-VqkUHqQ/edit#slide=id.p3&#34;&gt;Carlos Goes Birdwatching&lt;/a&gt; (A story about binary operations for middle school students)&lt;br&gt;
&lt;b&gt;Derrick Chien Huang, Andrea Chang, Jennifer Qian&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/SWjhB8Ijy7w?list=PLr874xyHM_pyGkjqB1sKYRWfdjugFtmyG&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
Sets and Superheroes&lt;br&gt;
&lt;b&gt;Matt Huo, Joe Karaki&lt;/b&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GUg8FLZwDdA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
Call of Duty and Countable Infinities&lt;br&gt;
&lt;b&gt;Aarron Braxton, Shreyas Hirway &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/PNpBamrpgic&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
Induction Rap&lt;br&gt;
&lt;b&gt;Milan Bharadwaj&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe id=&#34;iframe_container&#34; frameborder=&#34;0&#34; webkitallowfullscreen=&#34;&#34; mozallowfullscreen=&#34;&#34; allowfullscreen=&#34;&#34; width=&#34;550&#34; height=&#34;400&#34; src=&#34;https://prezi.com/embed/ss873zkdpboq/?bgcolor=ffffff&amp;amp;lock_to_path=0&amp;amp;autoplay=0&amp;amp;autohide_ctrls=0&amp;amp;landing_data=bHVZZmNaNDBIWnNjdEVENDRhZDFNZGNIUE1lN2lETGZVbFVZd0FVbHg4RTRNeGNiMStCLzQxREgzcWZ4RjJiOHZwdz0&amp;amp;landing_sign=7ziEB2a9paxUDcmHnBeRk2iWFTslWvS2SSoz5Tcj2nw&#34;&gt;&lt;/iframe&gt;&lt;br&gt;
Gumball State Machine&lt;br&gt;
&lt;b&gt;Priya Nakhre&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MsVdTG6I_5Y&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
Modeling Mario Party with State Machines&lt;br&gt;
&lt;b&gt;Benjamin Fuhrman&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/nGuEQJRH34k&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
State Machines and Breakdancing&lt;br&gt;
&lt;b&gt;Kenny Le&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eVB-wHlxI9w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
Recursive Music&lt;br&gt;
Jiahong Chen, WenBin Qi&lt;/p&gt;

&lt;h3 id=&#34;other-classes&#34;&gt;Other Classes&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.virginia.edu/~evans/cs1120-f11/conveying-computing-highlights&#34;&gt;&lt;em&gt;Conveying Computing&lt;/em&gt;&lt;/a&gt; (cs1120: Computing: Language, Logic, Machines, Fall 2011)&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://www.cs.virginia.edu/~evans/cs1120-f11/wp-content/uploads/2011/12/IMG_15772.jpg&#34; width=600&gt;&lt;br&gt;
Turing Machine Cake Balls, Megan Dunne and Jamie Miller
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.virginia.edu/~evans/cs3102/?page_id=324&#34;&gt;&lt;em&gt;Conveying Complexity
Highlights&lt;/em&gt;&lt;/a&gt;
(cs3102: Theory of Computation, Spring 2010) (you can see all the
submissions &lt;a href=&#34;http://www.cs.virginia.edu/~evans/cs3102/?p=304&#34;&gt;here&lt;/a&gt;,
but many of the links don&amp;rsquo;t work anymore since people used their
&lt;em&gt;people.virginia.edu&lt;/em&gt; pages)&lt;/p&gt;

&lt;p&gt;The most successful (at least by number of views) is Authur Gordon, Allison Gurlitz, Stephen Lam, and Eugene Moy&amp;rsquo;s &lt;em&gt;A &amp;ldquo;Downfall&amp;rdquo; Parody: P = NP&lt;/em&gt;:
&lt;center&gt;
&lt;iframe width=&#34;650&#34; height=&#34;366&#34; src=&#34;https://www.youtube.com/embed/GSIodz9GWxc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mario – Determinism vs. Nondeterminism&lt;/em&gt;, by Navid Hosseini, John Koelling, Trung Tran, and Ben Powell:
&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/PeRRF3jrHbQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&#34;http://www.cs.virginia.edu/~evans/cs588-fall2001/problem-sets/ps4-selected.html&#34;&gt;CS588: Cryptology - Principles and Applications&lt;/a&gt; (Fall 2001), Adam Glaser and Portman Wills, &lt;em&gt;Safe Computing at UVA&lt;/em&gt;:
&lt;center&gt;
&lt;video controls=&#34;controls&#34; width=&#34;650&#34; height=&#34;488&#34; name=&#34;Video Name&#34; src=&#34;https://www.cs.virginia.edu/evans/safecomputing.mov&#34;&gt;&lt;/video&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Some examples that were not for course assignments:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.logicomix.com/en/index.html&#34;&gt;&lt;em&gt;Logicomix&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0QT_CUSOslY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;br /&gt;
Dori-Mic and the Non-Equivalence of Kleene-* and Kleene-X (Trailer)&lt;br /&gt;
(&lt;a href=&#34;https://youtu.be/jLYaoIHN5lQ&#34;&gt;Full Feature&lt;/a&gt;)
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Dori-Mic-Universal-Machine-David-Evans/dp/1495944980/&#34;&gt;&lt;em&gt;Dori-Mic and the Universal Machine&lt;/em&gt;&lt;/a&gt;.
&lt;center&gt;
&lt;a href=&#34;http://dori-mic.org&#34;&gt;&lt;img src=&#34;http://dori-mic.org/images/dori-mic-cover.png&#34; width=650&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>