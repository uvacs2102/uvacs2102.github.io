<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Obliv-C</title>
    <link>//oblivc.org/</link>
    <description>Recent content on Obliv-C</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="//oblivc.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Obliv-C - Tutorial</title>
      <link>//oblivc.org/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/tutorial/</guid>
      <description>&lt;p&gt;&lt;meta http-equiv=&#34;refresh&#34; content=&#34;0; URL=&#39;http://samuelhavron.github.io/obliv-c/&#39;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Obliv-C: A Language for Extensible Data-Oblivious Computation</title>
      <link>//oblivc.org/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/main/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;//oblivc.org/images/oblivc.png&#34; align=&#34;center&#34; width=&#34;90%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obliv-C&lt;/strong&gt; is a simple GCC wrapper that makes it easy to embed secure
computation protocols inside regular C programs.&lt;/p&gt;

&lt;p&gt;The idea is simple: if you are performing a multi-party distributed
computation with sensitive data, just write it in our Obliv-C langauge
and compile/link it with your project. The result will be a secure
multi-party cryptographic protocol that performs this operation without
revealing any of the inputs or intermediate values of the computation to
any of the parties. Only the outputs are finally shared.&lt;/p&gt;

&lt;h2 id=&#34;code:379caad01b6ea305187be199bcac1370&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/samee/obliv-c&#34;&gt;https://github.com/samee/obliv-c&lt;/a&gt;&lt;br /&gt;
This repository includes the implementation of Obliv-C and several
example applications and benchmarks.&lt;/p&gt;

&lt;h2 id=&#34;tutorial:379caad01b6ea305187be199bcac1370&#34;&gt;Tutorial&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://samuelhavron.github.io/obliv-c/&#34;&gt;Introduction to Obliv-C&lt;/a&gt; (Samuel Havron)&lt;/p&gt;

&lt;h2 id=&#34;publications:379caad01b6ea305187be199bcac1370&#34;&gt;Publications&lt;/h2&gt;

&lt;p&gt;Samee Zahur and David Evans. &lt;a href=&#34;http://eprint.iacr.org/2015/1153.pdf&#34;&gt;&lt;em&gt;Obliv-C: A Language for Extensible
Data-Oblivious Computation&lt;/em&gt;&lt;/a&gt;,
&lt;a href=&#34;http://eprint.iacr.org/2015/1153&#34;&gt;Cryptology ePrint Archive: Report
2015:1153&lt;/a&gt;
[&lt;a href=&#34;http://eprint.iacr.org/2015/1153&#34;&gt;PDF&lt;/a&gt;], November 2015.&lt;/p&gt;

&lt;p&gt;Samee Zahur and David Evans. &lt;a href=&#34;http://www.ieee-security.org/TC/SP2015/posters/paper_62.pdf&#34;&gt;&lt;em&gt;Poster: Obliv-C: a Fast, Lightweight
Language for Garbled
Circuits&lt;/em&gt;&lt;/a&gt;.
&lt;a href=&#34;www.ieee-security.org/TC/SP2015/&#34;&gt;&lt;em&gt;36&lt;sup&gt;th&lt;/sup&gt; IEEE Symposium on Security and
Privacy&lt;/em&gt;&lt;/a&gt; (&amp;ldquo;Oakland&amp;rdquo;). 18-20 May 2015
(Poster).&lt;/p&gt;

&lt;h2 id=&#34;projects-using-obliv-c:379caad01b6ea305187be199bcac1370&#34;&gt;Projects Using Obliv-C&lt;/h2&gt;

&lt;h4 id=&#34;half-gates:379caad01b6ea305187be199bcac1370&#34;&gt;Half-Gates&lt;/h4&gt;

&lt;p&gt;Samee Zahur, Mike Rosulek, and David Evans.  &lt;a href=&#34;http://mightbeevil.com/halfgates/&#34;&gt;&lt;em&gt;Two Halves Make a Whole: Reducing Data Transfer in Garbled Circuits using Half Gates&lt;/em&gt;&lt;/a&gt;.  In &lt;a href=&#34;https://www.cosic.esat.kuleuven.be/eurocrypt_2015/papers.shtml&#34;&gt;EuroCrypt 2015&lt;/a&gt;.  Sofia, Bulgaria.  26-30 April 2015. [&lt;a href=&#34;http://www.cs.virginia.edu/evans/pubs/ec2015/halfgates.pdf&#34;&gt;PDF&lt;/a&gt;, 28 pages] [&lt;a href=&#34;http://github.com/samee/obliv-c&#34;&gt;Code&lt;/a&gt;]&lt;/p&gt;

&lt;h4 id=&#34;sqoram-sqoram:379caad01b6ea305187be199bcac1370&#34;&gt;&lt;a href=&#34;//oblivc.org/sqoram&#34;&gt;SqORAM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner,
David Evans, Jonathan Katz. &lt;a href=&#34;//oblivc.org/docs/sqoram.pdf&#34;&gt;&lt;em&gt;Revisiting Square-Root ORAM Efficient
Random Access in Multi-Party
Computation&lt;/em&gt;&lt;/a&gt; (pre-publication
version).  To appear in &lt;a href=&#34;http://www.ieee-security.org/TC/SP2016/&#34;&gt;&lt;em&gt;37&lt;sup&gt;th&lt;/sup&gt; IEEE Symposium on Security and
Privacy&lt;/em&gt;&lt;/a&gt; (&amp;ldquo;Oakland&amp;rdquo;). San
Jose, CA. 23-25 May 2016.&lt;/p&gt;

&lt;h4 id=&#34;secure-deep-learning:379caad01b6ea305187be199bcac1370&#34;&gt;Secure Deep Learning&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bargavjayaraman/SecureDeepLearning&#34;&gt;https://github.com/bargavjayaraman/SecureDeepLearning&lt;/a&gt;&lt;br /&gt;
Bargav Jayaraman (Accenture Technology Labs, Bangalore)&lt;/p&gt;

&lt;h4 id=&#34;scientific-data-analysis:379caad01b6ea305187be199bcac1370&#34;&gt;Scientific Data Analysis&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/samuelhavron/obliv-c&#34;&gt;https://github.com/samuelhavron/obliv-c&lt;/a&gt;&lt;br /&gt;
Private Linear Regression&lt;br /&gt;
Samuel Havron&lt;/p&gt;

&lt;h2 id=&#34;talks:379caad01b6ea305187be199bcac1370&#34;&gt;Talks&lt;/h2&gt;

&lt;p&gt;Samee Zahur. &lt;a href=&#34;http://www.humangenomeprivacy.org/2015/slides/UV.pdf&#34;&gt;&lt;em&gt;Obliv-C: A Simple C Extension for
SMC&lt;/em&gt;&lt;/a&gt;, iDash
Privacy &amp;amp; Security Workshop 2015.  (Won award for fasted &amp;ldquo;Hamming
Distance&amp;rdquo; execution.)&lt;/p&gt;

&lt;p&gt;David Evans. &lt;a href=&#34;http://www.cs.virginia.edu/~evans/talks/crossing2015/&#34;&gt;&lt;em&gt;Multi-Party Computation for the
Masses&lt;/em&gt;&lt;/a&gt;
(includes video).  &lt;a href=&#34;https://www.crossing.tu-darmstadt.de/en/news-events/crossing-conference-2015/&#34;&gt;CROSSING Conference 2015: Where Quantum Physics,
Cryptography, System Security and Software Engineering
Meet&lt;/a&gt;. Darmstadt. 1 June 2015&lt;/p&gt;

&lt;p&gt;Samee Zahur. &lt;a href=&#34;http://research.microsoft.com/apps/video/dl.aspx?id=20989&#34;&gt;&lt;em&gt;Obliv-C: A Lightweight Compiler for Data-Oblivious
Computation&lt;/em&gt;&lt;/a&gt;
(includes video). Applied Multi-Party Computation.  Microsoft Research,
Redmond, WA. 20 February 2014.&lt;/p&gt;

&lt;h2 id=&#34;people:379caad01b6ea305187be199bcac1370&#34;&gt;People&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cs.virginia.edu/~sza4uq/&#34;&gt;Samee Zahur&lt;/a&gt;, Project Founder and Leader&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jackdoerner.net/&#34;&gt;Jack Doerner&lt;/a&gt;, Wizard of Oblivion&lt;br /&gt;
&lt;a href=&#34;https://www.cs.virginia.edu/evans&#34;&gt;David Evans&lt;/a&gt;, Faculty Advisor&lt;br /&gt;
&lt;a href=&#34;https://github.com/samuelhavron&#34;&gt;Samuel Havron&lt;/a&gt;, Undergraduate Researcher&lt;/p&gt;

&lt;p&gt;Contributors: &lt;a href=&#34;https://github.com/ndokmai&#34;&gt;Natnatee (&amp;ldquo;Ko&amp;rdquo;) Dokmai&lt;/a&gt;, &lt;a href=&#34;https://github.com/Lichard&#34;&gt;Richard
Li&lt;/a&gt;, &lt;a href=&#34;https://github.com/mdh3hc&#34;&gt;Michael Mahoney&lt;/a&gt;, &lt;a href=&#34;https://github.com/wangxiao1254&#34;&gt;Xiao Wang&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting Square Root ORAM</title>
      <link>//oblivc.org/sqoram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/sqoram/</guid>
      <description>

&lt;h2 id=&#34;efficient-random-access-in-multi-party-computation:99481d19139b404ed01e3659deadeada&#34;&gt;Efficient Random Access in Multi-Party Computation&lt;/h2&gt;

&lt;p&gt;Hiding memory access patterns is required for secure computation, but
remains prohibitively expensive for many interesting applications. Prior
work has either developed custom algorithms that minimize the need for
data-dependant memory access, or proposed the use of Oblivious RAM
(ORAM) to provide a general-purpose solution. However, most ORAMs are
designed for client-server scenarios, and provide only asymptotic
benefits in secure computation.&lt;/p&gt;

&lt;p&gt;We show how the classical square-root ORAM of Goldreich and Ostrovsky
can be modified to provide a practical ORAM for use in secure
computation, even though it is asymptotically worse than the best known
schemes. Specifically, we show a design that has over 100&lt;em&gt;x&lt;/em&gt; lower
initialization cost, and provides benefits over linear scan for just 8
blocks of data. Our scheme outperforms alternate approaches across a
wide range of parameters, often by several orders of magnitude.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//oblivc.org/images/sqoramcompare.png&#34; align=&#34;center&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;code:99481d19139b404ed01e3659deadeada&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/samee/sqrtOram&#34;&gt;https://github.com/samee/sqrtOram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository includes the implementation of Square-Root ORAM in
&lt;a href=&#34;//oblivc.org/&#34;&gt;Obliv-C&lt;/a&gt;, as well as several example applications and benchmarks.&lt;/p&gt;

&lt;h2 id=&#34;paper:99481d19139b404ed01e3659deadeada&#34;&gt;Paper&lt;/h2&gt;

&lt;p&gt;Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner,
David Evans, Jonathan Katz. &lt;a href=&#34;//oblivc.org/docs/sqoram.pdf&#34;&gt;&lt;em&gt;Revisiting Square-Root ORAM Efficient
Random Access in Multi-Party Computation&lt;/em&gt;&lt;/a&gt;. In &lt;a href=&#34;http://www.ieee-security.org/TC/SP2016/&#34;&gt;&lt;em&gt;37&lt;sup&gt;th&lt;/sup&gt; IEEE
Symposium on Security and
Privacy&lt;/em&gt;&lt;/a&gt; (&amp;ldquo;Oakland&amp;rdquo;). San
Jose, CA. 23-25 May 2016.&lt;/p&gt;

&lt;h2 id=&#34;people:99481d19139b404ed01e3659deadeada&#34;&gt;People&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cs.virginia.edu/~sza4uq/&#34;&gt;Samee Zahur&lt;/a&gt; (University of Virginia), Project Founder and Leader&lt;br /&gt;
&lt;a href=&#34;https://github.com/wangxiao1254&#34;&gt;Xiao Wang&lt;/a&gt; (University of Maryland)&lt;br /&gt;
&lt;a href=&#34;http://cpsc.yale.edu/people/mariana-raykova&#34;&gt;Mariana Raykova&lt;/a&gt; (Yale University)&lt;br /&gt;
&lt;a href=&#34;http://www.cs.upc.edu/~agascon/&#34;&gt;Adrià Gascón&lt;/a&gt; (University of Edinburgh)&lt;br /&gt;
&lt;a href=&#34;https://jackdoerner.net/&#34;&gt;Jack Doerner&lt;/a&gt; (University of Virginia)&lt;br /&gt;
&lt;a href=&#34;https://www.cs.virginia.edu/evans&#34;&gt;David Evans&lt;/a&gt; (University of Virginia)&lt;br /&gt;
&lt;a href=&#34;https://www.cs.umd.edu/~jkatz/&#34;&gt;Jonathan Katz&lt;/a&gt; (University of Maryland)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting Square Root ORAM</title>
      <link>//oblivc.org/sqrtOram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/sqrtOram/</guid>
      <description>

&lt;h2 id=&#34;efficient-random-access-in-multi-party-computation:a2cae29f78a3ed35db7aeb3bee5a75d5&#34;&gt;Efficient Random Access in Multi-Party Computation&lt;/h2&gt;

&lt;p&gt;Hiding memory access patterns is required for secure computation, but
remains prohibitively expensive for many interesting applications. Prior
work has either developed custom algorithms that minimize the need for
data-dependant memory access, or proposed the use of Oblivious RAM
(ORAM) to provide a general-purpose solution. However, most ORAMs are
designed for client-server scenarios, and provide only asymptotic
benefits in secure computation.&lt;/p&gt;

&lt;p&gt;We show how the classical square-root ORAM of Goldreich and Ostrovsky
can be modified to provide a practical ORAM for use in secure
computation, even though it is asymptotically worse than the best known
schemes. Specifically, we show a design that has over 100&lt;em&gt;x&lt;/em&gt; lower
initialization cost, and provides benefits over linear scan for just 8
blocks of data. Our scheme outperforms alternate approaches across a
wide range of parameters, often by several orders of magnitude.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//oblivc.org/images/sqoramcompare.png&#34; align=&#34;center&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;code:a2cae29f78a3ed35db7aeb3bee5a75d5&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/samee/sqrtOram&#34;&gt;https://github.com/samee/sqrtOram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository includes the implementation of Square-Root ORAM in
&lt;a href=&#34;//oblivc.org/&#34;&gt;Obliv-C&lt;/a&gt;, as well as several example applications and benchmarks.&lt;/p&gt;

&lt;h2 id=&#34;paper:a2cae29f78a3ed35db7aeb3bee5a75d5&#34;&gt;Paper&lt;/h2&gt;

&lt;p&gt;Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner,
David Evans, Jonathan Katz. &lt;a href=&#34;//oblivc.org/docs/sqoram.pdf&#34;&gt;&lt;em&gt;Revisiting Square-Root ORAM Efficient
Random Access in Multi-Party Computation&lt;/em&gt;&lt;/a&gt;. In &lt;a href=&#34;http://www.ieee-security.org/TC/SP2016/&#34;&gt;&lt;em&gt;37&lt;sup&gt;th&lt;/sup&gt; IEEE
Symposium on Security and
Privacy&lt;/em&gt;&lt;/a&gt; (&amp;ldquo;Oakland&amp;rdquo;). San
Jose, CA. 23-25 May 2016.&lt;/p&gt;

&lt;h2 id=&#34;people:a2cae29f78a3ed35db7aeb3bee5a75d5&#34;&gt;People&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cs.virginia.edu/~sza4uq/&#34;&gt;Samee Zahur&lt;/a&gt; (University of Virginia), Project Founder and Leader&lt;br /&gt;
&lt;a href=&#34;https://github.com/wangxiao1254&#34;&gt;Xiao Wang&lt;/a&gt; (University of Maryland)&lt;br /&gt;
&lt;a href=&#34;http://cpsc.yale.edu/people/mariana-raykova&#34;&gt;Mariana Raykova&lt;/a&gt; (Yale University)&lt;br /&gt;
&lt;a href=&#34;http://www.cs.upc.edu/~agascon/&#34;&gt;Adrià Gascón&lt;/a&gt; (University of Edinburgh)&lt;br /&gt;
&lt;a href=&#34;https://jackdoerner.net/&#34;&gt;Jack Doerner&lt;/a&gt; (University of Virginia)&lt;br /&gt;
&lt;a href=&#34;https://www.cs.virginia.edu/evans&#34;&gt;David Evans&lt;/a&gt; (University of Virginia)&lt;br /&gt;
&lt;a href=&#34;https://www.cs.umd.edu/~jkatz/&#34;&gt;Jonathan Katz&lt;/a&gt; (University of Maryland)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure Stable Matching at Scale</title>
      <link>//oblivc.org/matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//oblivc.org/matching/</guid>
      <description>

&lt;h2 id=&#34;secure-stable-matching-at-scale:5ee805dd04d144d46f06588a424f000c&#34;&gt;Secure Stable Matching at Scale&lt;/h2&gt;

&lt;p&gt;When a group of individuals and organizations wish to compute a &lt;em&gt;stable
matching&lt;/em&gt; &amp;mdash; for example, when medical students are matched to
medical residency programs &amp;mdash; they often outsource the computation
to a trusted arbiter to preserve the privacy of participants’ preference
rankings. Secure multi-party computation presents an alternative that
offers the possibility of private matching processes that do not rely on
any common trusted third party. However, stable matching algorithms are
computationally intensive and involve complex data-dependent memory
access patterns, so they have previously been considered infeasible for
execution in a secure multiparty context on non-trivial inputs.&lt;/p&gt;

&lt;p&gt;We adapt the classic Gale-Shapley algorithm for use in such a
context, and show experimentally that our modifications yield a
lower asymptotic complexity and more than an order of magnitude
in practical cost improvement over previous techniques. Our
main insights are to design new oblivious data structures that exploit
the properties of the matching algorithms. We then apply our
secure computation techniques to the instability chaining algorithm
of Roth and Peranson, currently in use by the National Resident
Matching Program. The resulting algorithm is efficient enough to
be useful at the scale required for matching medical residents nationwide,
taking just over 17 hours to complete an execution simulating
the 2016 NRMP match with more than 35,000 participants
and 30,000 residency slots.&lt;/p&gt;

&lt;h2 id=&#34;code:5ee805dd04d144d46f06588a424f000c&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;Our code will be available soon under and open source license.  Please
send email to jhd3pa@virginia.edu to be notified when it is available.&lt;/p&gt;

&lt;h2 id=&#34;paper:5ee805dd04d144d46f06588a424f000c&#34;&gt;Paper&lt;/h2&gt;

&lt;p&gt;Jack Doerner, David Evans, and abhi shelat. &lt;a href=&#34;//oblivc.org/docs/matching.pdf&#34;&gt;&lt;em&gt;Secure Stable Matching at
Scale&lt;/em&gt;&lt;/a&gt; (pre-publication version).  12 June 2016.&lt;/p&gt;

&lt;h2 id=&#34;people:5ee805dd04d144d46f06588a424f000c&#34;&gt;People&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://jackdoerner.net/&#34;&gt;Jack Doerner&lt;/a&gt; (University of Virginia)&lt;br /&gt;
&lt;a href=&#34;https://www.cs.virginia.edu/evans&#34;&gt;David Evans&lt;/a&gt; (University of Virginia)&lt;br /&gt;
abhi shelat (Northeastern University)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>