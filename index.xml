<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/</link>
    <description>Recent content on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Problem Set 5 Comments</title>
      <link>https://uvacs2102.github.io/ps5comments/</link>
      <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps5comments/</guid>
      <description>&lt;p&gt;The preliminary solutions and comments for PS5 are now posted in collab:
&lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps5_solutions.pdf&#34;&gt;PDF&lt;/a&gt;.
(Problem 9 is not included, but will be added later.)&lt;/p&gt;

&lt;p&gt;We are providing the PS5 solutions now before they are graded, so you
have the solutions to read with plenty of time before the exam.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Three-Clause Challenge Refuted!</title>
      <link>https://uvacs2102.github.io/challenge5/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/challenge5/</guid>
      <description>&lt;p&gt;Challenge 5 has been refuted by Henry Spece!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightg&#34;&gt;
&lt;strong&gt;Challenge 5.&lt;/strong&gt; (From &lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps3_solutions.pdf&#34;&gt;PS3 Solutions&lt;/a&gt;) Prove that the four-clause solution given for question 6 is the shortest possible equivalent 3CNF formula.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The challenge as stated was actually bogus!  The four-clause solution
isn&amp;rsquo;t the shortest possible equivalent 3CNF formula.  Henry found a
three-clause equivalent 3CNF formula, and proved that there is no
two-clause equivalent 3CNF formula.&lt;/p&gt;

&lt;p&gt;His answer is below:&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
The four-clause 3-CNF equivalent solution to the logical equation is not
the smallest equivalent solution to the equation.&lt;/p&gt;

&lt;p&gt;The following is the original formula: &lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; (&amp;not;&lt;em&gt;D&lt;/em&gt; &amp;and; &lt;em&gt;E&lt;/em&gt;).&lt;br /&gt;
Here is a two-clause solution: (&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or;
&amp;not;&lt;em&gt;x&lt;/em&gt;) &amp;and; (&lt;em&gt;x&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt;&amp;or; &amp;not;&lt;em&gt;D&lt;/em&gt;) &amp;and; (&lt;em&gt;x&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; &lt;em&gt;E&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;This can be shown to be equivalent to the original formula by
constraining &lt;em&gt;x&lt;/em&gt; to be &lt;em&gt;A&lt;/em&gt;&amp;or;&amp;not;&lt;em&gt;B&lt;/em&gt; and algebraically reducing:
   &lt;blockquote&gt;
(&lt;em&gt;A&lt;/em&gt;&amp;or;&amp;not;&lt;em&gt;B&lt;/em&gt;&amp;or;&amp;not;(&lt;em&gt;A&lt;/em&gt;&amp;or;&amp;not;&lt;em&gt;B&lt;/em&gt;))&amp;and;(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt;
&amp;or; &amp;not;&lt;em&gt;D&lt;/em&gt;)&amp;and;(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; &lt;em&gt;E&lt;/em&gt;)&lt;br /&gt;
(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;D&lt;/em&gt;)&amp;and;(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; &lt;em&gt;E&lt;/em&gt;)&lt;br /&gt;
(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt;) &amp;or; (&amp;not;&lt;em&gt;D&lt;/em&gt;&amp;and;&lt;em&gt;E&lt;/em&gt;)&lt;br /&gt;
&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; (&amp;not;&lt;em&gt;D&lt;/em&gt;&amp;and;&lt;em&gt;E&lt;/em&gt;)
   &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;To further prove the equivalence, we can make the original formula
unsatisfied and show that there is no satisfying assignment for &lt;em&gt;x&lt;/em&gt;.  To
be unsatisfied, &lt;em&gt;A&lt;/em&gt; must be &lt;strong&gt;F&lt;/strong&gt;, &lt;em&gt;B&lt;/em&gt; must be &lt;strong&gt;T&lt;/strong&gt;, and &lt;em&gt;C&lt;/em&gt; must be
&lt;strong&gt;F&lt;/strong&gt;.  This reduces the formula to:
   &lt;blockquote&gt;
(&lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;strong&gt;F&lt;/strong&gt; &amp;or; &amp;not;&lt;em&gt;x&lt;/em&gt;)&amp;and;(x &amp;or; &lt;strong&gt;F&lt;/strong&gt; &amp;or; &amp;not;&lt;em&gt;D&lt;/em&gt;)&amp;and;(x &amp;or; &lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;em&gt;E&lt;/em&gt;)
   &lt;/blockquote&gt;
Because of the first term, &lt;em&gt;x&lt;/em&gt; must be &lt;strong&gt;F&lt;/strong&gt; if we want to satisfy the formula:
   &lt;blockquote&gt;
(&lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;strong&gt;T&lt;/strong&gt;)&amp;and;(&lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;strong&gt;F&lt;/strong&gt; &amp;or; &amp;not;&lt;em&gt;D&lt;/em&gt;)&amp;and;(&lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;strong&gt;F&lt;/strong&gt; &amp;or; &lt;em&gt;E&lt;/em&gt;) &amp;equiv; (&amp;not;&lt;em&gt;D&lt;/em&gt;&amp;and;&lt;em&gt;E&lt;/em&gt;)
   &lt;/blockquote&gt;
This has the same satisfiability as the remaining variables in the original formula (if &amp;not;&lt;em&gt;D&lt;/em&gt;&amp;and;&lt;em&gt;E&lt;/em&gt; is not satisfied, there is no satisfying assignment for &lt;em&gt;x&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proof that this is the shortest possible solution:&lt;/em&gt; There is no two or
one clause solution because a new variable in addition to &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;,
D, and &lt;em&gt;E&lt;/em&gt; is required for each clause to have only three terms, and
this variable must be repeated (by the rules we use to select that
variable).  Therefore, only 5 variables may be represented in a
two-clause solution, while there are at least six variables required for
equivalence to the original formula.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proof that a new variable is required:&lt;/em&gt; The original formula reduces to
(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or; &lt;em&gt;C&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;D&lt;/em&gt;)&amp;and;(&lt;em&gt;A&lt;/em&gt; &amp;or; &amp;not;&lt;em&gt;B&lt;/em&gt; &amp;or;
&lt;em&gt;C&lt;/em&gt; &amp;or; &lt;em&gt;E&lt;/em&gt;) in CNF form, which has two clauses, each containing a
unique combination of four variables.  There is no way to reduce the
number of variables per clause of a solution without adding a variable,
therefore at least one variable must be added to form the 3-CNF
equivalent of this formula.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anonymous Feedback Comments</title>
      <link>https://uvacs2102.github.io/anonymousfeedback3/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/anonymousfeedback3/</guid>
      <description>&lt;p&gt;This anonymous comment was submitted through collab:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A lot of my fellow classmates and I are concerned about this class because we feel that we aren&amp;rsquo;t provided with the resources necessary to be able to do the homework in a reasonable amount of time/effort. So many people spend hours and hours at office hours several times a week but even the TAs don&amp;rsquo;t understand our questions and are not able to help us understand any of the concepts. I understand that we&amp;rsquo;re supposed to be challenged by the class, but if we aren&amp;rsquo;t well-equipped to work through the challenges it becomes extremely frustrating. I feel like the class could be improved if the lectures were better structured so that we&amp;rsquo;re thoroughly taught the concepts and steps we can take to think through a problem rather than going through examples that are hard to understand because we&amp;rsquo;re only copying down things we don&amp;rsquo;t fully understand and that don&amp;rsquo;t apply to other problems we&amp;rsquo;re expected to solve. I don&amp;rsquo;t mean to be rude at all so I apologize if it comes off that way, it&amp;rsquo;s just that so many of the students and I are frustrated and stressed out about how much we don&amp;rsquo;t understand in the class even after seeking help repeatedly.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the drawbacks of anonymous comments, is I have no way to
follow-up to better understand what is really going on here. I do
appreciate the anonymous comments, but you shouldn&amp;rsquo;t be worried about
making comments like this directly &amp;mdash; I view any student making
comments with the goal of improving their own learning and making things
better for the class as a positive thing, and you shouldn&amp;rsquo;t be worried
that I would count any thoughtful and respectful comment against you.&lt;/p&gt;

&lt;p&gt;As for the content, as best as I&amp;rsquo;m able to interpret it, the perception
that the problems are too hard does not fit with what I&amp;rsquo;m seeing in the
assignments.  For all of the problem sets so far, more than 90% of
students have received grades at least 5 (the exception was for PS3,
where it was 89%), which means nearly all answers correct (with some
justifications that could be better).  On all the assignments, fewer
than 5% of the submissions have been 4 or below.  So, either we are
grading them too generously and students are getting 5+s without
actually understanding much (which I don&amp;rsquo;t think is the case, but
perhaps we are giving too much benefit of the doubt for unclear
answers), or, more likely, people are acutally understanding things
quite well, but it is taking more &amp;ldquo;pain&amp;rdquo; and effort to get there than
you expect.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t make sense to spend time in lecture copying down things you
don&amp;rsquo;t understand.  If there are things you don&amp;rsquo;t understand in lecture,
please stop and ask questions, or if you aren&amp;rsquo;t comfortable doing that,
at least post questions on slack.  If you don&amp;rsquo;t ask questions, I don&amp;rsquo;t
know what is confusing, or what should be explained.  I make the slides
and notes available so you can spend lecture time thinking instead of
writing (that said, I think it is often helpful to write things down
yourself as part of understanding them, or discovering what is unclear).&lt;/p&gt;

&lt;p&gt;There are lots of resources available, but I think you are expecting the
wrong kind of problems if you are looking for resources to tell you how
to solve them.  I understand why this is, since it is what you expect
from most of your previous classes.  You were all good students, and
great at redoing things you saw in class, that&amp;rsquo;s why you got into
UVA.&lt;/p&gt;

&lt;p&gt;But, you shouldn&amp;rsquo;t expect most problems from now on (in this class, and
in any worthwhile classes you take after this one) to be like
this. You&amp;rsquo;re not learning anything (useful), if you are just re-solving
problems you&amp;rsquo;ve already seen, or making straightforward symbol
replacements in them.&lt;/p&gt;

&lt;p&gt;Nearly all of the problems you did in previous math classes were
problems you could type into Wolfram Alpha and it could solve instantly;
this isn&amp;rsquo;t surprising - if a problem is something you can solve by
following given rules in a straightforward way, it shouldn&amp;rsquo;t be a
problem for humans to spend time on, the rules should be encoded in
programs that can do it automatically.  Sometimes its worthwhile for
humans to learn what the rules are and get some experience following
them, but the further along you get, and the more advanced computing
systems get, the more ridiculous it is for humans to spend tons of time
learning to do things computers already do well.&lt;/p&gt;

&lt;p&gt;So, we do learn steps for solving problems in this class, both in
lecture and in the book.  And, all of the problems on the problem sets
are related to things you learn in class.  But, many of the problems
also involve some creative step that isn&amp;rsquo;t a straightforward replication
of something you&amp;rsquo;ve seen in class or the book. Without that, I wouldn&amp;rsquo;t
really see the point in assigning them - I&amp;rsquo;m not assigning problem sets
to check if you are doing the reading and coming to class, the point of
the problem sets is to develop your understanding of the concepts by
having you figure out how to apply them in new ways that go beyond
things you&amp;rsquo;ve already seen and (more importantly) to develop your
abilities as mathematical thinkers and problem solvers.  You can&amp;rsquo;t do
that by replicating problems you&amp;rsquo;ve already done, or by solving problems
that are straightforward repetitions of problems you&amp;rsquo;ve already seen
solved.  But, before trying to solve new problems, you should make sure
you understand the examples you&amp;rsquo;ve seen in the book and in class. It is
usually much harder to come up with your own solutions to problems than
to understand ones that are provided by others.&lt;/p&gt;

&lt;p&gt;All that said, I would encourage anyone who feels like they are spending
an unreasonable amount of time on this, or feeling frustrated and
stressed out by it, to come to office hours to talk to me (or to make an
appointment if you can&amp;rsquo;t make it then).  My office hours have mostly
been fairly empty, and the best sense I get of what is going on in the
class is from students who come to talk to me during office hours, so I
hope you&amp;rsquo;ll do that rather than just getting frustrated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 12: Review</title>
      <link>https://uvacs2102.github.io/class12/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class12/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exam 1&lt;/strong&gt; is in class on &lt;strong&gt;Thursday, 6 October&lt;/strong&gt;.  See &lt;a href=&#34;https://uvacs2102.github.io/class11&#34;&gt;Notes
  11&lt;/a&gt; for details.  Remember to bring a good writing
  instrument (sharp pencil is recommended) and your page of notes to the
  exam.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;&lt;/p&gt;

&lt;p&gt;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b1ae1f6618b747fca08e0d2f64aa2586&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class12.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;exam-review&#34;&gt;Exam Review&lt;/h2&gt;

&lt;p&gt;Below are some notations you should understand.  We use variables $P$
and $Q$ to represent logical propositions (with \T\ or \F\ value), $A$
and $B$ and $D$ (domain of discourse) to represent sets, and $x$
represents any mathematical object.&lt;/p&gt;

&lt;p&gt;\begin{tabular}{cl}
\multicolumn{2}{c}{\bf Logical Operators} &lt;br /&gt;
$P$ \smallcaps{implies} $Q$, $P \implies Q$ &amp;amp; Logical implication: when $P$ is \T, $Q$ must be \T &lt;br /&gt;
$P$ \smallcaps{iff} $Q$, $P \iff Q$ &amp;amp; Double implication: $P \implies Q \vee Q \implies P$ &lt;br /&gt;
\smallcaps{not}$(P)$, $\neg P$, $\overline{P}$ &amp;amp;  Logical negation &lt;br /&gt;
$P$ \smallcaps{and} $Q$, $P \wedge Q$ &amp;amp; Logical conjunction (\T\ when both $P$ and $Q$ are \T) &lt;br /&gt;
$P$ \smallcaps{or} $Q$, $P \vee Q$ &amp;amp; Logical disjunction (\T\ when $P$ or $Q$ is \T\ (or both) &lt;br /&gt;
$P$ \smallcaps{xor} $Q$, $P \oplus Q$ &amp;amp; Exlusive or (\T\ when either $P$ or $Q$ is \T, but not both&lt;br /&gt;
\multicolumn{2}{c}{\bf Quantifiers} &lt;br /&gt;
$\forall x \in A \ldotp P(x)$ &amp;amp; $P(x)$ for {\em every} element $x$ of the set $A$ &lt;br /&gt;
$\exists x \in A \ldotp P(x)$ &amp;amp; $P(x)$ for {\em at least one} element $x$ of the set $A$ &lt;br /&gt;
\multicolumn{2}{c}{\bf Set Operators} &lt;br /&gt;
$x \in A$ &amp;amp; Set membership, $A$ contains the element $x$ &lt;br /&gt;
$x \notin A$ &amp;amp; Set non-membership, $A$ does not contain $x$ &lt;br /&gt;
$A \subseteq B$ &amp;amp; $A$ is a subset of $B$: $\forall x \in A. x \in B.$ &lt;br /&gt;
$A = B$ &amp;amp; set equality: $A \subseteq B \vee B subseteq A$ &lt;br /&gt;
$A \cup B$ &amp;amp; Set Union: $\forall x. x \in A \cup B \iff x \in A \vee x \in B.$ &lt;br /&gt;
$A \cap B$ &amp;amp; Set Intersection: $\forall x. x \in A \cup B \iff x \in A \wedge x \in B.$ &lt;br /&gt;
$ A - B$ &amp;amp; Set Difference: $\forall x. x \in A - B \iff x \in A \wedge x \notin B.$ &lt;br /&gt;
$ \overline{A}$ &amp;amp; Set Complement: $\forall x. x \in D. x \in \overline{A} \iff x \notin A.$ &lt;br /&gt;
$ A \times B$ &amp;amp; Cartesian Product: $\forall a \in A, b \in B \ldotp (a, b) \in A \times B.$&lt;br /&gt;
$ \textrm{pow}(A)$ &amp;amp; Power Set: $S \in A \iff S \subseteq A$. &lt;br /&gt;
\end{tabular}&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;well-ordering-principle&#34;&gt;Well-Ordering Principle&lt;/h2&gt;

&lt;p&gt;Remember the well-ordering principle template from Class 3:&lt;/p&gt;

&lt;p&gt;To prove that $P(n)$ is true for all $n \in \mathbb{N}$:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the set of counterexamples, $C ::= { n \in \mathbb{N} | NOT(P(n)) }$.&lt;/li&gt;
&lt;li&gt;Assume for contradiction that $C$ is non-empty.&lt;/li&gt;
&lt;li&gt;By the well-ordering principle, there must be some smallest element, $m \in C$.&lt;/li&gt;
&lt;li&gt;Reach a contradiction (this is the creative part!).  One way to reach a contradiction would be to show $P(m)$.  Another way is to show there must be an element $m&amp;rsquo; \in C$ where $m&amp;rsquo; &amp;lt; m$.&lt;/li&gt;
&lt;li&gt;Conclude that $C$ must be empty, hence there are no counter-examples and $P(n)$ always holds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since we didn&amp;rsquo;t finish the winning strategy proof in class, I&amp;rsquo;ve written
it out fully here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; Player 1 has a winning strategy in Take-Away if
  the number of sticks, $n$ is not divisible by 4.&lt;/p&gt;

&lt;p&gt;For any induction proof, the first thing we need to do is write the
theorem as a predicate on the natural numbers.&lt;/p&gt;

&lt;p&gt;$$\forall n \in \mathbb{N} \ldotp P(n) ::= \textrm{ Player 1 has a winning strategy if }\exists a \in { 1, 2, 3 }, \exists k \in \mathbb{N} \textrm{ such that } n = 4k + a.$$&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Base cases&lt;/em&gt;: $P(1)$, $P(2)$, $P(3)$.&lt;/p&gt;

&lt;p&gt;$P(1)$: If there is $1$ stick remaining, Player 1 wins by taking 1 stick.&lt;br /&gt;
$P(2)$: If there are $2$ sticks remaining, Player 1 wins by taking 2 sticks.&lt;br /&gt;
$P(3)$: If there are $3$ sticks remaining, Player 1 wins by taking 3 sticks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inductive case&lt;/em&gt;: Using strong induction, $\forall m \in \mathbb{N}, m \ge 4 \ldotp (\forall k \in \mathbb{N}, k \le m. P(k)) \implies P(m + 1)$.&lt;/p&gt;

&lt;p&gt;Since $m \ge 4$ we can write $m = 4k + b$ for some $k \in \mathbb{N}^{+}$ and $b \in {0, 1, 2, 3}$.&lt;/p&gt;

&lt;p&gt;We consider four cases for each value of $b$.&lt;/p&gt;

&lt;p&gt;Case 3: $b = 3$.  Since $m = 4k + 3$, $m + 1 = 4k + 4 = 4(k + 1)$.
Since $m + 1$ is divisible by 4, $P(m+ 1)$ holds because the predicate
makes no claims when $n$ is divisible by 4.&lt;/p&gt;

&lt;p&gt;Cases 0, 1, 2: Since $m = 4k + b$ for $b \in {0, 1, 2}$, we know $m +
1 = 4k + c$ for $c \in {1, 2, 3}$ (since $c = b + 1$ to produce $m +
1$).  We need to show $P(m+1)$, which means showing that player 1 has a
winning strategy for $n = 4k + c$, $c \in {1, 2, 3}$.  Player 1 takes
$c$ sticks, leaving $4k$ sticks.&lt;/p&gt;

&lt;p&gt;For the next turn, Player 2 can remove 1, 2, or 3 sticks, leaving $4k -
d$ sticks, $d \in {1, 2, 3}$.  This can be simplified to $4(k - 1) +
e$ sticks where $e = 4 - d$ since $4k - 4 + (4 - d) = 4k - d = 4(k -
1) + e$.  Hence, after Player 2&amp;rsquo;s turn it will be Player 1&amp;rsquo;s turn with
$4(k - 1) + e$ sticks, $e \in {1, 2, 3}$.  We know $4(k - 1) + e &amp;lt; m$
and it is not divisible by 4.  So, Player 1 has a winning strategy from
$P(m + 1)$ since she has a move to make such that no matter what move
player 2 makes, it leads to a number that is not divisible by 4 and is
less than $m$, which we know is a position where Player 1 has a winning
strategy but strong induction.&lt;/p&gt;

&lt;p&gt;Note that $4(k - 1) + e$ is $m - 1$, $m - 2$ or $m - 3$, so we need to
know $m \ge 4$ for this to be valid.  That&amp;rsquo;s why we needed three base
cases!&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 4 Comments</title>
      <link>https://uvacs2102.github.io/ps4comments/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps4comments/</guid>
      <description>&lt;p&gt;The solutions and comments for PS4 are now posted in collab: &lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps4_solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should find your graded assignment as a new PDF attachment with
markup on it in collab (if you submitted with teammates, please check
with your partners).&lt;/p&gt;

&lt;p&gt;The meaning of the scores is the same as for previous problem sets.  A
score of 6 means you got everything we expected out of this assignment,
and 5 means you did well for the most part by had some answers that
should have been better.  Scores above 6 are reserved for excellent work
that is above expectations.  (In the gradebook, collab sometimes shows
the grades scaled by 100 for some buggy reason.  Although receiving a
score of 100+ is possible in theory, no one received more than 8 points
for this assingment.  If you see a score about 100, the meaning is that
score divided by 100.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Satisfiable Formula Challenge</title>
      <link>https://uvacs2102.github.io/clauses/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/clauses/</guid>
      <description>&lt;p&gt;Henry Spece has solved the challenge about proving the length of the
longest satisfiable formula!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightg&#34;&gt;
&lt;strong&gt;Challenge 6.&lt;/strong&gt; (From &lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps3_solutions.pdf&#34;&gt;PS3 Solutions&lt;/a&gt;) Provide a full and convincing proof for Problem 11.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The proof is here: &lt;a href=&#34;https://uvacs2102.github.io/docs/challenge6/henry.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chicken vs. Egg Challenge</title>
      <link>https://uvacs2102.github.io/chickens/</link>
      <pubDate>Tue, 27 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/chickens/</guid>
      <description>&lt;p&gt;The chicken/egg challenge:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightg&#34;&gt;
&lt;strong&gt;Challenge 3.&lt;/strong&gt; (From &lt;a href=&#34;https://uvacs2102.github.io/class8&#34;&gt;Class 8&lt;/a&gt;) Apparently, people were not entirely convinced by my
proof sketch in class that the egg came before the chicken.  So, we&amp;rsquo;ll
make it a challenge problem to write the best proof that answers the
question of &amp;ldquo;which came first, the chicken or the egg?&amp;rdquo; (That is, you
can either prove the egg came first, or prove the chicken came first).
A convincing proof would need to include clear definitions of &amp;ldquo;chicken&amp;rdquo;
and &amp;ldquo;egg&amp;rdquo;, and use inference rules, as well as axioms based on
biological assumptions (clearly stated), to make an irrefutable argument
supporting your position.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The challenge remains a conundrum, but several promising answers have
been received:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tony Yang&amp;rsquo;s &lt;a href=&#34;https://uvacs2102.github.io/docs/challenge3/tonyyang.pdf&#34;&gt;Proof that the Chicken Came First&lt;/a&gt; (&lt;font color=&#34;gold&#34;&gt;&amp;#x2605; &amp;#x2605;&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Milan Bharadwaj&amp;rsquo;s &lt;a href=&#34;https://uvacs2102.github.io/docs/challenge3/milan.pdf&#34;&gt;Proof that Neither Came First&lt;/a&gt; (&lt;font color=&#34;gold&#34;&gt;&amp;#x2605; &amp;#x2605; &amp;#x2605;&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Jesse Alloy&amp;rsquo;s &lt;a href=&#34;https://uvacs2102.github.io/docs/challenge3/jesse.pdf&#34;&gt;Proof that the Egg Came First&lt;/a&gt; (&lt;font color=&#34;gold&#34;&gt;&amp;#x2605;&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Brian Li&amp;rsquo;s &lt;a href=&#34;https://uvacs2102.github.io/docs/challenge3/brian.pdf&#34;&gt;Proof that the Egg Came First&lt;/a&gt; (&lt;font color=&#34;gold&#34;&gt;&amp;#x2605;&lt;/font&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these are interesting answers, worthy of some bonus credit, but
none completely close the debate.  (I&amp;rsquo;ll provide my alternative proof in
&lt;a href=&#34;https://uvacs2102.github.io/class11&#34;&gt;Class 11&lt;/a&gt;.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 11: Strong Induction</title>
      <link>https://uvacs2102.github.io/class11/</link>
      <pubDate>Tue, 27 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class11/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thursday&amp;rsquo;s Class&lt;/strong&gt; may include review for Exam 1.  Before 6:59pm
  Wednesday, send me topics you would like to review:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fewer than 10 total requests: class is not being sufficiently challenged and we should be doing more difficult material (except for the 10 requestors who get exam exemptions).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;exactly 10 total requests: all requestors get automatic exam exemptions, review requested topics.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;more than 10 requests implies we should spend Thursday’s class on reviewing requested topics, no exam exemptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Friday, 3:30pm&lt;/strong&gt; (Rice Hall Auditorium): &lt;a href=&#34;http://www.cs.cornell.edu/~eva/&#34;&gt;Eva Tardos&lt;/a&gt; (Cornell University), &lt;em&gt;Learning and
  Efficiency of Outcomes in Games&lt;/em&gt;.  (She could definitely help you
  answer questions 7-9 on &lt;a href=&#34;https://uvacs2102.github.io/docs/ps5.pdf&#34;&gt;PS5&lt;/a&gt;!)&lt;/p&gt;

&lt;h3 id=&#34;exam-1&#34;&gt;Exam 1&lt;/h3&gt;

&lt;p&gt;Exam 1 will be in class on Thursday, 6 October.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources.&lt;/strong&gt; You will be permitted to use a single paper page of notes
that you prepare and bring to the exam.  It is fine to collaborate with
others to prepare your notes.  The page should be no larger than a US
Letter size page ($8.5 \times 11$ inches), and you may write (or
print) on both sides of the page.  No other resources are permitted
during the exam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content.&lt;/strong&gt; The problems on the exam will cover material from Classes
  1&amp;ndash;11, Problem Sets 1&amp;ndash;5 (including the provided solutions), and MCS
  Chapters 1&amp;ndash;5.  Everything on the exam will be something you have seen
  in at least two of these (Classes, Problem Sets, and MCS Book), and
  most of the exam will be things you have seen in all three.  If you
  understand the problems on the problem sets and questions on the class
  notes well enough to be able to answer similar questions, you should
  do well on the exam.&lt;/p&gt;

&lt;p&gt;The main topics the exam will cover include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Propositions, axioms, and proofs (you should understand what each of
these are and how to define them precisely)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inference rules (how to determine and show if an inference rule is
sound or unsound, how to correctly use inference rules in a proof)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical formula (how to interpret logical formulas and convert English
statements into logic, determine the validity or satisfiability of a
formula, and show equivalence or non-equivalence of two formulas)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical quantifiers (how to reason about logical formula using
$\forall$ and $\exists$, including showing logical equivalence and
implication)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Proof methods (you should be able to read and write proofs that use
direct proof, contrapositive proof, and proof by contradiction)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Well ordering (you should be able to explain what it means for a set
to be well ordered, determine if a given set and operator is well
ordered, and be able to construct proofs using the well ordering
principle and identify flaws in misuses of the well ordering
principle)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Induction (you should understand mathematical induction and be able to
construct proofs using induction and identify flaws in misuses of
induction in proofs)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For most students, I believe the best way to prepare for the exam will
be to (1) go over the problem sets and their solutions, and make sure
you understand well any of the problems you did not get before; (2) go
through the questions in the class notes and convince yourself you can
answer them well; (3) re-read chapters of the book, solving the
associated practice problems, especially for any sections on topics
where you had difficulty on the problem sets.  If you do #1 and
understand well the problems on the problem set, you should be confident
you&amp;rsquo;ll do well on the exam; if you struggled on the problem sets, you
would benefit from doing #2 and #3 as well.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;350db86117144d179c964584b50b9696&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class11.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;The strong induction example was based on &lt;a href=&#34;http://www.people.vcu.edu/~rhammack/BookOfProof/Induction.pdf&#34;&gt;Chapter 10: Induction from the Book of Proof&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;induction-practice&#34;&gt;Induction Practice&lt;/h2&gt;

&lt;p&gt;Take-Away Game: start with $n$ sticks; at each turn a player must remove
1, 2 or 3 sticks; player who takes the last stick wins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prove: for a Take-Away game with any initial number of sticks, $n$, either
Player 1 has a winning strategy or Player 2 does.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove: Player 1 has a winning strategy for a Take-Away game with $n$ sticks, if \bigfillin.  Otherwise, Player 2 has a winning strategy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;strong-induction-principle&#34;&gt;Strong Induction Principle&lt;/h1&gt;

&lt;p&gt;Let $P$ be a predicated on $\mathbb{N}$.  If&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(0)$ is true, and&lt;/li&gt;
&lt;li&gt;$(\forall m \in \mathbb{N}, m \le n . P(n)) \implies P(n + 1)$ for all $n \in \mathbb{N}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(m)$ is true for all $m \in \mathbb{N}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Show that &lt;em&gt;strong&lt;/em&gt; induction is not actually stronger than regular induction.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;Prove that a tree (fully-connected graph with no cycles in it) with $n$
nodes has $n - 1$ edges.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Inverting Relations Challenge Solved!</title>
      <link>https://uvacs2102.github.io/challenge4/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/challenge4/</guid>
      <description>&lt;p&gt;Challenge 4 has been solved by Henry Spece!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightg&#34;&gt;
&lt;strong&gt;Challenge 4.&lt;/strong&gt; (From &lt;a href=&#34;https://uvacs2102.github.io/class9&#34;&gt;Class 9&lt;/a&gt;) How many self-inverting relations, &lt;em&gt;R&lt;/em&gt;: &lt;em&gt;N&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt; &amp;rarr; &lt;em&gt;N&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt;, are there?  (Where &lt;em&gt;N&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt; is the set of all non-negative integers less than &lt;em&gt;k&lt;/em&gt;, and a relation is self-inverting if &lt;em&gt;R&lt;/em&gt; = &lt;em&gt;R&lt;/em&gt;&lt;sup&gt;-1&lt;/sup&gt;.)
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Henry&amp;rsquo;s answer is below:&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;*(&lt;em&gt;n&lt;/em&gt;+1)/2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;For each element in the domain, the number of &amp;ldquo;connection&amp;rdquo; possibilities
for that element to each element of the codomain (given that it can
either be related or not related to a codomain element) is 2&lt;em&gt;n&lt;/em&gt;, where
&lt;em&gt;n&lt;/em&gt; is the number of codomain elements.&lt;/p&gt;

&lt;p&gt;This includes the possibility of the element connecting to itself,
because there are two possibilities involving self connection, and
2&lt;sup&gt;(&lt;em&gt;n&lt;/em&gt;-1)&lt;/sup&gt; possibilities for connection to non-identical
elements.  The product of these two results in
2*2&lt;sup&gt;(&lt;em&gt;n&lt;/em&gt;-1)&lt;/sup&gt; = 2&lt;sup&gt;n&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;For each following element in the domain, the relationship with all
previous elements which have been assigned relationships is fixed.  For
example, if element &lt;em&gt;a&lt;/em&gt; in the domain is related to element
&lt;em&gt;b&lt;/em&gt; in the codomain, then element &lt;em&gt;b&lt;/em&gt; in the domain must
be related to element &lt;em&gt;a&lt;/em&gt; in the codomain.  This applies equally
if element &lt;em&gt;a&lt;/em&gt; in the domain is not related to element &lt;em&gt;b&lt;/em&gt;
in the codomain, because then element &lt;em&gt;b&lt;/em&gt; in the domain must also
not be related to element &lt;em&gt;a&lt;/em&gt; in the codomain, or the relation
would not be self-inverting.&lt;/p&gt;

&lt;p&gt;All other relationships between our second element and elements of the
codomain are still free to change, though, leaving
2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;-1&lt;/sup&gt; combinations for the second element considered.&lt;/p&gt;

&lt;p&gt;This pattern continues &lt;em&gt;n&lt;/em&gt; times in total, and by multiplying
these possibilities, we get&lt;/p&gt;

&lt;p&gt;2&lt;sup&gt;n&lt;/sup&gt; * 2&lt;sup&gt;n-1&lt;/sup&gt; * 2 &lt;sup&gt;n-2&lt;/sup&gt; &amp;hellip; * 2&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Which is the same as 2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt; + (&lt;em&gt;n&lt;/em&gt;-1) + (&lt;em&gt;n&lt;/em&gt;-2)
+ &amp;hellip; + 2 + 1&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;By reversing the addition sequence we get that the exponent of 2 is the
sum of all numbers from 1 to &lt;em&gt;n&lt;/em&gt;, which is equal to
&lt;em&gt;n&lt;/em&gt;*(&lt;em&gt;n&lt;/em&gt;+1)/2.&lt;/p&gt;

&lt;p&gt;Hence, the number of self-inverting relations for a set of size
&lt;em&gt;n&lt;/em&gt; must be 2&lt;sup&gt;(&lt;em&gt;n&lt;/em&gt;*(&lt;em&gt;n&lt;/em&gt;+1)/2)&lt;/sup&gt;.
   &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;Congratulations to Henry Spece for solving the challenge!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 5</title>
      <link>https://uvacs2102.github.io/ps5announce/</link>
      <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps5announce/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem Set 5&lt;/strong&gt; is &lt;a href=&#34;https://uvacs2102.github.io/docs/ps5.pdf&#34;&gt;now posted&lt;/a&gt;, and is due on &lt;strong&gt;Friday, 30
  September at 6:29pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 10: In(tro)duction</title>
      <link>https://uvacs2102.github.io/class10/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class10/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps4&#34;&gt;&lt;strong&gt;Problem Set 4&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next week, you should finish reading MCS Chapter 5 (Induction).  Another
presentation of Induction is &lt;a href=&#34;http://www.people.vcu.edu/~rhammack/BookOfProof/Induction.pdf&#34;&gt;Chapter 10 from the Book of
Proof&lt;/a&gt;
(you are not required to read this, but it is encouraged and has lots
more examples of proofs by induction).&lt;/p&gt;

&lt;p&gt;Exam 1 will be in class on Thursday, 6 October.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;06f4be58f3984fa2b5e65cfaa9525667&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class10.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.people.vcu.edu/~rhammack/BookOfProof/Induction.pdf&#34;&gt;Chapter 10: Induction from the Book of Proof&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Onion, &lt;a href=&#34;http://www.theonion.com/article/bush-earmarks-15-billion-gold-stars-for-education-392&#34;&gt;Bush Earmarks 1.5 Billion Gold Stars For Education&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;power-sets-continued-from-class-9-class9&#34;&gt;Power Sets (continued from &lt;a href=&#34;https://uvacs2102.github.io/class9&#34;&gt;Class 9&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;power set&lt;/strong&gt; of $A$ ($\textrm{pow}(A)$) is the set of all subsets of
$A$: $B \in \textrm{pow}(A) \iff B \subseteq A$.&lt;/p&gt;

&lt;p&gt;Prove that the size of the power set of a set $S$ with $|S| = N$ is
$2^N$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof using Well-Ordering Principle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The goal is to prove for all sets $A$: $|\textrm{pow}(A)| = 2^{|A|}$.&lt;/p&gt;

&lt;p&gt;Recall (from &lt;a href=&#34;https://uvacs2102.github.io/class9&#34;&gt;Class 9&lt;/a&gt;) that $N_k = { n | n \in \mathbb{N} \wedge n &amp;lt; k } $ and $|\mathbb{N}_n| = n$.&lt;/p&gt;

&lt;p&gt;Because of the bijection between any set $A$ where $|A| = n$ to $\mathbb{N}_n$, we can prove the general property by  showing $\forall n \in \mathbb{N} \ldotp P(n)$ where $P(n) ::= |\textrm{pow}(\mathbb{N}_n)| = 2^n$.&lt;/p&gt;

&lt;p&gt;We follow the structure of every well-ordering proof:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the set of counterexamples:
$$
C ::= { n \in \mathbb{N} | \quad |\textrm{pow}(\mathbb{N}_n)| \neq 2^n }
$$&lt;/li&gt;
&lt;li&gt;Assume $C$ is $\fillin\fillin\fillin$.&lt;/li&gt;
&lt;li&gt;By the well-ordering principle, there must be some smallest element, $m \in C$.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reach a contradiction: we show that $\fillin\fillin\fillin$ holds.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since $m$ is the smallest element of $C$, $P(n)$ must hold for all $\fillin\fillin\fillin$.&lt;/li&gt;
&lt;li&gt;We know $P(0)$ is true since $\mathbb{N}_0 = \emptyset$ and $\textrm{pow}(\emptyset) = \fillin\fillin\fillin\fillin$.  We have, $|\textrm{pow}(\mathbb{N}_0)| =  \fillin\fillin = \fillin\fillin$, satisfying $P(0)$.&lt;/li&gt;
&lt;li&gt;Thus, $m &amp;gt; 0$.  This means $m - 1 \in \mathbb{N}$.&lt;/li&gt;
&lt;li&gt;So, we know $P(\fillin\fillin)$ holds.&lt;/li&gt;
&lt;li&gt;Thus, we can construct $\textrm{pow}(\mathbb{N}&lt;em&gt;{m})$ by keeping all the elements of $\textrm{pow}(\mathbb{N}&lt;/em&gt;{m - 1})$ and adding each of those elements with $(m-1)$ inserts.  More formally,
$$
\textrm{pow}(\mathbb{N}&lt;em&gt;m) = \textrm{pow}(\mathbb{N}&lt;/em&gt;{m - 1}) \quad \cup \bigcup&lt;em&gt;{S \in \textrm{pow}(\mathbb{N}&lt;/em&gt;{m - 1})} (S \cup \fillin\fillin\fillin)
$$
The size of this set is $2 |\textrm{pow}(\mathbb{N}&lt;em&gt;{m - 1})|$ since it contains two sets for each set in $\textrm{pow}(\mathbb{N}&lt;/em&gt;{m - 1})$ (the original one, and the one with $m-1$ added, which we know is a new set since $m - 1 \notin \mathbb{N}_{m - 1}$).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Since $P(m-1)$, we know $|\textrm{pow}(\mathbb{N}&lt;em&gt;{m - 1})| = \fillin\fillin\fillin$. The size of the new set, $|\textrm{pow}(\mathbb{N}&lt;/em&gt;{m})| = 2 \cdot 2^{m - 1} = 2^{m}$.  This means that $P(m)$ holds.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hence, $C$ must be empty.  We reached a contradiction using the well-ordering principle by showing the $P(m)$ holds for $m \in C$, which must mean the $C$ is empty.  If there are no counter-examples, then $P(n)$ holds for all $n \in \mathbb{N}$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;induction-principle&#34;&gt;Induction Principle&lt;/h1&gt;

&lt;p&gt;Let $P$ be a predicated on $\mathbb{N}$.  If&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(0)$ is true, and&lt;/li&gt;
&lt;li&gt;$P(n) \implies P(n + 1)$ for all $n \in \mathbb{N}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$P(m)$ is true for all $m \in \mathbb{N}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;template-for-induction-proofs&#34;&gt;Template for Induction Proofs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;State, &amp;ldquo;We prove by induction.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Define a predicate, $P(n)$.  This is the &lt;em&gt;induction hypothesis&lt;/em&gt;.  Our goal is to show that $P(n)$ is true for all $n \in \mathbb{N}$.&lt;/li&gt;
&lt;li&gt;Prove $P(0)$ is true.  (&lt;em&gt;base case&lt;/em&gt; or &lt;em&gt;basis step&lt;/em&gt;.)&lt;/li&gt;
&lt;li&gt;Prove that $P(n) \implies P(n + 1)$ for every $n \in \mathbb{N}$.  (&lt;em&gt;induction step&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Conclude that $P(n)$ is true for all $n \in \mathbb{N}$ by induction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How is the method of &lt;em&gt;proof by induction principle&lt;/em&gt; similar to and different from &lt;em&gt;proof by well-ordering principle&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&#34;induction-practice&#34;&gt;Induction Practice&lt;/h2&gt;

&lt;p&gt;Prove the non-negative integers are well ordered by the induction principle.&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;Prove the power set size property, $|\textrm{pow}(A)| = 2^{|A|}$, by
induction.&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 3 Comments</title>
      <link>https://uvacs2102.github.io/ps3comments/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps3comments/</guid>
      <description>&lt;p&gt;The solutions and comments for PS3 are now posted in collab: &lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps3_solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should find your graded assignment as a new PDF attachment with
markup on it in collab (if you submitted with teammates, please check
with your partners).&lt;/p&gt;

&lt;p&gt;The meaning of the scores is the same as for PS1 and PS2.  A score of 6
means you got everything we expected out of this assignment, and 5 means
you did well for the most part by had some answers that should have been
better.  Scores above 6 are for excellent work.  (In the gradebook,
collab sometimes shows the grades scaled by 100 for some buggy reason.
Although receiving a score of 100+ is possible in theory, no one
received more than 8 points for this assingment.  If you see a score
about 100, the meaning is that score divided by 100.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 9: Cardinality</title>
      <link>https://uvacs2102.github.io/class9/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class9/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;This week you should finish reading MCS Chapter 4 (section 4.5) and
Section 5.1.  We will discuss Induction (Section 5.1) next class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps4&#34;&gt;&lt;strong&gt;Problem Set 4&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9612efccd7d943e2acdc844eeac874f4&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class9.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightg&#34;&gt;
&lt;strong&gt;Challenge Problem.&lt;/strong&gt; How many self-inverting relations, &lt;em&gt;R&lt;/em&gt;: &lt;em&gt;N&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt; &amp;rarr; &lt;em&gt;N&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt;, are there?  (Where &lt;em&gt;N&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt; is the set of all non-negative integers less than &lt;em&gt;k&lt;/em&gt;, and a relation is self-inverting if &lt;em&gt;R&lt;/em&gt; = &lt;em&gt;R&lt;/em&gt;&lt;sup&gt;-1&lt;/sup&gt;.)
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;relation-practice&#34;&gt;Relation Practice&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;inverse&lt;/em&gt; of a relation $R: A \rightarrow B, G \subseteq A \times B$ is defined by reversing all the arrows:
$$
R^{-1}: B \rightarrow A, G^{-1} \subseteq B \times A
$$&lt;/p&gt;

&lt;p&gt;$$
(b, a) \in G^{-1} \iff \fillin\fillin\fillin\fillin
$$&lt;/p&gt;

&lt;p&gt;What does it mean if $R \equiv R^{-1}$?&lt;/p&gt;

&lt;h1 id=&#34;set-cardinality&#34;&gt;Set Cardinality&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Finite Cardinality.&lt;/strong&gt; If $A$ is a finite set, the &lt;em&gt;cardinality&lt;/em&gt; of
  $A$, written $|A|$, is the number of elements in $A$.&lt;/p&gt;

&lt;p&gt;Does this definition require adding a new fundamental set operation?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternate definition:&lt;/strong&gt; The &lt;em&gt;cardinality&lt;/em&gt; of the set
$$
N_k = { n | n \in \mathbb{N} \wedge n &amp;lt; k }
$$
is $k$.  If there is a &lt;em&gt;bijection&lt;/em&gt; between two sets, they have the same
cardinality.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;surjective relation&lt;/em&gt; between $A$ and $B$ what do we know
about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;surjective function&lt;/em&gt; between $A$ and $B$ what do we know
about their cardinalities?&lt;/p&gt;

&lt;!--page--&gt;

&lt;p&gt;If there is a &lt;em&gt;total surjective function&lt;/em&gt; between $A$ and $B$ what do we know
about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;If there is a &lt;em&gt;total surjective injective function&lt;/em&gt; between $A$ and $B$
what do we know about their cardinalities?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What is the cardinality of $A \cup B$?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;power-sets&#34;&gt;Power Sets&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;power set&lt;/strong&gt; of $A$ ($\textrm{pow}(A)$)is the set of all subsets of $A$:
$$
B \in \textrm{pow}(A) \iff B \subseteq A.
$$&lt;/p&gt;

&lt;p&gt;Prove that the size of the power set of a set $S$ with $|S| = N$ is
$2^N$ using the well-ordering principle.  (See MCS 4.5.1 for an
alternate proof.)&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Survey Questions (Part 3)</title>
      <link>https://uvacs2102.github.io/surveyquestions3/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/surveyquestions3/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s the third (and final!) installment of responses to questions
submitted in the registration surveys (see &lt;a href=&#34;https://uvacs2102.github.io/surveyquestions&#34;&gt;Part 1&lt;/a&gt;
and &lt;a href=&#34;https://uvacs2102.github.io/surveyquestion2&#34;&gt;Part 2&lt;/a&gt; for the earlier responses).  If you
missed your chance to ask a question on the registration survey, or have
new questions now the course is further along, feel free to send them
(directly or anonymous is fine if you prefer).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;question&#34;&gt;
What does Professor Evans do in his free time?
   &lt;/div&gt;
   &lt;div class=&#34;answer&#34;&gt;
The meaning of &amp;ldquo;free time&amp;rdquo; is pretty strange for a professor, since all
your time is basically &amp;ldquo;free&amp;rdquo;.  You have remarkably few real
requirements on your time (other than showing up for class a couple
times a week every other semester, and filing an annual report once a
year), and can mostly &lt;a href=&#34;http://www.cs.virginia.edu/~evans/paradise/time/&#34;&gt;choose how you want to spend your
time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How you might view things more normally, one&amp;rsquo;s view of &amp;ldquo;free time&amp;rdquo;
changes a lot after having a family.  Before that, I would have
considered my teaching and research work as the main thing I do, and the
time I&amp;rsquo;m not doing that as &amp;ldquo;free time&amp;rdquo;, which I would mostly spend
&lt;a href=&#34;http://www.cs.virginia.edu/~evans/pictures/basement/&#34;&gt;playing&lt;/a&gt; and
&lt;a href=&#34;http://www.cs.virginia.edu/~evans/france98/&#34;&gt;wa&lt;/a&gt;&lt;a href=&#34;http://www.cs.virginia.edu/~evans/pictures/columbus/&#34;&gt;tc&lt;/a&gt;&lt;a href=&#34;http://www.cs.virginia.edu/~evans/pictures/korea2002/&#34;&gt;hi&lt;/a&gt;&lt;a href=&#34;http://www.cs.virginia.edu/~evans/pictures/za2010/&#34;&gt;ng&lt;/a&gt;
soccer, music, and mostly bad TV shows.&lt;/p&gt;

&lt;p&gt;Now, I view the main things I do as revolving around my children (4-year
old daughter and 1 &amp;frac12;-year old son), and can mostly schedule the rest
of my life around that (one of the perks of being a professor, instead
of having a real job!).  I do get to do lots of fun things with the kids
but don&amp;rsquo;t really consider that &amp;ldquo;free time&amp;rdquo; in the traditional sense.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;question&#34;&gt;
In the lecture, did you choose to mod(629) because its semiprime? And if so is that  why the graph became super scattered?
   &lt;/div&gt;
   &lt;div class=&#34;answer&#34;&gt;
   Great question!&lt;/p&gt;

&lt;p&gt;Since its been a while, here&amp;rsquo;s the picture from &lt;a href=&#34;https://uvacs2102.github.io/class1&#34;&gt;Class 1&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://uvacs2102.github.io/images/figure629.png&#34;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;It was generated by this (very ugly and brute force) python code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;
import numpy as np
import matplotlib.pyplot as plt

def ellip_curve():
    x = np.arange(-2, 10, 0.1);
    y = np.sqrt(x ** 3 + 7)
    plt.plot(x, y)
    plt.show()

def ellip_curve_field():
    xpoints = []
    ypoints = []
    G = 629
    for x in range(500):
        for y in range(500):
            if y ** 2 % G == (x ** 3 + 7) %  G:
                xpoints.append(x)
                ypoints.append(y)
    plt.plot(xpoints, ypoints, marker=&#39;+&#39;, linestyle=&#39;none&#39;, color=&#39;r&#39;)
    plt.show()

ellip_curve_field()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I picked 629 just because its one of my &lt;a href=&#34;http://dorina.org/&#34;&gt;favorite numbers&lt;/a&gt;, but the fact that is has two large factors (17 * 37) makes it produce a less regular graph than we would get for a more divisible number.  For example, here is the graph for modulus 628 (&lt;a href=&#34;http://www.wolframalpha.com/input/?i=factor+628&#34;&gt;2 * 2 * 157&lt;/a&gt;):
&lt;center&gt;&lt;img src=&#34;https://uvacs2102.github.io/images/figure628.png&#34;&gt;&lt;/center&gt;
which seems to have more patterns in it than the one for modulus 631 (&lt;a href=&#34;http://www.wolframalpha.com/input/?i=factor+631&#34;&gt;prime&lt;/a&gt;)
&lt;center&gt;&lt;img src=&#34;https://uvacs2102.github.io/images/figure631.png&#34;&gt;&lt;/center&gt;
Of course, the actual modulus values used for cryptosystems like bitcoin are
huge prime numbers (2&lt;sup&gt;256&lt;/sup&gt; - 2&lt;sup&gt;32&lt;/sup&gt; - 977 for bitcoin&amp;rsquo;s curve, which is otherwise the same as this one).
   &lt;/div&gt;
   &lt;div class=&#34;question&#34;&gt;
How long have you been teaching this course for?
   &lt;/div&gt;
   &lt;div class=&#34;answer&#34;&gt;
When you filled out the survey, about 3 days.  Now, its been about 4 weeks.  This is my first time teaching cs2102, but I&amp;rsquo;ve taught &lt;a href=&#34;https://www.cs.virginia.edu/evans/courses&#34;&gt;lots of other courses&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;question&#34;&gt;
More applications of Discrete Math (we talked about encryption, which was really interesting, but I would like to hear about more applications); Professor Evans&amp;rsquo; field of research and maybe its relation to Discrete Math
   &lt;/div&gt;
   &lt;div class=&#34;answer&#34;&gt;
Yes, I&amp;rsquo;ll try to keep this in mind and connect things to applications as
much as possible, but the gap between some of the theory we will learn
and applications is sometimes fairly large (that is, we need to get
fairly deep into the theory before we can connect it to applications
well).  That said, nearly every concept in this class does have clear connections to applications in computing, and we&amp;rsquo;ll see many examples, and I&amp;rsquo;m always happy to talk about more in office hours.&lt;/p&gt;

&lt;p&gt;My research is in computer security and applied cryptography, which is
entirely built on discrete math.  I will try to integrate this into some
of the lectures, but definitely have some classes toward the end of the
semester that get more into how discrete math is essential for
cryptography, and maybe even how some of the problems you&amp;rsquo;re learning
about in this class can be used to enable zero-knowledge proofs (that
is, proving that you know something without revealing anything about it)
and multi-party computation (enabling two people to compute a function
together without revealing any information about their inputs).
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;question&#34;&gt;
How to get an A?
   &lt;/div&gt;
   &lt;div class=&#34;answer&#34;&gt;
If you are able to demonstrate good understanding of the key concepts in
the course, and ability to use them to solve problems well, you&amp;rsquo;ll get
an A in the class.  Working effectively and consistently on the
assignments throughout the semester, of course, should help.  It is also
important to ask for help, focusing on your understanding of concepts,
not just on the immediate goal of being able to answer some question on
a problem set.  Most people will also benefit greatly by finding a study group to work with that works well together, where you are enhancing your
learning by explaining things to others, and testing the limits of your
understanding by having others question your assumptions and approaches.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;question&#34;&gt;
How much of this course is pure math, how much is computing, and how much is both? (I apologize for being so vague)
   &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
This is a math course (hence the name Discrete Mathematics), but also a
computer course (hence the course number cs2102).  I would claim all the
math we do in the class has some significant relevance to computing, but
it is also selected partly for relevance to computing and partly for
being interesting math (at least in my view, or that of the textbook
author&amp;rsquo;s).  I would say the decisions about what to include in the class
are based about 50% on relevance to computing and 50% on interesting
math (which would mean that something that is highly relevant to
computing but uninteresting math would not be covered in favor of
something that is less directly relevant to computing but interesting
math).
   &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
Are there available solutions to the textbook practice problems?
   &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
Not for most of them.  I understand that it would be very helpful to be
able to look at solutions after you try problems yourself.  We&amp;rsquo;ll
provide solutions to the problems assigned on problem sets, but if you
have other problems that you&amp;rsquo;ve tried to solve on your own and want to get feedback on your solution or suggestions for a good solution, feel free to send your solution (or attempt and explain what you are trying to do) to me.
   &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
I want to major in CS, but I am not sure I want to go into programming. What can Discrete Mathematics help with in deciding a different career path using a computer science degree?
   &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
I don&amp;rsquo;t expect this class will be that helpful directly in exploring
possible computing careers, but do hope it will give you the background
to succeed in many possible careers.  What I would say is that if you
enjoy and excel and the kinds of problems we do in this class, you are
well suited to careers in aspects of computing at the level of
designing, reasoning about, and defining systems, as well as in careers where you are reasoning about ideas.
   &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
How is the course related to coding?
   &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
I usually interpret &lt;em&gt;coding&lt;/em&gt; as the process of turning a well described
algorithm into code in some programming language.  This course won&amp;rsquo;t
help too much with that.  It is more related to &lt;em&gt;programming&lt;/em&gt;, which I
view as the process of finding a program that solves some problem.  This
includes both devising the algorithms and data structures to use, and
writing the code to implement them.  This course should help you get
better at constructing programs and reasoning about whether or not they
are correct.
   &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
Were you ever discouraged by failure while studying computer science?
   &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
Yes, many times!  As one memorable example, in my &amp;ldquo;Advanced Computer
Science&amp;rdquo; course in high school the teacher assigned us to implement
quicksort (I think this was in BASIC).  I couldn&amp;rsquo;t get it to work, and
got very frustrated, and refused to turn anything in.  Other students
turned in obviously broken programs, but got most credit for their
attempts.  I ended up getting a B in the course as a result, and being
very upset about it, but to no avail.  I did make my peace with
quicksort later, and its now one of my favorite algorithms (and I&amp;rsquo;ve
been privledged to meet its inventor, Tony Hoare, several times and even
have dinner with him).
   &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
Is this course harder to comprehend than other courses and what is the best way to prepare for this course and the exams and home work that will be provided?
   &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
I think this course is probably harder to comprehend than most courses
you take, both because of the material and my general approach to teaching.  For most students, the material in this course requires you to learn to think in new and unfamiliar ways, and to develop new mental models, not just to learn new things that fit well into your well-developed mental models.  My approach to teaching emphasizes challenging students to learn things by exploring things on your own after (hopefully) the right context has been developed to enable this.  I believe this is important for really learning things well, as well as developing your abilities to be creative thinkers.  But, this is different from what students typically expect and are accustomed to classes where you are given a lot more guidance about what to do and prescribed how to do things.
      &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
Will I be able to survive with Python experience but no previous Java experience?
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
Yes.  There is no requirement to have experience with either Python or Java, but just to have enough familiarity with some programming language to understand programs.
      &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
How are exams like?
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
The plan for the first exam is to have an in-class exam, with problems
that you should be well prepared to answer if you understand the problem
sets.  The exam questions will be similar to problem set questions, but
less difficult and complex given the limited time available during the
exam.
     &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
How far do you suggest we delve into the world of math in order to become the best computer scientist we can be? What other courses might help broaden our mathematical background in a way that is beneficial to our computer science studies?
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
The most direct classes that follow from this one are cs3102 (Theory of
Computation) and cs4102 (Algorithms).  Many computing courses involve a
lot of math including graphics (mostly linear algebra), cryptography
(mostly discrete math), and machine learning (includes more continuous
math, as well as lots of linear algebra and discrete math).  In general, any good math course should help develop your abstract thinking abilities in ways that will be useful in computing, although some will have more direct applications in computing than others.
     &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
How does the material we have learned so far relate to computer science as a whole?  Do programmers in the real world need to know how to write proofs
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
If the &amp;ldquo;real world&amp;rdquo; means a typical software developer in industry, then
it is pretty rare for a programmer to need to write a &amp;ldquo;formal proof&amp;rdquo; in
a mathematical style, but very common for a programmer to need to form a
strong argument that convinces others an idea is correct (this is really
what a proof is).  In terms of mathematical-style proofs, these are very
common in computing research and most research papers (even in systems
areas like networking and programming languages) include several proofs.&lt;br /&gt;
    &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
What is the best internship and extra-curricular programs relating to computer science that you would recommend?
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
There are lots of great opportunities at UVA.  I&amp;rsquo;ve been impressed with &lt;a href=&#34;http://hackcville.com/&#34;&gt;HackCville&lt;/a&gt; and the &lt;a href=&#34;http://cnsatuva.site/&#34;&gt;Computer and Network Security Club&lt;/a&gt; is great.&lt;/p&gt;

&lt;p&gt;Away from Charlottesvile, the &lt;a href=&#34;https://www.recurse.com/&#34;&gt;Recurse Center&lt;/a&gt;
is very cool (when I visited it was called Hacker School), and they have
students for summer sessions.&lt;/p&gt;

&lt;p&gt;Lots of students have great experiences doing research over the summer,
and there are many ways for students to get involved in research groups
and have paid positions over the summer (including &lt;a href=&#34;https://www.jeffersonswheel.org&#34;&gt;in
mine&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to mention specific companies for internships publicly
here, but there are some that I&amp;rsquo;ve heard students have great experiences
at, and other where the experiences are more mixed.  I&amp;rsquo;m happy to share
my thoughts on this privately during office hours (or make an
appointment to meet some other time).
    &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
Do you like turtles?
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
Absolutely!  Its &lt;a href=&#34;https://en.wikipedia.org/wiki/Turtles_all_the_way_down&#34;&gt;turtles all the way down&lt;/a&gt;.
    &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
How well have your past students performed in this course? I will admit that Day 1 was a bit intimidating for me.
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
I haven&amp;rsquo;t taught this course before, but in general students work hard
in my classes and hopefully learn a lot, and most students in my classes
end up getting As.  I don&amp;rsquo;t know what the distribution will be for this
class (and I don&amp;rsquo;t assign grades with a target distribution in mind),
but I hope to be able to have at least 2/3rds of the class get As (or at
least A-s), and the rest all get at least a B (but sometimes there is no
way to justify the desired grate).
   &lt;/div&gt;&lt;div class=&#34;question&#34;&gt;
Are any of the homeworks dropped?
    &lt;/div&gt;&lt;div class=&#34;answer&#34;&gt;
None are &amp;ldquo;dropped&amp;rdquo; per se, but the grades are computed with many
different weightings (some of which don&amp;rsquo;t count the early homeworks
heavily, and others which will only count the number of &amp;ldquo;green&amp;rdquo; star or
better homeworks) and generally the weighting that make your performance
look best is the one that will determine your grade.  All the homeworks
as important for learning the material well, but you shouldn&amp;rsquo;t be
stressed out about getting a low grade on one or two homeworks.
    &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anonymous Feedback Comments</title>
      <link>https://uvacs2102.github.io/anonymousfeedback/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/anonymousfeedback/</guid>
      <description>&lt;p&gt;This anonymous comment was submitted through collab:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Hello Professor!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have never been very strong at math, and whenever I take a math class I have to try very hard to keep up. This class has been the first time I have ever done a proof and I am having difficulty even getting a grasp of even the basics of this material. Would it be possible to work through more example problems in class in order to get an idea of how to apply these concepts? Also, I have sometimes have difficulty following the symbols that are used when you write in mathematical notation, would it be possible to explain some of the more complex symbols, or go a bit slower when writing them?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I understand what you are saying, and do appreciate the comment.&lt;/p&gt;

&lt;p&gt;First, on the notations.  If I use a notation that is unfamiliar, please
stop and ask for me to define it, or at least post on slack &lt;code&gt;#inclass&lt;/code&gt;
so someone else will notice and clarify it.  Notations are meant to be a
convenient and compact way to write things down, and should be
obfuscating the content.&lt;/p&gt;

&lt;p&gt;On the example problems, I think you are right that we should spend a
bit more time in lecture going through examples, but I also think
large-scale lectures like we have for this class are just about the
worst possible medium for doing this kind of technical work.  (I &lt;a href=&#34;https://web.archive.org/web/20160818072337/http://chronicle.com/blognetwork/castingoutnines/2012/04/03/udacity-cs101-whats-been-good/&#34;&gt;mostly
agree&lt;/a&gt;
with Robert Talbert&amp;rsquo;s description of &lt;a href=&#34;https://web.archive.org/web/20160315071640/http://chronicle.com/blognetwork/castingoutnines/2012/02/13/four-things-lecture-is-good-for/&#34;&gt;Four things lecture is good
for&lt;/a&gt;
and that lectures are a terrible way to cover material and transfer
information.)&lt;/p&gt;

&lt;p&gt;The reason large-scale lectures are such a bad format for going through
technical examples and learning from them is that the way to learn from
examples is to understand each step by figuring it out yourself, with
the right leading questions to get you to that step.  And, problems
don&amp;rsquo;t have just one way of solving them, so you don&amp;rsquo;t want to go through
a pre-set sequence of steps, but find a path to a solution that makes
most sense for whoever is working on it.  Spending lecture time going
through techincal examples inevitably will be boring for a significant
fraction of the class (that could already solve that problem on their
own), and will be bewildering for some other fraction of the class (that
misses some step in the explanation or is thinking about the problem in
some other way).  The best way to learn from examples is to go through
them in very small groups (ideally one-on-one), where everyone can
understand and contribute to each step.  The next best way is to read
examples at your own pace.  Going through written examples has the
benefit that everyone can go through at their own pace, and go back over
steps that didn&amp;rsquo;t make sense, and then try to work out the solution on
their own.  (The disadvantage is that if what is written doesn&amp;rsquo;t cover
some path that you are thinking about, or doesn&amp;rsquo;t explain something that
is unclear, then there is no way to get more information from the static
page.)&lt;/p&gt;

&lt;p&gt;The book (at least in my view) does do a great job with most example
problems, and has many good examples.  As I mentioned before, my
assumption is that if no one asks questions about content, including
examples, in the book, that means that everyone understood it and it is
not worthwhile to spend time in lecture repeating material you already
understand.&lt;/p&gt;

&lt;p&gt;Similarly, I expect everyone to read through the provided solutions to
the problem sets, which I hope are clear and understandable, but you
should ask questions if not.  Even if you did well on an assignment, it
should be worthwhile to read through the solutions, which often provide
more depth or different approaches to solving problems.&lt;/p&gt;

&lt;p&gt;So, the best thing to do is to come to office hours to go through
examples in person.  Next, to ask questions about examples from the book
or problems on the problem sets that are unclear, and then I&amp;rsquo;ll go
through those in class.&lt;/p&gt;

&lt;p&gt;That said, I do appreciate that it will sometimes be useful to go
through more basic examples in class, and will try and do this more, but
balance it with my goals of making class interesting and worthwhile for
people who are able to understand the text on their own.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>