<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/index.xml</link>
    <description>Recent content on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Class 1: What makes it go?</title>
      <link>https://uvacs2102.github.io/class1/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class1/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;Before &lt;strong&gt;Thursday&amp;rsquo;s class&lt;/strong&gt;: (visit &lt;a href=&#34;https://uvacs2102.github.io/class1&#34;&gt;https://uvacs2102.github.io/class1&lt;/a&gt; for the web version of these notes with links)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Join the &lt;a href=&#34;https://csmath.slack.com&#34;&gt;cs2102 slack group&lt;/a&gt; and set up
your profile with a pronouncable name (not your UVA email id) (setting
up your profile photo is encouraged, but not required).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read the &lt;a href=&#34;https://uvacs2102.github.io/syllabus&#34;&gt;Course Syllabus&lt;/a&gt; and post any questions or
comments you have on it on the course &lt;a href=&#34;https://csmath.slack.com&#34;&gt;slack group
(#general)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read the &lt;em&gt;Introduction&lt;/em&gt; and &lt;em&gt;Chapter 1: What is a Proof?&lt;/em&gt; from the
&lt;a href=&#34;https://uvacs2102.github.io/docs/mcs.pdf&#34;&gt;Mathematics for Computer Science
Book&lt;/a&gt; by Eric Lehman,
F. Thomson Leighton, and Albert R. Meyer (henceforth, &amp;ldquo;MCS&amp;rdquo;).  The
book is freely available on-line under a Creative Commons License.
Students are &lt;strong&gt;strongly encrouaged&lt;/strong&gt; to print out the readings to read
them more effectively on paper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before &lt;strong&gt;Friday, 6:29pm&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Read, print, and sign the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;Course Pledge&lt;/a&gt;.  You should print
the &lt;a href=&#34;https://uvacs2102.github.io/docs/pledge.pdf&#34;&gt;PDF version&lt;/a&gt; for signing, and submit a scan of
your signed pledge using Collab.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read Jeremy Kun&amp;rsquo;s &lt;a href=&#34;https://medium.com/@jeremyjkun/habits-of-highly-mathematical-people-b719df12d15e&#34;&gt;&lt;em&gt;Habits of Highly Mathematical People&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Submit a &lt;a href=&#34;https://goo.gl/forms/DR7nsouNf6sqqIK22&#34;&gt;Course Registration Survey&lt;/a&gt; (which includes some questions based on Kun&amp;rsquo;s essay).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;71562d80d01c4339b64b96e1c160c480&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;div class=&#34;notpdf&#34;&gt;

    &lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/class1.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
    &lt;/div&gt;

&lt;!--
&lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;460cc29c74a04fe3971ce197961981f9&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
--&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;div class=&#34;latex&#34;&gt;

### Notes and Questions

Why is most of the math used in computer science _discrete_?

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;Why is most of the math you have used in school previously &lt;em&gt;continuous&lt;/em&gt;?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;What are the differences between how scientists, lawyers, and
mathematicians establish ``&lt;em&gt;truth&lt;/em&gt;&amp;rdquo;?&lt;/p&gt;

&lt;div class=&#34;gap&#34;&gt;&lt;/div&gt;

&lt;p&gt;A &lt;em&gt;proposition&lt;/em&gt; is a statement that is either ________ or _________.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;predicate&lt;/em&gt; is a proposition whose truth may depend on the value of
variables.&lt;/p&gt;

&lt;h3 id=&#34;proof&#34;&gt;Proof&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;theorem&lt;/em&gt; is a ____________ that has been proven true.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;axiom&lt;/em&gt; is a proposition that is &lt;em&gt;accepted to be true&lt;/em&gt;.  Axioms are
not proven; they are &lt;em&gt;assumed&lt;/em&gt; to be true.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A &lt;em&gt;mathematical proof&lt;/em&gt; of a proposition is a chain of
  &lt;em&gt;logical deductions&lt;/em&gt; starting from a set of accepted &lt;em&gt;axioms&lt;/em&gt; that
  leads to the proposition.&lt;/p&gt;

&lt;h3 id=&#34;rules-of-inference&#34;&gt;Rules of Inference&lt;/h3&gt;

&lt;p&gt;The possible steps that can be used in a proof are logical deductions
based on inference rules.&lt;/p&gt;

&lt;p&gt;Inference rules are written as:
$$
\infer{\textrm{\emph{conclusion}}}{\textrm{\emph{antecedents}}}
$$
This means if everything on top of the rule is established to be true,
then you can conclude what is on the bottom.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modus Ponens&lt;/em&gt;: To prove &lt;em&gt;Q&lt;/em&gt;, (1) prove &lt;em&gt;P&lt;/em&gt; and (2) prove that &lt;em&gt;P&lt;/em&gt; implies &lt;em&gt;Q&lt;/em&gt;.  ($P \implies Q$ is a notation for $P$ implies $Q$).&lt;/p&gt;

&lt;p&gt;$$
\infer{Q}{P,\quad P \implies Q}
$$&lt;/p&gt;

&lt;p&gt;An inference rule is &lt;em&gt;sound&lt;/em&gt; if can never lead to a &lt;strong&gt;false&lt;/strong&gt; conclusion.&lt;/p&gt;

&lt;p&gt;Which of these inference rules are sound?&lt;/p&gt;

&lt;p&gt;$$
\infer{Q}{P}
\qquad
\infer{false}{P, P \implies Q}
\qquad
\infer{true}{P, NOT(P)}
\qquad
\infer{P \implies NOT(P)}{P, NOT(P)}
\qquad
\infer{NOT(Q) \implies P}{NOT(P) \implies Q}
$$&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;quote&#34;&gt;
&lt;em&gt;Through violence you may murder a liar but you can&amp;rsquo;t establish truth. Through violence you may murder a hater, but you can&amp;rsquo;t murder hate. Darkness cannot put out darkness. Only light can do that.&lt;/em&gt;&lt;br /&gt;
Martin Luther King, Jr., &lt;a href=&#34;http://kingencyclopedia.stanford.edu/encyclopedia/documentsentry/where_do_we_go_from_here_delivered_at_the_11th_annual_sclc_convention/&#34;&gt;&lt;em&gt;Where Do We Go From Here?&lt;/em&gt;, address to SCLC 16 August 1967&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Course Schedule</title>
      <link>https://uvacs2102.github.io/schedule/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/schedule/</guid>
      <description>&lt;p&gt;The schedule is subject to change as the semester progresses, and the
topics covered will be adjusted flexibly.  The exam dates will not
move other than for exceptional circumstances.&lt;/p&gt;

&lt;table style=&#34;font-size: 80%&#34;&gt;
&lt;tr bgcolor=&#34;#CCC&#34;&gt;&lt;td&gt;&lt;b&gt;Date&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Class&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Due [Friday 6:29pm unless noted]&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 22 Aug 2017&lt;/td&gt;&lt;td&gt;  1. Discrete Math, Proof&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;Thursday, 24 Aug 2017&lt;/td&gt;&lt;td&gt; 2. Methods of Proof    &lt;/td&gt;&lt;td&gt; &lt;a href=&#34;https://goo.gl/forms/DR7nsouNf6sqqIK22&#34;&gt;Registration Survey&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 29 Aug 2017&lt;/td&gt;&lt;td&gt;  3. Well Ordering Principle &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;Thursday, 31 Aug 2017&lt;/td&gt;&lt;td&gt;  4. Logical Formulas&lt;/td&gt;&lt;td&gt; PS1 (MCS Ch 1, classes 1 and 2)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 5 Sep 2017&lt;/td&gt;&lt;td&gt;   5. CNF, Quantifiers, and Proofs       &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;      
&lt;tr&gt;&lt;td&gt;Thursday, 7 Sep 2017&lt;/td&gt;&lt;td&gt;  6. Review &lt;/td&gt;&lt;td&gt; PS2 (MCS Ch 2-3.5, classes 3-4)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 12 Sep 2017&lt;/td&gt;&lt;td&gt;  7. Sets&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;Thursday, 14 Sep 2017&lt;/td&gt;&lt;td&gt; 8. Functions and Relations&lt;/td&gt;&lt;td&gt; PS3 (MCS Ch 3, classes 5-6)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 19 Sep 2017&lt;/td&gt;&lt;td&gt;  9. Cardinality of Finite Sets&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;   
&lt;tr&gt;&lt;td&gt;Thursday, 21 Sep 2017&lt;/td&gt;&lt;td&gt; 10. Induction&lt;/td&gt;&lt;td&gt; PS4 (MCS Ch 4.1-4.4, lecture 7-8)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 26 Sep 2017&lt;/td&gt;&lt;td&gt;  11. Strong Induction&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;    
&lt;tr&gt;&lt;td&gt;Thursday, 28 Sep 2017&lt;/td&gt;&lt;td&gt; 12. Review&lt;/td&gt;&lt;td&gt;PS5 (MCS Ch 4.5, 5, classes 9-10)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 3 Oct 2017&lt;/td&gt;&lt;td colspan=2 bgcolor=&#34;#FFEBCD&#34; style=&#34;text-align: center;&#34;&gt;Reading Days &lt;/td&gt;&lt;/tr&gt;  
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Thursday, 5 Oct 2017&lt;/b&gt;&lt;/td&gt;&lt;td colspan=2 bgcolor=&#34;#FFAAAA&#34; style=&#34;text-align: center;&#34;&gt;Exam 1 (in class) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 10 Oct 2017&lt;/td&gt;&lt;td&gt;  13. State Machines    &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;      
&lt;tr&gt;&lt;td&gt;Thursday, 12 Oct 2017&lt;/td&gt;&lt;td&gt; 14. Invariant Principle&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;Tuesday, 17 Oct 2017&lt;/td&gt;&lt;td&gt;  15. Recursive Data Types&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;       
&lt;tr&gt;&lt;td&gt;Thursday, 19 Oct 2017&lt;/td&gt;&lt;td&gt; 16. Structural Induction&lt;/td&gt;&lt;td&gt; PS6 (MCS Ch 6, class 13-14)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 24 Oct 2017&lt;/td&gt;&lt;td&gt;  17. Infinite Sets&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;Thursday, 26 Oct 2017&lt;/td&gt;&lt;td&gt; 18. Uncountable Sets&lt;/td&gt;&lt;td&gt; PS7 (MCS Ch 7, class 15-16) &lt;/td&gt;&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 31 Oct 2017&lt;/td&gt;&lt;td&gt;  19. Infinite Infinities&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;Thursday, 2 Nov 2017&lt;/td&gt;&lt;td&gt;  20. Review&lt;/td&gt;&lt;td&gt; PS8 (MCS Ch 8, class 18-19)
&lt;tr&gt;&lt;td&gt;Tuesday, 7 Nov 2017&lt;/td&gt;&lt;td&gt;   21. Number Theory&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Thursday, 9 Nov 2017&lt;/b&gt;&lt;/td&gt;&lt;td colspan=2 bgcolor=&#34;#FFAAAA&#34; style=&#34;text-align: center;&#34;&gt; Exam 2 (in class) - covers through PS8&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 14 Nov 2017&lt;/td&gt;&lt;td&gt;  22. Cryptography&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;      
&lt;tr&gt;&lt;td&gt;Thursday, 16 Nov 2017&lt;/td&gt;&lt;td&gt; 23. Counting&lt;/td&gt;&lt;td&gt; 
&lt;tr&gt;&lt;td&gt;Tuesday, 21 Nov 2017&lt;/td&gt;&lt;td&gt;  24. Probability&lt;/td&gt;&lt;td&gt;PS9 (MCS Ch 9, classes 21-23) (due 6:29pm Wednesday, 23 Nov)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Thursday, 23 Nov 2017&lt;/td&gt;&lt;td colspan=2 bgcolor=&#34;#FFEBCD&#34; style=&#34;text-align: center;&#34;&gt; Thanksgiving Break&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 28 Nov 2017&lt;/td&gt;&lt;td&gt;  25. Computability&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;   
&lt;tr&gt;&lt;td&gt;Thursday, 30 Nov 2017&lt;/td&gt;&lt;td&gt;  26. Undecidability&lt;/td&gt;&lt;td&gt;PS&amp;Omega;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tuesday, 5 Dec 2017&lt;/td&gt;&lt;td&gt;   27. Wrap-Up&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;     
       
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Thursday, 7 Dec 2017&lt;/b&gt;&lt;/td&gt;&lt;td colspan=2 bgcolor=&#34;#FFAAAA&#34; style=&#34;text-align: center;&#34;&gt;Final Exam (9am-noon)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Scanning Advice</title>
      <link>https://uvacs2102.github.io/scanning/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/scanning/</guid>
      <description>&lt;p&gt;For many of the assignments in this class, you will need to submit
your assignment as a PDF file. For the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;Course Pledge&lt;/a&gt;, you
need to print out a page, sign it, and submit a scan of the page. For
the Problem Sets, you will need to submit your responses as a single
PDF file (this could be generated using a typesetting tool, but it is
also find to handwrite your solutions, and produce a scan to submit).&lt;/p&gt;

&lt;p&gt;If you have access to a scanner and can use that to generate a PDF,
that should produce good results. There are public scanners to use in
some of the UVA libraries including in Clemons Library.&lt;/p&gt;

&lt;p&gt;If you are careful though, it is also possible to generate a readable
PDF using a mobile phone camera.  One tool that works for this is
&lt;a href=&#34;https://www.camscanner.com/user/download&#34;&gt;CamScanner&lt;/a&gt; (available as a
free app for limited use, for Android, iPhone, and Windows Phone).
There are lots of other scanning apps that should work - see &lt;a href=&#34;https://www.cnet.com/how-to/best-scanning-apps-for-android-and-iphone/&#34;&gt;&lt;em&gt;The
best scanning apps for Android and
iPhone&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please look at the file you have generated before submitting it.  If
it does not look readable to you, please do not submit it, but figure
out how to generate a more readable PDF.  Submitting the Course Pledge
is a good opportunity to make sure you have figured out a way to
generate readable PDFs, since you will need to do this for the problem
sets also.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>https://uvacs2102.github.io/syllabus/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/syllabus/</guid>
      <description>

&lt;div class=&#34;printing&#34;&gt;&lt;a href=&#34;https://uvacs2102.github.io/docs/syllabus.pdf&#34;&gt;PDF for Printing&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;cs2102: Discrete Mathematics&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;University of Virginia&lt;/em&gt;, Fall 2017&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meetings:&lt;/strong&gt; Tuesdays and Thursdays, 2:00-3:15pm in Chemistry 402.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Objective.&lt;/strong&gt; The goal of this course is to help students to
  understand, explain, and apply the foundational mathematical concepts
  at the core of computer science.&lt;/p&gt;

&lt;p&gt;The skills students learn in this course are essential for later courses
  (especially CS 3102 and CS 4102, but also in other courses), where they
  will be used to reason about and develop algorithms, prove properties
  about programs, and understand the limits of different models of
  computation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expected Background:&lt;/strong&gt; The official prerequisite for this course is
  earning credit for CS 1110, 1111, 1112 or 1120 with a grade of C- or
  higher.  If you have not satisfied the official prerequisite, you need
  permission from the instructor to enroll in the class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Materials:&lt;/strong&gt; The primary textbook is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eric Lehman, F. Thomson Leighton, and Albert R. Meyer. &lt;a href=&#34;../docs/mcs.pdf&#34;&gt;&lt;em&gt;Mathematics for
Computer Science&lt;/em&gt;&lt;/a&gt;. (2017/6/15 version).  This book is
freely available on-line, and generously released under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;Creative
Commons Attribution-ShareAlike 3.0
License&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The course will mostly cover the first part of this book (Chapters
1-8), and some selected materials from later chapters (in particular
chapters 9, 15, 17).  In addition to that textbook, we will have
selected readings from other sources.&lt;/p&gt;

&lt;h2 id=&#34;staff&#34;&gt;Staff&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Teachers:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.cs.virginia.edu/evans&#34;&gt;David Evans&lt;/a&gt; (evans@virginia.edu, &lt;a href=&#34;http://www.cs.virginia.edu/evans/office&#34;&gt;Rice 507&lt;/a&gt;)&lt;br /&gt;
&lt;a href=&#34;http://www.cs.virginia.edu/~mohammad&#34;&gt;Mohammad Mahmoody&lt;/a&gt; (mohammad@virginia.edu, Rice 511)&lt;/p&gt;

&lt;p&gt;You can reach both of us using
&lt;a href=&#34;mailto://uvacs2102staff@gmail.com&#34;&gt;&lt;em&gt;uvacs2102staff@gmail.com&lt;/em&gt;&lt;/a&gt;. Please
use that address for course-related messages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assistant Teachers:&lt;/strong&gt;&lt;br /&gt;
&lt;div class=&#34;latex&#34;&gt;
Amar Singh,
Anna Wu,
Bhuvanesh Murali,
Colin Harfst,
Fan Feng,
Helen Simecek,
Henry Spece,
Jack Herd,
Joseph Tobin,
Michael Woon,
Nate Olsen,
Sarah Meng,
Sriram Dandu,
Xiao Zhang, Xueying Bai,
Yasasvini Puligundle,
Zheng Wang.
&lt;/div&gt;
&lt;div class=&#34;notpdf&#34;&gt;
&lt;table width=100% style=&#34;font-size: 85%;&#34;&gt;
&lt;tr align=&#34;bottom&#34;&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;Amar Singh&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;Anna Wu&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;&lt;a href=&#34;https://uvacs2102.github.io/images/staff/bhuvanesh.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/bhuvanesh.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Bhuvanesh&amp;nbsp;Murali&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/colin.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/colin.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Colin Harfst
&lt;/td&gt;
&lt;/tr&gt;
&lt;table width=100% style=&#34;font-size: 85%;&#34;&gt;
&lt;tr align=&#34;bottom&#34;&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;Fan Feng&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/helensimecek.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/helensimecek.jpeg&#34; width=&#34;128&#34;&gt;&lt;br&gt;
Helen Simecek&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/henryspece.png&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/henryspece.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;Henry Spece&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/jackherd.png&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/jackherd.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Jack Herd&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/josephtobin.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/josephtobin.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Joseph Tobin
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;table width=100% style=&#34;font-size: 85%;&#34;&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;&lt;a href=&#34;https://uvacs2102.github.io/images/staff/michaelwoon.png&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/michaelwoon.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Michael Woon
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;&lt;a href=&#34;https://uvacs2102.github.io/images/staff/nateolsen.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/nateolsen.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;Nate Olsen
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/sarahmeng.png&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/sarahmeng.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;Sarah Meng
&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
Sriram Dandu
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;table width=100% style=&#34;font-size: 85%;&#34;&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/xiao.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/xiao.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Xiao Zhang
&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/xueyingbai.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/xueyingbai.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Xueying Bai
&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/yash.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/yash.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Yasasvini&amp;nbsp;Puligundle
&lt;/td&gt;
&lt;td style=&#34;text-align: center; vertical-align: bottom;&#34;&gt;
&lt;a href=&#34;https://uvacs2102.github.io/images/staff/zhengwang.jpeg&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://uvacs2102.github.io/images/staff/zhengwang.jpeg&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;br&gt;
Zheng Wang
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Office Hours:&lt;/strong&gt; &lt;em&gt;The course staff is here to help you.&lt;/em&gt; Please don&amp;rsquo;t
wait until too late to take advantage of the available help or ask for
help. For nearly everyone, this course will involve learning new ways of
thinking that are dramatically different from those to which you are
accustomed.  It is natural to miss things, and then become lost since
new ideas build on previous ones.  Come to office hours early to get
help before you find yourself frustrated and confused.&lt;/p&gt;

&lt;p&gt;The office hours schedule will be &lt;a href=&#34;https://uvacs2102.github.io/officehours&#34;&gt;posted on-line&lt;/a&gt;, and it will
be kept updated throughout the semester.&lt;/p&gt;

&lt;h2 id=&#34;communications&#34;&gt;Communications&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Course Website:&lt;/strong&gt;
  &lt;a href=&#34;https://uvacs2102.github.io/&#34;&gt;&lt;em&gt;https://uvacs2102.github.io/&lt;/em&gt;&lt;/a&gt;.  All
  course materials will be posted on the course website.  This page is
  updated often and students are expected to visit it regularly. All
  lectures, notes and assignments for the course will be posted on the
  web site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slack:&lt;/strong&gt; &lt;a href=&#34;https://csmath.slack.com&#34;&gt;&lt;em&gt;https://csmath.slack.com&lt;/em&gt;&lt;/a&gt;.  We
  will use a slack group for &amp;ldquo;real-time&amp;rdquo; communication for quick help
  and discussion (including during lectures).  Unlike the course site,
  which is public and visible to the world, this group will only be
  visible to people in the class.  There are slack apps for web, iOS and
  Android.  We encourage students to ask questions about the classes and
  assignments by posting comments on slack, and the course
  staff will read and respond to questions there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; Feel free to email us with any personal questions or issues
  that should not be posted publicly. To reach both professors, use
  &lt;a href=&#34;mailto://uvacs2102staff@gmail.com&#34;&gt;&lt;em&gt;uvacs2102staff@gmail.com&lt;/em&gt;&lt;/a&gt;
  (please use this instead of our personal emails unless it is an
  issue that is specific to one of us). For general questions or
  issues that might be relevant for others in the class, it is better
  to post publicly to the course website or slack group (both so that
  others may be able to answer your question, and others may be able
  to see a response that will be useful to them).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calendar:&lt;/strong&gt; The course calendar is available &lt;a href=&#34;https://goo.gl/ZtQhVY&#34;&gt;as a Google
  calendar&lt;/a&gt;.
  Students are encouraged to incorporate this into your own calendar.  If you use Google Calendar, just click the &amp;ldquo;+&amp;rdquo; at the bottom right of the &lt;a href=&#34;https://goo.gl/ZtQhVY&#34;&gt;calendar page&lt;/a&gt;. If you use another calendar program, you can incorporate this calendar using ical.&lt;/p&gt;

&lt;h2 id=&#34;honor&#34;&gt;Honor&lt;/h2&gt;

&lt;p&gt;We believe strongly in the value of a &lt;em&gt;community of trust&lt;/em&gt;, and expect
all of the students in this class to contribute to strenghtening and
enhancing that community.  The course will be better for everyone if
everyone can assume everyone else is trustworthy. The course staff
starts with the assumption that all students at the university deserve
to be trusted.&lt;/p&gt;

&lt;p&gt;To ensure that expectations are clear to everyone, all students are
required to sign the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;course pledge&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;p&gt;The topics covered in cs2102 focus on developing the mathematical
foundation and skills that are most important for computer science.
Expected topics include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Propositions and proofs&lt;/li&gt;
&lt;li&gt;Proof methods (including proof by construction, contradiction, and induction)&lt;/li&gt;
&lt;li&gt;Logic (Boolean logic, logical formulas, quantifiers)&lt;/li&gt;
&lt;li&gt;Binary relations&lt;/li&gt;
&lt;li&gt;State machines&lt;/li&gt;
&lt;li&gt;Finite and infinite sets&lt;/li&gt;
&lt;li&gt;Number theory&lt;/li&gt;
&lt;li&gt;Counting techniques&lt;/li&gt;
&lt;li&gt;Probability theory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;assignments-and-exams&#34;&gt;Assignments and Exams&lt;/h2&gt;

&lt;p&gt;A detailed schedule is &lt;a href=&#34;https://uvacs2102.github.io/schedule&#34;&gt;maintained on the course website&lt;/a&gt; and
&lt;a href=&#34;https://goo.gl/ZtQhVY&#34;&gt;calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Key dates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most Fridays (6:29pm): There will be a homework assignment due on
Fridays, except for weeks when there are exams (and Thanksgiving
week).&lt;/li&gt;
&lt;li&gt;Thursday, 5 Oct: Exam 1 (in class)&lt;/li&gt;
&lt;li&gt;Thursday, 9 Nov: Exam 2 (in class)&lt;/li&gt;
&lt;li&gt;Thursday, 7 Dec: Final Exam (9am-noon, scheduled by the registrar)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;grading&#34;&gt;Grading&lt;/h2&gt;

&lt;p&gt;Grading will be based on your performance on the exams and homework
assignments, with additional adjustments made based on exceptional
contributions to the class.&lt;/p&gt;

&lt;p&gt;Grades will be calculated with several different weightings, where your
grade is based primarily on whichever weighting results in the highest
score.  The range of possible weightings is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Homeworks: 15-40%&lt;/li&gt;
&lt;li&gt;Exam 1: 10-25%&lt;/li&gt;
&lt;li&gt;Exam 2: 15-30%&lt;/li&gt;
&lt;li&gt;Final Exam: 20-50%&lt;/li&gt;
&lt;li&gt;Class Contribution: 0-25%
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spend your energy focusing on what you are learning, instead of
worrying about your grade.&lt;/p&gt;

&lt;p&gt;Although the material we cover is challenging, and the pace may seem
overwhelming at times, we are confident that all students who put
effort into this class and take good advantage of available help will
do well.  Students who do especially outstanding work in the course
will be offered positions in our research groups
(&lt;a href=&#34;http://www.jeffersonswheel.org&#34;&gt;Dave&lt;/a&gt;,
&lt;a href=&#34;https://www.cs.virginia.edu/~mohammad/&#34;&gt;Mohammad&lt;/a&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cs2102 Course Pledge</title>
      <link>https://uvacs2102.github.io/pledge/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/pledge/</guid>
      <description>

&lt;div class=&#34;printing&#34;&gt;&lt;a href=&#34;https://uvacs2102.github.io/docs/pledge.pdf&#34;&gt;PDF for Printing&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&#34;honor-expectations&#34;&gt;Honor Expectations&lt;/h2&gt;

&lt;p&gt;As a student at the University of Virginia, you are trusted to be
honorable and expected to behave in ways that merit that trust. We take
advantage of this trust to provide a better learning environment for
everyone. In particular, students in cs2102 are expected to follow these
rules throughout the course:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will not lie, cheat or steal.&lt;/strong&gt; If I am unsure whether something
  would be considered lying, cheating or stealing, I will ask before
  doing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will carefully read and follow the collaboration policy on each
  assignment.&lt;/strong&gt; I will not abuse resources in ways that would be
  clearly detrimental to my own learning or unfair to other
  students. Viewing solutions from previous cs2102 courses is not
  permitted, except when explicitly allowed.&lt;/p&gt;

&lt;h2 id=&#34;other-expectations&#34;&gt;Other Expectations&lt;/h2&gt;

&lt;p&gt;In addition to the honor rules, students in cs2102 are also expected to
follow these behaviors:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will do what I can to help my fellow classmates learn.&lt;/strong&gt; Except
when specifically instructed not to, when other students ask me for
help, I will attempt to provide it. I will listen respectfully to
other&amp;rsquo;s ideas and discuss what I think is good or bad about their
answers. When I work with others, I will not give or accept answers
directly, but instead will make sure everyone understands enough to be
able to solve the problem themselves, and insist that others explain
things to me until I fully understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will ask for help.&lt;/strong&gt; I will make a reasonable effort to do things
  on my own first (or with classmates when permitted), but will ask
  the course staff for help before getting overly frustrated. There
  are many ways to ask for help including the office hours and the
  course slack group.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will be open minded and curious.&lt;/strong&gt; I understand that this course may
  do things in ways differently from what I expect, and may sometimes
  buck conventions that have been followed in other courses I have
  taken.  I will ask questions when things make me uncomfortable, but
  also accept that being surprised, facing uncertainty and adversity,
  and being challenged unreasonably are often beneficial for learning
  new ways of thinking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will value diversity and respect differences.&lt;/strong&gt; I understand that
  one of the benefits of being at the University is to be part of a
  vibrant community that encompasses a wide range of backgrounds,
  ethnicities, personal and family histories, and world views. I will
  contribute to that community by sharing things that are unique about
  me with others, fighting against any implicit biases I may have or
  that I observe in others, and being open to and respectful of people
  who are different from me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I grant the course staff permission to reproduce excerpts from my
submissions for teaching purposes.&lt;/strong&gt; My work will be attributed when it
is shown in a postive way, but may be used anonymously if it is used to
illustrate common pitfalls or other issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will provide useful feedback.&lt;/strong&gt; I realize that this will be
  attempting many new things, and that it is important that I let the
  course staff know what they need to improve the course. I will provide
  feedback either anonymously or by contacting the course staff
  directly.  &lt;strong&gt;I will fill out all requested surveys honestly and
  thoroughly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Sign:       ___________________________________________________   &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; Date: _____________&lt;/p&gt;

&lt;p&gt;Print name:  ____________________________________________________&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall 2017 Course</title>
      <link>https://uvacs2102.github.io/fall2017/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/fall2017/</guid>
      <description>&lt;p&gt;cs2102 will be offered in Fall 2017, co-taught by &lt;a href=&#34;https://www.cs.virginia.edu/~mohammad/&#34;&gt;Mohammad
Mahmoody&lt;/a&gt; and &lt;a href=&#34;https://www.cs.virginia.edu/evans&#34;&gt;David
Evans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For an idea what the course will be like, see last year&amp;rsquo;s &lt;a href=&#34;https://uvacs2102.github.io/f16&#34;&gt;course
site&lt;/a&gt;. Some things will change,
though. Course materials for Fall 2017 will appear hear when they are
available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 1</title>
      <link>https://uvacs2102.github.io/ps/ps1/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps1/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 2
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 2
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;For this assignment, you may work in groups of one to three students, so
long as all members of a group were born at least 100 kilometers apart.
(That is, if you work in a group of 3, no two of you may have been born
within 100 km of each other.)  If you work with teammates, you should
submit one assignment that represents your collective best work with all
of your names and UVA ids on it.  Everyone on a team should understand
everything you turn in for the assignment well enough to be able to
produce it completely on your own.  You are encouraged to use the
&lt;code&gt;#teaming&lt;/code&gt; channel to find suitable teammates.&lt;/p&gt;

&lt;p&gt;You may discuss the assignment with anyone you want and get help from
others, so long as it is help in the spirit of learning how to do things
yourself not getting answers you don&amp;rsquo;t understand.&lt;/p&gt;

&lt;p&gt;Remember to follow the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;course pledge&lt;/a&gt; you read and signed at
the beginning of the semester.  For this assignment, you may consult any
outside resources you want, including books, papers, web sites and
people.  You may consult an outside person (e.g., another friend who is
a CS major but is not in this class) who is not a member of the course
staff, but that person cannot type anything in for you and all work must
remain your own and outside sources should never give you specific
answers to problem set questions.  If you use resources other than the
class materials, lectures and course staff, you should document this
clearly on your submission.&lt;/p&gt;

&lt;p&gt;You are &lt;b&gt;strongly encouraged&lt;/b&gt; to start early and take advantage of
the scheduled &lt;a href=&#34;https://uvacs2102.github.io/officehours&#34;&gt;office hours&lt;/a&gt; for this course.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 1 of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class1&#34;&gt;Class
1&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class2&#34;&gt;Class 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps1.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab:
&lt;a href=&#34;https://collab.itc.virginia.edu/portal/site/e0b17949-c94c-466b-835a-196381f3f911/page/a8776e39-7cfd-4ae2-955a-a846a02d9557&#34;&gt;submission link&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all the problems on the next page.  For full credit, your answers
should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;proofs-and-certification&#34;&gt;Proofs and Certification&lt;/h2&gt;

&lt;p&gt;The introduction for the MCS book states,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Proofs also play a growing role in computer science; they are used to
certify that software and hardware will &lt;em&gt;always&lt;/em&gt; behave correctly,
something that no amount of testing can do.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The statement suggests &amp;ldquo;no amount of testing can certify software
will always behave correctly&amp;rdquo;.  Is this claim valid or invalid?  Support
your answer with a short justification.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The statement suggests &amp;ldquo;proofs can certify that software will
always behave correctly&amp;rdquo;.  Argue that this is not a correct statement.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;inference-rules&#34;&gt;Inference Rules&lt;/h2&gt;

&lt;p&gt;For each candidate rule below, state whether or not the rule is sound.
Support your answer with a convincing proof.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$\infer{R}{P \implies Q, Q \implies R}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{P}{(NOT(NOT(P)))}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{Q \implies P}{P \implies Q}$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\infer{NOT(Q) \implies P}{P}$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;proofs&#34;&gt;Proofs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Prove rigorously that if $x + y$ is even and $x$ is odd, $y$ must be odd.  (For this proof, you should be more rigorous than will be expected on most proofs in cs2102, showing all of the steps and justifying each step, similar to the level of rigor from the proof in Class 2.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The proof that $\sqrt{2}$ is irrational (Theorem 1.8.1) in the
book includes relies on this implication: $d^2$ is a multiple of two
implies $d$ is a multiple of 2.  Prove that this is a valid
implication to a skeptical reader.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Problem 1.4 (parts a, b, and c) from the MCS book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that for any non-negative real numbers, $x$ and $y$, if $xy
= n$ then the minimum of $x$ and $y$ is not greater than $\sqrt{n}$.
(Hint: prove by contradiction.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 2</title>
      <link>https://uvacs2102.github.io/ps/ps2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps2/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 9
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 9
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;For this assignment, you should work in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;three&lt;/em&gt;
students, so long as the &lt;em&gt;total number of siblings the members of your
group have is divisible by three&lt;/em&gt;.  Note that this means that someone
with, say, one sibling, should not work alone, but either needs to find
a teammate with two (or 5 or 8, etc.) siblings, or two teammates whose
sibling counts sum to the right number.  If you have half-siblings, you
can decide to count them as either 0, &amp;frac12;, or 1.&lt;/p&gt;

&lt;p&gt;If you work with teammates, you should submit one assignment that
represents your collective best work with all of your names and UVA ids
on it.  Everyone on a team should understand everything you turn in for
the assignment well enough to be able to produce it completely on your
own.  You are encouraged to use the &lt;code&gt;#teaming&lt;/code&gt; channel to find suitable
teammates.  You should make a legitimate effort to form a team that
satisfies the collaboration policy, but if you cannot find suitable
teammates, it is definitely better to submit an assignment on your own
than to not do the assignment!&lt;/p&gt;

&lt;p&gt;You may discuss the assignment with anyone you want and get help from
others, so long as it is help in the spirit of learning how to do things
yourself not getting answers you don&amp;rsquo;t understand.&lt;/p&gt;

&lt;p&gt;Remember to follow the &lt;a href=&#34;https://uvacs2102.github.io/pledge&#34;&gt;course pledge&lt;/a&gt; you read and signed at
the beginning of the semester.  For this assignment, you may consult any
outside resources you want, including books, papers, web sites and
people.  You may consult an outside person (e.g., another friend who is
a CS major but is not in this class) who is not a member of the course
staff, but that person cannot type anything in for you and all work must
remain your own and outside sources should never give you specific
answers to problem set questions.  If you use resources other than the
class materials, lectures and course staff, you should document this
clearly on your submission.&lt;/p&gt;

&lt;p&gt;You are &lt;b&gt;strongly encouraged&lt;/b&gt; to start early and take advantage of
the scheduled &lt;a href=&#34;https://uvacs2102.github.io/officehours&#34;&gt;office hours&lt;/a&gt; for this course.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 2 and Chapter 3 (through 3.5) of the
MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class3&#34;&gt;Class 3&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class4&#34;&gt;Class 4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps2.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab:
&lt;a href=&#34;https://collab.itc.virginia.edu/portal/site/e0b17949-c94c-466b-835a-196381f3f911&#34;&gt;submission link&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all 12 problems on the next two pages.  For full credit, your
answers should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;un-well-ordered-sets&#34;&gt;(Un)Well-Ordered Sets&lt;/h2&gt;

&lt;p&gt;For each of these question, answer if the given set and comparator is
&lt;em&gt;well-ordered&lt;/em&gt;. Support your answer with a brief, but clear and
convincing, argument.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The empty set; $&amp;lt;$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of integers less than 2102; $&amp;gt;$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of positive rational numbers with lowest terms,
$\frac{p}{q}$ where $q &amp;lt; 2102$; $&amp;lt;$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of positive rational numbers; to compare two rational
numbers, $a$, $b$, write them as fractions in lowest terms (which we
know exist because of the well-ordering principle on the integers!), $a
= \frac{p_a}{q_a}$, $b = \frac{p_b}{q_b}$. Then, $a \prec b$ iff $p_a
q_b &amp;lt; p_b q_a$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;well-ordering-principle-proofs-and-non-proofs&#34;&gt;Well-Ordering Principle Proofs (and Non-Proofs)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MCS Problem 2.2 (explain clearly which proof step is invalid and why).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(Similar to Problem 2.6) The &amp;ldquo;Exponential Losses&amp;rdquo; Casino has
chips with value \$1, \$2, \$4, \$8, \$16, \ldots, \$2$^{k}$, but has a
rule that bettors may not use more than one of the same value of chip to
make any bet.  Prove that all integer bets from \$1 to \$2$^{k + 1} - 1$ can
be made.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCS Problem 2.17.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;logical-operators&#34;&gt;Logical Operators&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How many 3-input, 1-output Boolean operators are there?  Support your
answer with a convincing, concise justification.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show that is it possible to implement the 3-input Boolean operator,
\smallcaps{parity}, defined below, using only the 2-input &lt;strong&gt;FTFF&lt;/strong&gt;
operator and \smallcaps{NOT}.
\begin{center}
\begin{tabular}{ccc|c}
$P$ &amp;amp; $Q$ &amp;amp; $R$ &amp;amp; \smallcaps{parity}$(P, Q, R)$ \ \hline
\T  &amp;amp; \T  &amp;amp; \T  &amp;amp; \T &lt;br /&gt;
\T  &amp;amp; \T  &amp;amp; \F  &amp;amp; \F &lt;br /&gt;
\T  &amp;amp; \F  &amp;amp; \T  &amp;amp; \F \&lt;br /&gt;
\T  &amp;amp; \F  &amp;amp; \F  &amp;amp; \T &lt;br /&gt;
\F  &amp;amp; \T  &amp;amp; \T  &amp;amp; \F &lt;br /&gt;
\F  &amp;amp; \T  &amp;amp; \F  &amp;amp; \T &lt;br /&gt;
\F  &amp;amp; \F  &amp;amp; \T  &amp;amp; \T \&lt;br /&gt;
\F  &amp;amp; \F  &amp;amp; \F  &amp;amp; \F &lt;br /&gt;
\end{tabular}
\end{center}
(Note that there are easy, clear ways to do this, and painful, tedious ways.  Try to find an easy, clear way, before spending a lot of effort on a painful, tedious way!)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;logical-formulas&#34;&gt;Logical Formulas&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Write the following natural language statement (from the Eighth
Amendment to the US Constitution) as a logical formula. Your goal is to
produce a simple and clear statement whose meaning matches what you
believe is the intent of the natural language statements.  If there are
logical ambiguities in the statement, explain them.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Excessive bail shall not be required, nor excessive fines
imposed, nor cruel and unusual punishments inflicted.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;logical-equivalences&#34;&gt;Logical Equivalences&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Determine if the following statements are logically equivalent, and
support your answer with a clear proof.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$$
Q \implies (P \implies R) \qquad \textrm{and} \qquad
(Q \implies P) \implies R
$$&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Given the following statements, prove $S$:
$$
Q,\quad
\neg P,\quad
L \implies P,\quad
Q \implies M,\quad
\neg(\neg Q \vee P) \implies \neg R,\quad
(\neg L \wedge M) \implies S \vee R
$$&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 3</title>
      <link>https://uvacs2102.github.io/ps/ps3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps3/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 16
September}.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).} 
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 16
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;For this assignment, you should work in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt;
students of your choice.  The only constraint on teams for PS3 is that
you may not work with anyone with you you worked on &lt;em&gt;both&lt;/em&gt; PS1 and PS2
(that is, the intersection of the sets of teammates you had for PS1,
PS2, and PS3 should be empty).&lt;/p&gt;

&lt;p&gt;The rest of the collaboration policy is identical to what it was on
&lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;PS2&lt;/a&gt;, and is not repeated here.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 3 (especially 3.4-3.6) of the MCS
book, and &lt;a href=&#34;https://uvacs2102.github.io/class5&#34;&gt;Class 5&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class6&#34;&gt;Class 6&lt;/a&gt; (which include some
material not in Chapter 3).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps3.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all 11 problems.  For maximum credit, your answers should be
correct, clear, well-written, and convincing.  The problems marked with
$(\star)$ are believed to be challenging enough that it is not necessary
to solve them well to get a ``green-star level&amp;rdquo; grade on this
assignment (although we certainly hope you will try and some will
succeed!)&lt;/p&gt;

&lt;h1 id=&#34;quantified-formulas&#34;&gt;Quantified Formulas&lt;/h1&gt;

&lt;p&gt;For each pair of logical formula given, state if the the formula is
&lt;em&gt;valid&lt;/em&gt; and if it is &lt;em&gt;satisfiable&lt;/em&gt;.  You should provide a brief argument
supporting your answer (enough to convince a reader you are not just
guessing!), but do not need to provide a thorough proof.&lt;/p&gt;

&lt;p&gt;$\mathbb{N}$ represents the non-negative integers = ${0, 1, 2,
\cdots }$.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$\forall x \in \mathbb{N} \ldotp \exists y \in \mathbb{N} \ldotp x = y + 1.$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\forall x \in \mathbb{N} \ldotp \forall y \in \mathbb{N} \ldotp \exists z \in \mathbb{N}\ldotp z = x + y$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\forall x \in \mathbb{N}\ldotp \exists y \in \mathbb{N}\ldotp \exists b \in {0, 1}\ldotp x = 2y + b$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\forall F \in \textrm{CNF}\ldotp \exists G \in \textrm{3CNF}\ldotp F \equiv G.$ (This means $F$ and $G$ are logically equivalent.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conjunctive-normal-form&#34;&gt;Conjunctive Normal Form&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a logical formula in Conjuctive Normal Form that is equivalent to:
$$(A \vee B) \implies C$$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a logical formula in 3CNF form that is equivalent to:
$$
A \vee \overline{B} \vee C \vee (\overline{D} \wedge E)$$
Use as few clauses as possible.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A circuit can be converted to a SAT formula by assigning a variable
label to each wire in the circuit, and using clauses to constrain the
variable values according to the circuit&amp;rsquo;s logic.  Consider a single
\smallcaps{AND} gate circuit shown below with inputs labeled $a_1$ and
$a_2$ and output labeled $x_1$. Logically, this means $x_1 = a_1 \wedge
a_2$ (but we can&amp;rsquo;t have an equality constraint like this in a SAT
formula).  Write a 3CNF formula that represents the AND gate.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{center}
\begin{circuitikz} \draw
(0,2) node&lt;a href=&#34;myand&#34;&gt;and port&lt;/a&gt; {}
(myand.in 1) node&lt;a href=&#34;a&#34;&gt;above left=.5cm&lt;/a&gt; {$a_1$}
(myand.in 2) node&lt;a href=&#34;b&#34;&gt;below left = .5cm&lt;/a&gt; {$a_2$}
(myand.out) node&lt;a href=&#34;c&#34;&gt;right = .1cm&lt;/a&gt; {$x_1$}
(a) -| (myand.in 1)
(b) -| (myand.in 2);
\end{circuitikz}
\end{center}&lt;/p&gt;

&lt;h2 id=&#34;sat-solving&#34;&gt;SAT Solving&lt;/h2&gt;

&lt;p&gt;For each of the formula, either (1) give a satisfying assignment, or (2)
state that it is not satisfiable.  (If you follow a smart strategy,
these can be solved by hand without a lot of tedious effort.  But, you
are welcome to use SAT solving programs to solve them, including the
&lt;a href=&#34;https://github.com/evansuva/simple-sat&#34;&gt;simple-sat&lt;/a&gt; solver from &lt;a href=&#34;https://uvacs2102.github.io/class6&#34;&gt;Class
6&lt;/a&gt;.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$(x_1 \vee x_2 \vee \overline{x_3}) \wedge (x_1 \vee \overline{x_2} \vee x_3) \wedge (x_1 \vee \overline{x_2} \vee \overline{x_3}) \wedge (x_1 \vee x_2 \vee \overline{x_4}) \wedge (x_1 \vee \overline{x_2} \vee x_4)$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$(x1 \vee x2 \vee x3) \wedge (x1 \vee x2 \vee \overline{x3}) \wedge
(x1 \vee \overline{x2} \vee x3) \wedge (x1 \vee \overline{x2} \vee
\overline{x3}) \wedge &lt;br /&gt;
(\overline{x1} \vee x2 \vee x3) \wedge
(\overline{x1} \vee x2 \vee \overline{x3}) \wedge (\overline{x1} \vee
\overline{x2} \vee x3) \wedge (\overline{x1} \vee \overline{x2} \vee
\overline{x3})$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;satisfaction&#34;&gt;Satisfaction&lt;/h2&gt;

&lt;p&gt;The length of the 3CNF formula is the number of clauses, and no clause
may be repeated.  (The order of literals within a clause doesn&amp;rsquo;t matter,
so the clauses $(x_1 \vee x_2 \vee x_3)$ and $(x_3 \vee x_1 \vee x_2)$
would count as the same clauses, but $(x_1 \vee x_2 \vee x_3)$ and
$(\overline{x_1} \vee x_2 \vee x_3$ are different clauses.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is the length of the &lt;em&gt;shortest&lt;/em&gt; unsatisfiable 3CNF formula
involving 3 variables?  (That is, each clause involves $x_1$, $x_2$, and
$x_3$, and your goal is to show that there exists an unsatisfiable
formula of length $l$, and any formula of length $&amp;lt; l$ is satisfiable.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) What is the length of the &lt;em&gt;longest&lt;/em&gt; satisfiable 3CNF
formula using $v$ variables?  An outstanding answer would include a
convincing proof (hint: well-ordering principle!) that there exists a
satisfiable formula with $v$ variables of length $l$, but no satisfiable
formula with $v$ variables of length $l + 1$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 4</title>
      <link>https://uvacs2102.github.io/ps/ps4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps4/</guid>
      <description>

&lt;p&gt;[Revised 18 Sept 3:15pm]&lt;/p&gt;

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 23
September}.  Follow the directions on \hyperlink{https://uvacs2102.github.io/pdfs/}{Generating PDFs} posted on the course site.
}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 23
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;For this assignment, you should work in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt;
students of your choice with no restrictions.  The rest of the
collaboration policy is identical to what it was on &lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;, and
is not repeated here.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Chapter 4 (up to Section 4.4) of the MCS
book, and &lt;a href=&#34;https://uvacs2102.github.io/class7&#34;&gt;Class 7&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class8&#34;&gt;Class 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps4.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the 9 problems as you can.  For maximum credit, your
answers should be correct, clear, well-written, and convincing.  The
problems marked with $(\star)$ are believed to be challenging enough
that it is not necessary to solve them well to get a ``green-star
level&amp;rdquo; grade on this assignment (although we certainly hope you will
try and some will succeed!)&lt;/p&gt;

&lt;h1 id=&#34;sets&#34;&gt;Sets&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;For each set $S$ defined below, indicate whether or not it is
equivalent to $A$, where $A$ and $B$ are any sets.  Support your answer
with a brief explanation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{quote}
\begin{enumerate}[a.]
\item $S = A \cup \emptyset$.
\item $S ::= { x | x \in A \wedge x \in \overline{B} }$
\item $S ::= { x | x \in A \wedge x \notin \overline{A} }$
\item $S ::= A \cap (B \cup A)$.
\item $S ::= A - (B \cap \overline{B})$.
\end{enumerate}
\end{quote}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use the definitions of the set operations to prove that for all sets
$A$ and $B$, $$A = (A \cap B) \cup (A - B).$$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/class7&#34;&gt;Class 7&lt;/a&gt;, we defined set difference as:
$$\forall x. x \in A - B \iff x \in A \wedge x \notin B.$$
Provide an alternate (but equivalent in meaning) definition of set
difference using only the other defined set operations (you may use any
of the union ($\cup$), intersection ($\cap$), and complement
($\overline{S}$) operations in your definition, but no other operations
or qualifiers).  A good answer will include a proof that shows your
definition is equivalent to the original set difference definition.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;functions-and-relations&#34;&gt;Functions and Relations&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;For each function described below, identify a &lt;em&gt;domain&lt;/em&gt; and &lt;em&gt;codomain&lt;/em&gt;
that make the function &lt;em&gt;total&lt;/em&gt;.  For example, for $f(x) ::= 1/x$ you
could correctly answer that the domain is $\mathbb{R} - { 0 }$ and
codomain is $\mathbb{R}$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{quote}
\begin{enumerate}[a.]
\item $f(x) ::= x + 1$&lt;/p&gt;

&lt;p&gt;\item $f(x) ::= \frac{x}{(x - 1)}$&lt;/p&gt;

&lt;p&gt;\item $f(S) ::= \textrm{ minimum}&lt;em&gt;{&amp;lt;}(S \cap \mathbb{N})$ where $\textrm{ minimum}&lt;/em&gt;{&amp;lt;}$ is defined for all sets $A$ that are well-ordered by $&amp;lt;$ as:
$$
\textrm{minimum}_{&amp;lt;}(A) = x \in A \textrm{ such that } \forall a \in A - { x } \ldotp x &amp;lt; a.
$$
and $&amp;lt;$ is a binary relation on the real numbers.
\end{enumerate}
\end{quote}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Consider the relation, $&amp;lt;$, with the domain set, ${ 1,
2, 3 }$ and codomain set, ${ 0, 1, 2 }$.&lt;/p&gt;

&lt;p&gt;\begin{enumerate}[a.]
\item Describe the graph of the relation.  Your description can be a
picture showing the graph, or some other clear way of defining that
graph.
\item Which of these properties does the relation have: {\em function},
{\em total}, {\em injective}, {\em surjective}, {\em bijective}. (You do
not need to provide a detailed proof, but should support your answer
with a very brief explanation.)
\end{enumerate}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Consider the relation, $\le$, with the domain set, $\mathbb{N}$ and
codomain set $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;\begin{enumerate}[a.]
\item Describe the graph of the relation.  (For this one, you won&amp;rsquo;t be able
to draw a complete picture since the domain set is infinite.  Instead,
your description can be a picture illustrating the graph in a clear way,
or some other clear way of defining that graph.)
\item Which of these properties does the relation have: {\em function},
{\em total}, {\em injective}, {\em surjective}, {\em bijective}. (You do
not need to provide a detailed proof, but should support your answer
with a very brief explanation.)
\end{enumerate}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give an example of a relation $R: A \rightarrow \overline{A}$ that is
bijective, for any set $A$.  (You should specify carefully the domain of
discourse, needed for $\overline{A}$ to be meaningfully defined.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--page--&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(Extracted from MCS Problem 4.23) Five basic properties of binary relations $R : A \rightarrow B$ are:
\begin{quote}
\begin{enumerate}[(1)]
\item $R$ is a surjection [$\ge 1$ in]
\item $R$ is an injection [$\le 1$ in]
\item $R$ is a function [$\le 1$ out]
\item $R$ is total [$\ge 1$ out]
\item $R$ is empty [$= 0$ out]
\end{enumerate}
\end{quote}
Below are some assertions about a relation $R$. For each assertion,
write the numbers (1, 2, 3, 4, 5 from above) of all properties above
that the relation $R$ &lt;em&gt;must&lt;/em&gt; have (that is, the properties that are
implied by the stated assertion); write ``none&amp;rdquo; if $R$ might not have
any of these properties.&lt;/p&gt;

&lt;p&gt;Variables $a, a_1, a_2, \cdots$ are elements of $A$, and $b, b_1, b_2,
\cdots$ are elements of $B$.&lt;/p&gt;

&lt;p&gt;The first answer is provided as an example.
\begin{quote}
\begin{enumerate}[a.]
\item $\forall a \ldotp \forall b \ldotp a R b.$ \qquad\qquad Answer: (1), (4)
\item $\neg(\forall a \ldotp \forall b \ldotp a R b).$
\item $\forall a \ldotp \exists b \ldotp a R b.$
\item $\forall b \ldotp \exists a \ldotp a R b.$
\item $R$ is a bijection.
\item $\forall a_1, a_2, b \ldotp (a_1 R b \wedge a_2 R b) \implies a_1 = a_2.$
\item $\forall a_1, a_2, b_1, b_2 \ldotp (a_1 R b_1 \wedge a_2 R b_2 \wedge b_1 \neq b_2) \implies a_1 \neq a_2.$
\end{enumerate}
\end{quote}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) Consider the sets $A$ and $B$ where $|A| = n$ and $|B| =
m$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{quote}
\begin{enumerate}[a.]&lt;/p&gt;

&lt;p&gt;\item Assuming $n = m$ (just for this sub-part), how many {\em bijective} relations are there $R: A \rightarrow B$.&lt;/p&gt;

&lt;p&gt;\item How many {\em total} functions are there $f: A \rightarrow B$.&lt;/p&gt;

&lt;p&gt;\item How many {\em partial} functions are there $f: A \rightarrow B$.  (Note
that the set of {\em partial} functions includes all {\em total} functions;
partial means there {\em may} be domain elements with no associated codomain
element.)&lt;/p&gt;

&lt;p&gt;\item How many {\em injective} relations are there $R: A \rightarrow B$.
\end{enumerate}
\end{quote}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 5</title>
      <link>https://uvacs2102.github.io/ps/ps5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps5/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 30
September}.  Unlike previous assignments, we will no longer be forgiving of submissions that do not follow the directions.  By now, everyone should know how to generate a readable PDF file and to put all of your teammate&#39;s name on the submission.
}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 30
September&lt;/strong&gt;.  The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;As with PS4, you should work in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt; students of
your choice with no restrictions.  The rest of the collaboration policy
is identical to what it was on &lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;, and is not repeated here.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Section 4.5 (Cadrinality of Finite Sets) and
Chapter 5 (Induction) of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class9&#34;&gt;Class 9&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class10&#34;&gt;Class
10&lt;/a&gt;.&lt;br /&gt;
   &lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps5.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the nine problems as you can.  For maximum credit, your
answers should be correct, clear, well-written, and convincing.  The
problem marked with $(\star\star)$ is challenging enough that it is not
necessary to solve them well to get a ``gold-star level&amp;rdquo; grade on this
assignment (although we certainly hope you will try and some will
succeed!)&lt;/p&gt;

&lt;h1 id=&#34;cardinality-of-finite-sets&#34;&gt;Cardinality of Finite Sets&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Assume $R: A \rightarrow B$ is an &lt;em&gt;total&lt;/em&gt; &lt;em&gt;injective&lt;/em&gt; relation
between $A$ and $B$.  What must be true about the relationship between
$|A|$ and $|B|$?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assume $R: A \rightarrow B$ is an &lt;em&gt;total&lt;/em&gt; &lt;em&gt;surjective&lt;/em&gt; &lt;em&gt;function&lt;/em&gt;
between $A$ and $B$.  What must be true about the relationship between
$|A|$ and $|B|$?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that for any two sets $A$ and $B$, $| A \times B | = |A| \cdot
|B|$.  (Recall the definition of set products from &lt;a href=&#34;https://uvacs2102.github.io/class8&#34;&gt;Class 8&lt;/a&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;induction&#34;&gt;Induction&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/ps/ps2&#34;&gt;Problem Set 2&lt;/a&gt; (Problem 6) you used the well-ordering
principle to prove that any non-negative integer value less than
$2^{k+1}$ can be written as $a_0 \cdot 2^0 + a_1 \cdot 2^1 + a_2 \cdot
2^2 + \cdots + a_k \cdot 2^k$ where all the $a_i$ values are either 0 or 1.  Prove the same property using induction.  (Hint: the induction
should be on $k$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove by induction that every non-empty finite set of rational
numbers has a minimum element.  (Bonus: explain why this does not
contradict the fact that the rational numbers are not well ordered.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A &lt;em&gt;convex polygon&lt;/em&gt; is a polygon where all line segments connecting
any two points in the polygon are fully contained in the polygon.  For
example, of the three polygons below, the left two are convex, but the
rightmost one is not.  Prove by induction that any convex polygon with
$n$ sides can be divided into $n - 2$ triangles.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;\begin{center}
\newdimen\R
\R=0.8cm
\begin{tikzpicture}[scale=1.0]
\node[draw, regular polygon, regular polygon sides=5] at (0,0) {Convex};
\node[draw, regular polygon, regular polygon sides=7] at (4.5,0) {Convex};
\node[draw, star, star points=6, star point ratio=.6]
at (9,0) {Concave};&lt;/p&gt;

&lt;p&gt;\end{tikzpicture}
\end{center}
\begin{comment}
\draw (1,0) &amp;ndash; (0,2) &amp;ndash; (3,3) &amp;ndash; (4,2.5) &amp;ndash; (2.5, -1) &amp;ndash; cycle;
\draw (1,0) &amp;ndash; (0,2) &amp;ndash; (2,3) &amp;ndash; (4,2.5) &amp;ndash; (2, 1.5) &amp;ndash; (4, 1) &amp;ndash; cycle;
\end{comment}&lt;/p&gt;

&lt;h1 id=&#34;donation-by-induction&#34;&gt;Donation by Induction&lt;/h1&gt;

&lt;p&gt;(The following questions are loosely inspired by the Stata Center
problem in Section 5.1.5, but any similarity to any real university is
purely coincidental.)&lt;/p&gt;

&lt;p&gt;Following the successful completion of the restoration of the Rotunda,
the Board of Transients of the highly prestigious University of East
Virginia, is embarking on a bold, new fund-raising initiative known as
the Cornerbrick Plan.  The highest priority is to tear down the
monstrous &lt;a href=&#34;http://www.streakingthelawn.com/2016/4/1/11330962/virginia-football-bronco-mendenhall-demolishes-scott-stadium-team-must-earn-it-april-fools&#34;&gt;Scotty
Stadium&lt;/a&gt;
to improve the view from the upper offices in Rice&amp;rsquo;s Theorem Hall.
Unfortunately, it is proving harder to attract donors to fund a
destruction project than it is to fund building something new that you
can name.&lt;/p&gt;

&lt;p&gt;So, a nimble board member suggests the following general process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The stadium is demolished, and the bricks are grouped into $n$ piles.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For each donation, the donor gets to take one or more bricks from
any one pile of their choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The donor who removes the last brick gets to rename the University.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assume there are two donors, Alice Moneybags and Bob Billionaire, who
take turns making donations and taking bricks, and it is Alice&amp;rsquo;s turn
first.&lt;/p&gt;

&lt;p&gt;So, for example, if there is only one pile left (with any number of
bricks), Alice can remove that pile and win (get to rename the
University).&lt;/p&gt;

&lt;p&gt;If there are two piles with one brick each, Alice has to take at least
one brick.  Whichever one she chooses, there is one pile left for Bob,
and Bob wins.&lt;/p&gt;

&lt;p&gt;If there are two piles left with two bricks each, Alice can either (1)
remove one brick, leaving one pile with one brick, and one pile with two
bricks; then Bob can remove one brick from the two-brick file, leaving
things in the two piles with one brick each situation where Bob wins.
Or, she could (2) remove two bricks to eliminate one pile, but this
leaves the one-pile situation where it is Bob&amp;rsquo;s turn so Bob wins.  Thus,
whatever Alice does starting from the two piles of two bricks each
situation, Bob wins.&lt;/p&gt;

&lt;p&gt;Player 1 can win the game if there is a move she can make, such that no
matter what move the other player makes, it results in a situation where
Player 1 can still win the game.  That is, player 1 has a winning
strategy, if there is a way for player 1 to choose her moves so that no
matter what player 2 does, player 1 can win.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Prove that if the bricks are divided into $n$ piles of a single brick
each, the player who moves first wins if $n$ is odd.  You should use
induction for your proof (even if there may be easier ways to prove this
without using induction), since setting this up as an induction proof
will help you with the following questions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suppose the bricks are divided into two piles, of size $x$ and $y$.
We can describe the configuration of our stadium bricks as a sequence of
the number of bricks in each piles.  So, the starting configuration is
$(x, y)$.  State clearly who should win the game dependent on $x$ and
$y$, and provide a proof to support your answer.  (Hint: you may find it
helpful to first consider the situation where $x = y$, and prove a lemma
about that.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star\star$) Suppose the bricks are divided into &lt;em&gt;three&lt;/em&gt; piles, of
size $x$, $y$, and $z$.  State clearly who should win the game as a
function of $x$, $y$, and $z$, and provide a convincing proof to support
your answer.  (This is rated as a $\star\star$ problem, assuming you
come up with an answer on your own or with your team, without using any
material from outside of this course to solve it.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6</title>
      <link>https://uvacs2102.github.io/ps/ps6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps6/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 21 October}.  
}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 21
October&lt;/strong&gt;.&lt;br /&gt;
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;As with PS5, you should work in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt; students of
your choice with no restrictions.  The rest of the collaboration policy
is identical to what it was on &lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;, and is not repeated here.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Sections 6.1-6.3 of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class13&#34;&gt;Class
13&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class14&#34;&gt;Class 14&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps6.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the 8 problems as you can.  For maximum credit, your
answers should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;p&gt;Problems marked with $(\star)$ are challenging enough that it is not
necessary to solve them well to get a ``gold-star level&amp;rdquo; grade on this
assignment (although we certainly hope you will try and some will
succeed!)&lt;/p&gt;

&lt;h1 id=&#34;state-machines&#34;&gt;State Machines&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Describe a state machine that can be used to determine if the number
of steps is divisible by 3.  You should clearly define the set of states
in your machine, and how each is interpreted, and the transition
relation.  (Don&amp;rsquo;t forget to also specify $q_0$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Describe the set of states that are &lt;em&gt;reachable&lt;/em&gt; for the ``Progress&amp;rdquo;
Machine defined as $M = (S, G, q_0)$:&lt;/p&gt;

&lt;p&gt;$S = { (x, d) \, | \, x \in \mathbb{Z}, d \in { \mathrm{\bf F}, \mathrm{\bf B}} }$&lt;br /&gt;
$G = { (x, \mathrm{\bf F}) \rightarrow (x + 1, \mathrm{\bf B}) \, | \, x \in \mathbb{Z} } \cup
 { (x, \mathrm{\bf B}) \rightarrow (x - 2, \mathrm{\bf F}) \, | \, x \in \mathbb{Z} }$&lt;br /&gt;
$q_0 = (0, \mathrm{\bf F})$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$M = (S, G \subseteq S \times S, q_0 \in S)$ is a state machine where
the cardinality of $S$ is finite, and transition relation, $G$, is a
total injective function.  Show that it is possible for some states in
$S$ to be unreachable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--page--&gt;

&lt;h1 id=&#34;knight-s-moves&#34;&gt;Knight&amp;rsquo;s Moves&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;($\star$) A &lt;em&gt;knight&lt;/em&gt; in chess can move two squares up, down, left, or right, followed by one square in a direction perpendicular to the two squares (so, it can move two squares up or down, followed by one square left or right; or, can move two squares left or right, followed by one square up or down).  We can define the possible moves of a knight on an infinite chess board as the Knight State Machine (similarly to how we defined the Bishop State Machine in &lt;a href=&#34;https://uvacs2102.github.io/class14&#34;&gt;Class 14&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;$S = { (\fillin ) \, | \, r, c \in \mathbb{N} }$&lt;br /&gt;
$G = { (r, c) \rightarrow (r&amp;rsquo;, c&amp;rsquo;) \, | \, r, c \in \mathbb{N} \wedge
((r&amp;rsquo; = r \pm 2 \wedge c&amp;rsquo; = c \pm 1) \vee (r&amp;rsquo; = r \pm 1 \wedge c&amp;rsquo; = c \pm 2)) \wedge r&amp;rsquo; \ge 0 \wedge c&amp;rsquo; \ge 0 }$&lt;br /&gt;
$q_0 = (0, 0)$&lt;/p&gt;

&lt;p&gt;Prove that all states in $S$ are reachable for the Knight State Machine.
(Hint: use induction, but be careful to either set up an appropriate
$P(n)$ or break the proof into two separate induction proofs to show you
can reach any column and can reach any rwo.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;invariant-principle&#34;&gt;Invariant Principle&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MCS Problem 6.3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the principle of induction to prove the invariant principle.
(Hint: your induction predicate, $P(n)$ should use $n$ as the number of
steps.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCS Problem 6.7.  (You should notice a strong similarity between this
problem and the last problem on Problem Set 5!)  (Part d is considered a
$(\star)$ problem; part e is rated $(\star\star)$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) Prove the Python program below is a correct implementation of the
factorial function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def factorial(n):
    x = 1 # poor choices of variable names for programmers
    y = 1 
    while x &amp;lt;= n:
        y = y * x
        x = x + 1
    return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be &lt;em&gt;correct&lt;/em&gt;, for any input $n \in \mathbb{N}$, the program should
always return a result equal to $n!$.  The factorial of $n$ is defined
as the product of all positive integers up to and including $n$.  (Note
that $0! = 1$.)&lt;/p&gt;

&lt;p&gt;A good answer will explain how you map the program to a state machine, and then prove partial correctness, and then prove termination.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 7</title>
      <link>https://uvacs2102.github.io/ps/ps7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps7/</guid>
      <description>

&lt;p&gt;[Revision 0.1: 23 October 7:57pm]&lt;/p&gt;

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 28 October}.  
}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 28
October&lt;/strong&gt;.&lt;br /&gt;
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;The collaboration policy is identical to that for PS6: you should work
in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt; students of your choice with no
restrictions, and follow the rest of the collaboration policy from
&lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Stable Matching &amp;mdash; Section 6.4 of the MCS
book, and &lt;a href=&#34;https://uvacs2102.github.io/class15&#34;&gt;Class 15&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps7.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the 7 problems as you can.  Questions 1 and 2 check
your understanding of stable matching, and the remaining questions build
up to completing the proof that the Gale-Shapley Algorithm always finds
a stable matching.  For maximum credit, your answers should be correct,
clear, well-written, and convincing.&lt;/p&gt;

&lt;h1 id=&#34;stable-matching&#34;&gt;Stable Matching&lt;/h1&gt;

&lt;p&gt;Traumatized by his failure to reach Eve in Problem Set 6, Wall-E has
decided to join RoboMatch.com, the Stable Macthing Service for Loney
Robots.  Robots do not have limitations on their potential matches, but
RoboMatch is concerned that &lt;a href=&#34;https://uvacs2102.github.io/docs/roomates.pdf&#34;&gt;it may not be possible to find a stable
matching&lt;/a&gt; if the robots are allowed to prefer any
other robot, RoboMatch divides robots into two sets based on whether or
not they are in Disney/Pixar movies, and requires every member to
provide a full preference ranking of all the robots in the other set.&lt;/p&gt;

&lt;p&gt;The rankings are (from most preferred to least preferred):&lt;/p&gt;

&lt;p&gt;\begin{center}
\begin{tabular}{lcl}
\multicolumn{1}{c}{{\bf Set A:} Disney/Pixar Robots} &amp;amp; $\qquad\qquad$ &amp;amp;  \multicolumn{1}{c}{{\bf Set B:} Real Robots} \ \hline
Luxo: AIBO, Big Dog, Junior  &amp;amp; &amp;amp;
AIBO: Wall-E, Luxo, R2-D2  \&lt;/p&gt;

&lt;p&gt;R2-D2: AIBO, Junior, Big Dog  &amp;amp; &amp;amp;
Big Dog: R2-D2, Luxo, Wall-E   \&lt;/p&gt;

&lt;p&gt;Wall-E: Big Dog, Junior, AIBO &amp;amp; &amp;amp;
Junior: Wall-E, R2-D2, Luxo &lt;br /&gt;
\end{tabular}
\end{center}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Show that there are stable matchings where Wall-E is paired with
Junior and where Wall-E is paired with Big Dog.  (Note: feel free to use
the provided Gale-Shapley program &lt;a href=&#34;https://uvacs2102.github.io/docs/matching-ps6.py&#34;&gt;code&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show that there cannot be any stable matching where Wall-E is paired
with AIBO.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;gale-shapley-algorithm&#34;&gt;Gale-Shapley Algorithm&lt;/h1&gt;

&lt;p&gt;\vspace&lt;em&gt;{-1ex}
In &lt;a href=&#34;https://uvacs2102.github.io/class15/&#34;&gt;Class 15&lt;/a&gt;, we developed a
state machine model for the Gale-Shapley stable matching algorithm:
\vspace&lt;/em&gt;{-2ex}
\begin{equation&lt;em&gt;}
\begin{split}
S = {(pa&amp;amp;irings, \text{\em proposals}) \, | \
&amp;amp; \text{\em pairings} = { (a, b) \, | \, a \in A, b \in B, \text{no duplicate occurences of}\ a\ \text{or}\ b\ \text{in}\ \text{\em pairings} }, &lt;br /&gt;
&amp;amp; \text{\em proposals} = (r_1, r_2, \cdots, r_n), 0 \le r_i \le n } &lt;br /&gt;
G = {(\text{\em pa}&amp;amp;\text{\em irings}, \text{\em proposals} = (r_1, r_2, \cdots, r_n)) \rightarrow (\text{\em pairings}&amp;lsquo;, \text{\em proposals}&amp;lsquo;) \, | &lt;br /&gt;
&amp;amp; i \in { 1, \cdots, n }, r_i &amp;lt; n &lt;br /&gt;
&amp;amp; \forall b \in B \ldotp (a_i, b) \notin \text{\em pairings} \
&amp;amp; b_x ::= \text{the}\ r_i\text{-ranked choice for }a_i &lt;br /&gt;
&amp;amp; \text{\em proposals}&amp;rsquo; = (r_1, \cdots, r_i + 1, \cdots, r_n) &lt;br /&gt;
&amp;amp; \text{\em pairings}&amp;rsquo; = \begin{cases}
                \text{\em pairings} \cup { (a_i, b_x)} &amp;amp; \forall a_z \in A \ldotp (a_z, b_x) \notin \text{\em pairings}\ \text{(Case 1)} &lt;br /&gt;
                \text{\em pairings} \cup { (a_i, b_x)} - { (a_z, b_x) } &amp;amp; \exists a_z \in A \ldotp (a_z, b_x) \in \text{\em pairings} \wedge a&lt;em&gt;z \prec&lt;/em&gt;{b_x} a_i\ \text{(Case 2)} &lt;br /&gt;
                \text{\em pairings} &amp;amp; \text{otherwise (Case 3)} &lt;br /&gt;
\end{cases} \
&amp;amp; } &lt;br /&gt;
q_0 = (\text{\em pa}&amp;amp;\text{\em irings} = { }, \text{\em proposals} = (0, 0, \ldots, 0)) &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Explain (in simple English) when (Case 3) in the definition of $G$ occurs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that the state machine always terminates (we did this in Class
15, but didn&amp;rsquo;t write out a full proof).  (Hint: Explain why we need the
$r_i &amp;lt; n$ constraint for $G$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that the state machine always terminates in a state where
$\text{\em pairings}$ includes a match for each element of $B$.  (Hint: prove by
contradiction by showing that if the machine is in a reachable state
where some element of $B$ is unmatched, it must have a transition.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Define, $\text{\em Prefs}&lt;em&gt;x(n)$ as the set of the top ranked $n$ preferences of
$x$.  So, $\text{\em Prefs}&lt;/em&gt;{a&lt;em&gt;i}(0) = { }$, and $\text{\em Prefs}&lt;/em&gt;{a_i}(1) = { b_x }$
where $b_x$ is $a&lt;em&gt;i$&amp;rsquo;s top choice, $\text{\em Prefs}&lt;/em&gt;{a_i}(2) = { b_x, b_y }$
where $b_y$ is $a&lt;em&gt;i$&amp;rsquo;s second choice, and $\text{\em Prefs}&lt;/em&gt;{a_i}(n) = B$.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;($\star$) Prove that the property $P$ defined below is a &lt;em&gt;preserved invariant&lt;/em&gt;
for the state machine.  The value of $\text{\em proposals}[i]$ is the count in the
sequences $\text{\em proposals}$ that corresponds to the number of \text{\em proposals} made by $a_i$.
\begin{equation&lt;em&gt;}
\begin{split}
P(q = (\text{\em pai}&amp;amp;\text{\em rings}, \text{\em proposals})) ::= &lt;br /&gt;
&amp;amp; (a_i, b_j) \in \text{\em pairings} \implies  \
&amp;amp; \qquad \qquad \forall b&lt;em&gt;x \in \text{\em Prefs}&lt;/em&gt;{a_i}(\text{\em proposals}[i]) \wedge b&lt;em&gt;j \prec&lt;/em&gt;{a_i} b_x \, \ldotp \, \exists a_y \in A - { a_i } \ldotp (a&lt;em&gt;i \prec&lt;/em&gt;{b_x} a_y) &lt;br /&gt;
\end{split}
% \wedge b&lt;em&gt;x \in \text{\em Prefs}&lt;/em&gt;{a_y}(\text{\em proposals}[y])  &lt;br /&gt;
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;That is, if $(a_i, b_j)$ is in $\text{\em pairings}$, then every match $a_i$ prefers to $b_j$ prefers someone else over $a_i$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star\star$) Prove the $\text{\em pairings}$ for the terminating
state are a stable matching (as defined in &lt;a href=&#34;https://uvacs2102.github.io/class15&#34;&gt;Class 15&lt;/a&gt;).  (You may assume all of the properties in
questions 4&amp;ndash;6 in your proof, even if you were not able to prove them.)
(Note: you may first want to state the definition of a stable matching
in a different way, and may also find it helpful to strengthen the
preserved invariant property from question 6.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 8</title>
      <link>https://uvacs2102.github.io/ps/ps8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps8/</guid>
      <description>

&lt;p&gt;[Revision 0.2 - 3 November]&lt;/p&gt;

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf
   Friday, 4 November}.  
}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on
   &lt;strong&gt;Friday, 4 November&lt;/strong&gt;.&lt;br /&gt;
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;The collaboration policy is identical to that for PS7: you should work
in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt; students of your choice with no
restrictions, and follow the rest of the collaboration policy from
&lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on recursive data types and structural
induction &amp;mdash; Chapter of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class16&#34;&gt;Class 16&lt;/a&gt; and
&lt;a href=&#34;https://uvacs2102.github.io/class17&#34;&gt;Class 17&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Problems 1&amp;ndash;8 are expected for everyone; solve as many as you can.  The
Programming with Procedures problems are optional (see the note before
them).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps8.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;tsilly-lists&#34;&gt;Tsilly Lists&lt;/h2&gt;

&lt;p&gt;Consider an alternate way of defining a list from the one we used in
Class 16 and 17, where instead of &lt;em&gt;prepend&lt;/em&gt;, lists are constructed using
&lt;em&gt;postpend&lt;/em&gt; (to avoid confusion, we call our postpended list a &lt;em&gt;tsil&lt;/em&gt;,
and reserve &lt;em&gt;list&lt;/em&gt; for the original prepended list):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;tsil&lt;/em&gt; is either the empty tsil ($\lambda$), or the result of
  $\text{postpend}(t, e)$ for some tsil $t$ and object $e$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define the meaning of the observer operations (similarly to the
beginning of &lt;a href=&#34;https://uvacs2102.github.io/class17&#34;&gt;Class 17&lt;/a&gt;) for the tsil: $\text{last}: Tsil
\rightarrow Object$, $\text{frest}: Tsil \rightarrow Tsil$, and
$\text{empty}: Tsil \rightarrow Boolean$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Provide a definition of &lt;em&gt;length&lt;/em&gt; for the tsil type.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that there is an equivalent tsil for every list.  (Your answer
should include a clear definition of what &lt;em&gt;equivalent&lt;/em&gt; means.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;structural-induction-on-trees&#34;&gt;Structural Induction on Trees&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/class17&#34;&gt;Class 17&lt;/a&gt;, we defined a binary tree as either $\text{\bf
null}$ or a node constructed from a binary tree, object, and binary
tree.  Here, we define a binary tree where the labels are natural
numbers.&lt;/p&gt;

&lt;p&gt;A tree has these operations:&lt;/p&gt;

&lt;p&gt;\begin{equation&lt;em&gt;}
\begin{split}
\qquad &amp;amp; \text{\bf null}: \text{\em Tree} &lt;br /&gt;
       &amp;amp; \text{node}: \text{\em Tree} \times \mathbb{N} \times \text{\em Tree} \rightarrow \text{\em Tree} &lt;br /&gt;
      &amp;amp; \text{label}: \text{\em Tree} \rightarrow \mathbb{N} &lt;br /&gt;
      &amp;amp; \text{left}: \text{\em Tree} \rightarrow \text{\em Tree} &lt;br /&gt;
      &amp;amp; \text{right}: \text{\em Tree} \rightarrow \text{\em Tree} &lt;br /&gt;
      &amp;amp; \text{empty}: \text{\em Tree} \rightarrow { \T, \F } &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;The meaning of the operations is defined for all trees $t_1, t_2$, and all $n \in \mathbb{N}$, by:
\begin{equation&lt;em&gt;}
\begin{split}
\qquad &amp;amp; \text{label}(\text{node}(t_1, n, t_2)) \rightarrow n &lt;br /&gt;
\qquad &amp;amp; \text{left}(\text{node}(t_1, n, t_2)) \rightarrow t_1 &lt;br /&gt;
\qquad &amp;amp; \text{right}(\text{node}(t_1, n, t_2)) \rightarrow t_2 &lt;br /&gt;
\qquad &amp;amp; \text{empty}(\text{\bf null}) \rightarrow \T &lt;br /&gt;
\qquad &amp;amp; \text{empty}(\text{node}(t_1, n, t_2) \rightarrow \F &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;height&lt;/em&gt; of a tree is the maximum distance (number of edges) from
its root (the one node that has no parent node) to a leaf.  Provide a
&lt;em&gt;constructive&lt;/em&gt; definition of &lt;em&gt;height&lt;/em&gt; for our binary tree type.  (Hint:
the height of $\text{node}(\text{\bf null}, n, \text{\bf null})$ is
$0$.  The height of $\text{\bf null}$ should also be $0$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prove that the maximum number of nodes in a binary tree of height $h$
is $2^{h + 1} - 1$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The in-order traversal of a binary tree is a list of the node labels in
the order they appear from left-to-right across the tree.  For example,
the in-order traversal of the tree shown below would be the list $(4, 8,
9, 13, 22, 27)$.&lt;/p&gt;

&lt;p&gt;\begin{center}
\includegraphics[scale=0.7]{./content/docs/binarytree.pdf}
\end{center}&lt;/p&gt;

&lt;p&gt;We can define $\text{traverse}$ to produce a (prepend) list as: (note the $+$ operation here is list concatenation, as defined in &lt;a href=&#34;https://uvacs2102.github.io/class17&#34;&gt;Class 17&lt;/a&gt;)
\begin{equation&lt;em&gt;}
\begin{split}
&amp;amp; \text{traverse}(\text{\bf null}) = \text{\bf null} &lt;br /&gt;
&amp;amp; \text{traverse}(\text{node}(t_1, n, t_2)) = \text{traverse}(t_1) + \text{prepend}(n, \text{traverse}(t_2)) &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prove that for all trees $t$ with $n$ nodes, the result of
$\text{traverse(t)}$ is a list of length $n$.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ordered-binary-trees&#34;&gt;Ordered Binary Trees&lt;/h2&gt;

&lt;p&gt;We define an $\text{\em OrderedBinaryTree}$ as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Base case:&lt;/strong&gt; $\text{\bf null} \in \text{\em OrderedBinaryTree}$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constructor case:&lt;/strong&gt; if $t_1, t_2 \in \text{\em OrderedBinaryTree}$
and $n \in \mathbb{N}$, and $(\text{empty}(t_1) \vee \text{maximum}(t_1) &amp;lt; n)$ and
$(\text{empty}(t_1) \vee \text{minimum}(t_2) &amp;gt; n)$, then $\text{node}(t_1, n, t_2) \in \text{\em OrderedBinaryTree}$.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may assume all the other tree operations (including
$\text{traverse}$ from question 5) are defined for \text{\em
OrderedBinaryTree}s also.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define the $\text{minimum}: \text{\em OrderedBinaryTree} \rightarrow
\mathbb{N}$ and $\text{maximum}: \text{\em OrderedBinaryTree}
\rightarrow \mathbb{N}$ operations used in the definition of $\text{\em
OrderedBinaryTree}$ above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) Prove that $\forall t \in \text{\em OrderedBinaryTree}
\ldotp \text{traverse}(t)$ is an ordered list.  (A list, $p = (p_1, p_2,
\cdots, p_n)$ is an ordered list if $\forall i \in { 1, \cdots, n-1 }
\ldotp p&lt;em&gt;i &amp;lt; p&lt;/em&gt;{i + 1}$.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;programming-with-procedures&#34;&gt;Programming with Procedures&lt;/h2&gt;

&lt;p&gt;\dbox{These problems are {\em optional}, and provided to give students
who are interested some experience with functional programming which
will make you a more powerful, fashionable, and prolific programmer.
You do not need to do them to earn &amp;ldquo;gold star&amp;rdquo; level credit on this
assignment, and nothing on the exams will depend on them.  You will
receive &amp;ldquo;bonus&amp;rdquo; credit on this assignment for turning in good answers to
these questions.}&lt;/p&gt;

&lt;p&gt;These questions assume you have some experience programming in Python,
but are sadly lacking in previous experience using procedures as
parameters and results and realize that you cannot be a true kunoichi
programmer without becoming adept with programming with procedures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download:&lt;/strong&gt; &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt; (if the link in the PDF file doesn&amp;rsquo;t work, use &lt;em&gt;&lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;https://uvacs2102.github.io/docs/pairs.py&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt;, we defined &lt;code&gt;make_pair&lt;/code&gt; and various
procedures for building and using lists.  You should download this code,
run it in your favorite Python3 environment, and make sure you
understand it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;list_tostring(lst)&lt;/code&gt; that takes a list (constructed
using the &lt;code&gt;list_append&lt;/code&gt; function from &lt;code&gt;pairs.py&lt;/code&gt;) as its input and
returns a string representation of that list.  For example,
&lt;code&gt;list_tostring(list_prepend(1, list_prepend(2, list_prepend(3, None))))&lt;/code&gt;
should print out &lt;code&gt;[1, 2, 3]&lt;/code&gt;.  (You can use &lt;code&gt;str(x)&lt;/code&gt; to turn any Python
object &lt;code&gt;x&lt;/code&gt; into a string.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;list_map(fn, lst)&lt;/code&gt; that takes as inputs a
function and a list, and returns a list that is the result of applying
the input function to each element of &lt;code&gt;lst&lt;/code&gt;.  For example,
&lt;code&gt;list_map(lambda x: x + 1, list123)&lt;/code&gt;
should return the list &lt;code&gt;[2, 3, 4]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;list_accumulate(fn, lst, base)&lt;/code&gt; that takes as
inputs a function, a list, and a base value, and returns the result of
applying the function through the list.  For example,
&lt;code&gt;list_accumulate(lambda a, b: a + b, lst, 0)&lt;/code&gt;
should return the sum of all the elements in the list, and
&lt;code&gt;list_accumulate(lambda a, b: a * b, lst, 1)&lt;/code&gt;
should return their product, and &lt;code&gt;list_accumulate(lambda a, b: b + 1, lst, 0)&lt;/code&gt;
should return the length of the list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define &lt;code&gt;list_map&lt;/code&gt; (as in problem 10) using &lt;code&gt;list_accumulate&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 9</title>
      <link>https://uvacs2102.github.io/ps/ps9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps9/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf
   Wednesday, 23 November}.}
   &lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on
   &lt;strong&gt;Wednesday, 23 November&lt;/strong&gt;.&lt;br /&gt;
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;The collaboration policy is identical to that for PS7: you should work
in groups of &lt;em&gt;one&lt;/em&gt; to &lt;em&gt;four&lt;/em&gt; students of your choice with no
restrictions, and follow the rest of the collaboration policy from
&lt;a href=&#34;https://uvacs2102.github.io/ps/ps3&#34;&gt;PS3&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on infinite sets &amp;mdash; Chapter 8 of the MCS book,
and &lt;a href=&#34;https://uvacs2102.github.io/class18&#34;&gt;Class 18&lt;/a&gt;, &lt;a href=&#34;https://uvacs2102.github.io/class19&#34;&gt;Class 19&lt;/a&gt;, &lt;a href=&#34;https://uvacs2102.github.io/class21&#34;&gt;Class 21&lt;/a&gt; and
&lt;a href=&#34;https://uvacs2102.github.io/class22&#34;&gt;Class 22&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps9.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.  Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve all 8 problems.  Your answers should be clear, consise, and convincing.&lt;/p&gt;

&lt;h3 id=&#34;countable-sets&#34;&gt;Countable Sets&lt;/h3&gt;

&lt;p&gt;For each set defined below, prove that the set described is &lt;em&gt;countable&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$\text{\em Evens} = { 2n \, | \, n \in \mathbb{N} }$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\mathbb{N} \cup { \pi, \tau }$ (where $\pi$ is the ratio of a circle&amp;rsquo;s circumference to its diameter and $\tau$ is the ratio of a circle&amp;rsquo;s circumference to its radius)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The set of all finite state machines, $M = (S, G, q_0)$ where $S$
is a finite set, and $G \subseteq S \times S$ and $q_0 \in S$ are
otherwise unrestricted.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;possibly-countable-sets&#34;&gt;Possibly Countable Sets&lt;/h3&gt;

&lt;p&gt;For each set defined below, determine if the set is &lt;em&gt;countable&lt;/em&gt; or
&lt;em&gt;uncountable&lt;/em&gt; and support your answer with a convincing proof.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The set of all &lt;em&gt;stree&lt;/em&gt; objects, defined by:
\begin{itemize}
\item Base object: $\text{\bf null}$ is an {\em stree}.&lt;br /&gt;
\item Constructor: for any {\em stree} objects $q_1, q_2$, $\text{combine}(q_1, q_2)$ is an {\em stree}.
\end{itemize}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$\mathbb{R} - \mathbb{Q}$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;($\star$) The set of all &lt;em&gt;infinite&lt;/em&gt; state machines, $M = (S, G, q_0)$ where $S = \mathbb{N}$, and $G \subseteq S \times S$ and $q_0 \in S$ are
otherwise unrestricted.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;properties-of-infinite-sets&#34;&gt;Properties of Infinite Sets&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(MCS Problem 8.11, with typesetting problem fixed)
  (a) Prove that if a nonempty set, $C$, is countable, then there is a &lt;em&gt;total&lt;/em&gt; surjective function, $$f: \mathbb{N} \rightarrow C.$$
  (b) Conversely, suppose that $\mathbb{N}\ \text{surj}\ D$, that is, there is a surjective function that is &lt;em&gt;not necessarily total&lt;/em&gt;, $f: \mathbb{N} \rightarrow D$.  Prove that $D$ is countable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCS Problem 8.17.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>