<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/index.xml</link>
    <description>Recent content on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Class 20: Elections, Review</title>
      <link>https://uvacs2102.github.io/class20/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class20/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Exam 2&lt;/strong&gt; will be in class on &lt;strong&gt;Thursday, 10 November&lt;/strong&gt;.  See &lt;a href=&#34;https://uvacs2102.github.io/class18&#34;&gt;Class 18&lt;/a&gt; notes for details.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;e6c145e3a44b45aa803b46960be3754b&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://genius.com/Lin-manuel-miranda-cabinet-battle-1-lyrics&#34;&gt;Cabinet Battle
#1&lt;/a&gt;,
&lt;a href=&#34;http://genius.com/Lin-manuel-miranda-cabinet-battle-2-lyrics&#34;&gt;Cabinet Battle #2&lt;/a&gt;,
&lt;a href=&#34;http://genius.com/Lin-manuel-miranda-cabinet-battle-3-lyrics&#34;&gt;Cabinet Battle
#3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Michael J. Caulfield, &lt;a href=&#34;http://www.maa.org/press/periodicals/convergence/apportioning-representatives-in-the-united-states-congress-introduction&#34;&gt;&lt;em&gt;Apportioning Representatives in the United
States
Congress&lt;/em&gt;&lt;/a&gt;,
Mathematical Association of America, 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.maa.org/meetings/calendar-events/a-mathematical-adventure-through-the-census-reapportionment-and-redistricting&#34;&gt;&lt;em&gt;A Mathematical Adventure through the Census, Reapportionment, and
Redistricting&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.census.gov/population/apportionment/data/2010_apportionment_results.html&#34;&gt;2010 Apportiment
Results&lt;/a&gt;,
US Census. (Includes &lt;a href=&#34;https://www.census.gov/population/apportionment/files/Priority%20Values%202010.pdf&#34;&gt;priority values&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 8 Solutions and Comments</title>
      <link>https://uvacs2102.github.io/ps8solutions/</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps8solutions/</guid>
      <description>&lt;p&gt;The Problem Set 8 solutions are now posted:
[&lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps8solutions.pdf&#34;&gt;PDF&lt;/a&gt;].
Please review these to prepare for Exam 2, and let me know if you have
any questions or parts you want to go over in class Tuesday.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 7 Solutions and Comments</title>
      <link>https://uvacs2102.github.io/ps7solutions/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps7solutions/</guid>
      <description>&lt;p&gt;The Problem Set 7 solutions are now posted: [&lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps7solutions.pdf&#34;&gt;PDF&lt;/a&gt;].&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 19: Uncountable Sets</title>
      <link>https://uvacs2102.github.io/class19/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class19/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps8&#34;&gt;&lt;strong&gt;Problem Set 8&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday (4 November) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Friday, 4 November at 11am (Rotunda Dome Room): &lt;strong&gt;Steve Huffman&lt;/strong&gt; (BSCS
2005, co-founder and CEO of Reddit), &lt;em&gt;Computer Science Distinguished
Alumni Speaker&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exam 2&lt;/strong&gt; will be in class on &lt;strong&gt;Thursday, 10 November&lt;/strong&gt;.  See &lt;a href=&#34;https://uvacs2102.github.io/class18&#34;&gt;Class 18&lt;/a&gt; notes for details.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;483bfa40aae04e3a8e46c090d6d4d727&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class19.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;countable-and-uncountable-sets&#34;&gt;Countable and Uncountable Sets&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;countably infinite&lt;/em&gt; if and only if there
  exists a bijection between $S$ and $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;uncountable&lt;/em&gt;, if there exists no bijection
  between $S$ and $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;power set&lt;/strong&gt; of $A$ ($\textrm{pow}(A)$)is the set of all subsets of $A$:
$$
B \in \textrm{pow}(A) \iff B \subseteq A.
$$&lt;/p&gt;

&lt;p&gt;For all &lt;strong&gt;finite&lt;/strong&gt; sets $S$, $|pow(S)| = 2^{|S|}$.&lt;/p&gt;

&lt;p&gt;#
#&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;all&lt;/strong&gt; sets $S$, $|pow(S)| &amp;gt; |S|$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Prove $pow(\mathbb{N})$ is uncountable.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;$\text{bitstrings} = \forall n \in \mathbb{N} . {0, 1}^n$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;ordinal-and-cardinal-numbers&#34;&gt;Ordinal and Cardinal Numbers&lt;/h2&gt;

&lt;p&gt;$\omega$ is the &lt;em&gt;smallest infinite ordinal&lt;/em&gt;.  The first ordinal after
$0, 1, 2, \cdots$.&lt;/p&gt;

&lt;p&gt;What is the difference between an &lt;em&gt;ordinal&lt;/em&gt; and &lt;em&gt;cardinal&lt;/em&gt; number?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What should $2\omega$ mean?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;Is $\text{InfiniteBitStrings} = {0, 1}^\omega$ countable?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Prove the number of real numbers in the interval $[0, 1]$ is uncountable.&lt;/p&gt;

&lt;p&gt;#
#
#&lt;/p&gt;

&lt;p&gt;What set is bigger than $\mathbb{R}$?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Aleph-naught: $\aleph_0 = |\mathbb{N}|$ is the &lt;em&gt;smallest infinite
cardinal number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How is $\omega$ different from $\aleph_0$?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;$$2^{\aleph_0} = |pow(\mathbb{N})| = | [0, 1] | = | \mathbb{R} | = | \text{InfiniteBitStrings} |  $$&lt;/p&gt;

&lt;p&gt;What is necessary to conclude that it is not possible to settle the
question of whether $\aleph_1 = 2^{\aleph_0}$ with the ZFC axioms?&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 8 Revisions</title>
      <link>https://uvacs2102.github.io/ps8revisions/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps8revisions/</guid>
      <description>&lt;p&gt;There are three important revisions to &lt;a href=&#34;https://uvacs2102.github.io/docs/ps8.pdf&#34;&gt;Problem Set 8&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The definition of &lt;em&gt;height&lt;/em&gt; for Problem 4 should have included that
the height of the &lt;strong&gt;null&lt;/strong&gt; tree is 0.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The definition of the &lt;em&gt;OrderedBinaryTree&lt;/em&gt; before Problem 7 did not
make sense for constructing nodes where one (or both) of the subtrees
are &lt;strong&gt;null&lt;/strong&gt;.  I have added clauses that allow empty trees to be used as
the subtrees in a node.  Without these, it would not be possible to
construct any trees (other than the base &lt;strong&gt;null&lt;/strong&gt; tree), since it would
not be sensible to satisfy the maximum or minimum constraints for the
null tree.  It makes more sense to consider these undefined for the
&lt;strong&gt;null&lt;/strong&gt; tree, so it would be impossible to satisfy the constructor
constraints without adding the disjunction clauses that allow the
sub-trees to be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For Problem 11, the definition of length using &lt;code&gt;list_accumulate&lt;/code&gt;
should be &lt;code&gt;list_accumulate(lambda a, b: b + 1, lst, 0)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The version now posted has these revisions.  If you already found
work-arounds to these problems in your solutions, you can add a note to
your assignment indicating this and don&amp;rsquo;t need to revisit them, but
otherwise, please solve the revised problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 18: Infinite Sets</title>
      <link>https://uvacs2102.github.io/class18/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class18/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;Before Thursday, everyone should have finished reading MCS Chapter 8.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps8&#34;&gt;&lt;strong&gt;Problem Set 8&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday (4 November) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I am out of town Wednesday and will not be able to hold my normal office
hours.&lt;/p&gt;

&lt;p&gt;Friday, 4 November at 11am (Rotunda Dome Room): &lt;strong&gt;Steve Huffman&lt;/strong&gt; (BSCS
2005, co-founder and CEO of Reddit), &lt;em&gt;Computer Science Distinguished
Alumni Speaker&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exam-2&#34;&gt;Exam 2&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Exam 2&lt;/strong&gt; will be in class on &lt;strong&gt;Thursday, 10 November&lt;/strong&gt;.  It will be
  similar in format to Exam 1.  If you need to make special arrangements
  for taking Exam 2, please contact me by the end of this week (Nov 6).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources.&lt;/strong&gt; As with Exam 1, you will be permitted to use a single
paper page of notes that you prepare and bring to the exam.  It is fine
to collaborate with others to prepare your notes.  The page should be no
larger than a US Letter size page ($8.5 \times 11$ inches), and you may
write (or print) on both sides of the page.  No other resources are
permitted during the exam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content.&lt;/strong&gt; The problems on the exam will cover material from Classes
  1&amp;ndash;17, Problem Sets 1&amp;ndash;8 (including the provided solutions), and MCS
  Chapters 1&amp;ndash;7.  Exam 2 will emphasize material covered since Exam 1
  (Classes 12&amp;ndash;17, Problem Sets 6&amp;ndash;8, and MCS Chapters 6&amp;ndash;7), but will
  also include questions that cover earlier material in the class.  In
  particular, you should not be at all surprised if Exam 2 includes
  questions very similar to Problem 4 and Problem 8 from Exam 1, so it
  would be quite foolish for any student to go into the exam without
  making sure they understand those problems and their solutions.  There
  will not be any questions about trick-xor-treat protocols, despite
  their practical importance and mathematical beauty.  If you understand
  the problems on the problem sets and questions on the class notes well
  enough to be able to answer similar questions, you should do well on
  the exam.&lt;/p&gt;

&lt;p&gt;The main topics the exam will cover include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;State Machines (how to interpret and reason about a state machine
given its formal description, how to model a problem with a state
machine)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invariant Principle (you should be able to construct a proof that uses
the invariant principle to reason about properties of reachable
states, and be able to understand proofs that use and mis-use the
invariant principle)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Termination Proofs (you should be able to prove a state machine
eventually reaches a terminating state, or that a program eventually
terminates)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stable Matching (you should understand the definition of a stable
matching and the Gale-Shalpey algorithm for finding a stable matching,
and be able to prove properties about matchings)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Recursive Data Types (how to define a data type constructively,
operations on recursive data types; lists, trees, and other
recursively defined data types)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Structural Induction (how to use the principle of structural induction
to reason about all objects of a recursive data type; understand the
connections and differences between structural induction, invariant
principle, and induction on the natural numbers)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For most students, I believe the best way to prepare for the exam will
be to (1) go over exam 1 and the problem sets and their solutions, and
make sure you understand well any of the problems you did not get
before; (2) go through the questions in the class notes and convince
yourself you can answer them well; (3) re-read chapters of the book,
solving the associated practice problems, especially for any sections on
topics where you had difficulty on the problem sets.  If you do #1 and
understand well the problems on the problem set, you should be confident
you&amp;rsquo;ll do well on the exam; if you struggled on the problem sets, you
would benefit from doing #2 and #3 as well.  If you have anything you
want me to review before the exam, post on slack before Monday (7
November).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;bce1aef8374f4dffbf5f11d517397e0a&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;Apostolos Doxiadis and &lt;a href=&#34;https://people.eecs.berkeley.edu/~christos/&#34;&gt;Christos Papadimitriou&lt;/a&gt;. &lt;a href=&#34;https://www.amazon.com/Logicomix-search-truth-Apostolos-Doxiadis/dp/1596914521/&#34;&gt;&lt;em&gt;Logicomix: An epic
search for
truth&lt;/em&gt;&lt;/a&gt;, Bloomsbury USA, 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pi.math.virginia.edu/History/1800s.htm&#34;&gt;Math Professors at UVa (1825-1900)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Courtenay&amp;rsquo;s tenure at Virginia was, in contrast to that of his predecessor, a resounding success. He was described as a model professor: &amp;ldquo;He never by look, act, word, or emphasis disparaged the efforts or undervalued the acquirements of his pupils. His pleasant smile and kind voice, when he would say, &amp;lsquo;Is that answer perfectly correct?&amp;rsquo; gave hope to many minds struggling with science&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.encyclopediavirginia.org/Bonnycastle_Charles_1796-1840#start_entry&#34;&gt;Charles Bonnycastle&lt;/a&gt;, UVA&amp;rsquo;s Professor of Mathematics, 1825-1840&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As mathematics professor, &amp;ldquo;Old Bonny,&amp;rdquo; as he was fondly called, replaced the antiquated British approach to mathematical pedagogy typified by his own father&amp;rsquo;s texts with a new approach borrowed from French mathematicians. British writers had imitated Euclid by clinging to the deductive manner of presenting material. They opened their texts with axioms and definitions and proceeded to the derivation of facts and theorems. Although logically satisfying to mathematicians, the method did little to motivate beginning students. French textbook writers, on the other hand, approached mathematics analytically, leading from concrete examples to abstractions. Bonnycastle introduced this method at the University of Virginia and published his own college textbook, &lt;em&gt;Inductive Geometry, or, An Analysis of the Relations of Form and Magnitude: Commencing with the Elementary Ideas Derived Through the Senses, and Proceeding by a Train of Inductive Reasoning to Develop the Present State of the Science&lt;/em&gt; (1834). Painfully prolix even by nineteenth-century standards, the innovative book was not a financial success.  (Excerpt from article by Karen Parshall)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class18.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;infinite-sets&#34;&gt;Infinite Sets&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Finite Cardinality.&lt;/strong&gt; The &lt;em&gt;cardinality&lt;/em&gt; of the set
$$
\mathbb{N}_k = { n | n \in \mathbb{N} \wedge n &amp;lt; k }
$$
is $k$.  If there is a &lt;em&gt;bijection&lt;/em&gt; between two sets, they have the same
cardinality.  (Class 9)&lt;/p&gt;

&lt;p&gt;Does this definition tell us the cardinality of $\mathbb{N}$?&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $C$ is &lt;em&gt;infinite&lt;/em&gt; if there is no bijection between
  $C$ and any set $\mathbb{N}_k$ (as defined above).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dedekind-Infinite.&lt;/strong&gt; A set $A$ is &lt;em&gt;Dedekind-infinite&lt;/em&gt; if and only if there exists a strict subset of $A$ with the same cardinality as $A$.  That is,
$$\exists B \subset A \ldotp \exists R \ldotp R\ \text{is a bijection between}\ A\ \text{and}\ B.$$&lt;/p&gt;

&lt;p&gt;Are the definitions of (standard) &lt;em&gt;infinite&lt;/em&gt; and &lt;em&gt;Dedekind-infinite&lt;/em&gt;
equivalent?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $C$ is &lt;em&gt;countable&lt;/em&gt; if and only if there exists a
  surjective function from $\mathbb{N}$ to $C$.  (That is, $\le 1$ arrow
  out from $\mathbb{N}$, $ge 1$ arrow in to $C$.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $C$ is &lt;em&gt;countably infinite&lt;/em&gt; if and only if there
  exists a bijection between $C$ and $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;Must a &lt;em&gt;countable&lt;/em&gt; set that is &lt;em&gt;Dedekind-infinite&lt;/em&gt; be &lt;em&gt;countably infinite&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Prove that these sets are countable: $\mathbb{Z}$, $\mathbb{N} \times
\mathbb{N}$, $\mathbb{Q}$ (rationals), $\emptyset$, $\mathbb{N} \cup (\mathbb{N} \times \mathbb{N}) \cup (\mathbb{N} \times \mathbb{N} \times \mathbb{N})$, all finite sequences of elements of $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6 Comments</title>
      <link>https://uvacs2102.github.io/ps6comments/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps6comments/</guid>
      <description>&lt;p&gt;The solutions and comments for PS6 are now posted in collab:
&lt;a href=&#34;https://collab.itc.virginia.edu/access/content/group/e0b17949-c94c-466b-835a-196381f3f911/ps6solutions.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 8</title>
      <link>https://uvacs2102.github.io/ps8announce/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps8announce/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem Set 8&lt;/strong&gt; is &lt;a href=&#34;https://uvacs2102.github.io/docs/ps8.pdf&#34;&gt;now posted&lt;/a&gt;, and is due on
  &lt;strong&gt;Friday, 4 November at 6:29pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 17: Structural Induction</title>
      <link>https://uvacs2102.github.io/class17/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class17/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps7&#34;&gt;&lt;strong&gt;Problem Set 7&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;tomorrow at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next week Friday, 4 November at 11am, &lt;strong&gt;Steve Huffman&lt;/strong&gt; (BSCS 2005,
co-founder and CEO of Reddit) will give a Computer Science Distinguished
Alumni talk in the Rotunda.  If you would like to meet with Steve
(either at a lunch after the talk or a meeting with students later that
afternoon), send me an email with a good reason why you should be
invited (only a very limited number of spaces available).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;f0c0a93cfbf64e3ba1df906dc4c2e2b5&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class17.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;lists&#34;&gt;Lists&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A &lt;em&gt;list&lt;/em&gt; is an ordered sequence of objects.  A list is
  either the empty list ($\lambda$), or the result of $\text{prepend}(e,
  l)$ for some object $e$ and list $l$.&lt;/p&gt;

&lt;p&gt;\begin{equation&lt;em&gt;}
\begin{split}
\text{\em first}(\text{prepend}(e, l)) &amp;amp;= e &lt;br /&gt;
\text{\em rest}(\text{prepend}(e, l)) &amp;amp;= l &lt;br /&gt;
\text{\em empty}(\text{prepend}(e, l)) &amp;amp;= \text{\bf False} &lt;br /&gt;
\text{\em empty}(\text{\bf null}) &amp;amp;= \text{\bf True} &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; The &lt;em&gt;length&lt;/em&gt; of a list, $p$, is:
\begin{equation&lt;em&gt;}
\begin{split}
\begin{cases}
0 &amp;amp; \text{if}\ p\ \text{is \bf null} &lt;br /&gt;
\text{\em length}(q) + 1 &amp;amp; \text{otherwise}\ p = \text{\em prepend}(e, q)\ \text{for some object}\ e\ \text{and some list}\ q &lt;br /&gt;
\end{cases}
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def list_length(l):
    if list_empty(l):
        return 0
    else:
        return 1 + list_length(list_rest(l))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prove: for all lists, $p$, &lt;code&gt;list_length(p)&lt;/code&gt; returns the length of the list $p$.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; The &lt;em&gt;concatenation&lt;/em&gt; of two lists, $p = (p_1, p_2, \cdots, p_n)$ and $q = (q_1, q_2, \cdots, q_m)$ is
$$(p_1, p_2, \cdots, p_n, q_1, q_2, \cdots, q_m).$$&lt;/p&gt;

&lt;p&gt;Provide a &lt;em&gt;constructuve&lt;/em&gt; definition of &lt;em&gt;concatenation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;#
##&lt;/p&gt;

&lt;p&gt;Prove. For any two lists, $p$ and $q$, $\text{length}(p + q) = \text{length}(p) + \text{length}(q)$.&lt;/p&gt;

&lt;p&gt;#
##&lt;/p&gt;

&lt;h2 id=&#34;induction-summary&#34;&gt;Induction Summary&lt;/h2&gt;

&lt;p&gt;\begin{center}
\begin{tabular}{lccc}
&amp;amp; {\bf Regular Induction} &amp;amp; {\bf Invariant Principle} &amp;amp; {\bf Structural Induction} \ \hline
Works on: &amp;amp; natural numbers &amp;amp; state machines &amp;amp; data types &lt;br /&gt;
To prove $P(\cdot)$ &amp;amp; {\em for all natural numbers} &amp;amp; {\em for all reachable states} &amp;amp; {\em for all data type objects} &lt;br /&gt;
Prove {\bf base case(s)} &amp;amp; $P(0)$ &amp;amp; $P(q_0)$ &amp;amp; $P(\text{base object(s)})$ &lt;br /&gt;
and {\bf inductive step} &amp;amp; $\forall m \in \mathbb{N} \ldotp$ &amp;amp; $\forall (q, r) \in G \ldotp $ &amp;amp; $\forall s \in \text{\em Type} \ldotp$ &lt;br /&gt;
  &amp;amp; $P(m) \implies P(m+1)$ &amp;amp; $P(q) \implies P&amp;reg;$ &amp;amp; $P(s) \implies P(t)$ &lt;br /&gt;
 &amp;amp; &amp;amp; &amp;amp; $\quad \forall t\ \text{constructable from}\ s$ \
\end{tabular}
\end{center}&lt;/p&gt;

&lt;h1 id=&#34;challenge-response-protocols&#34;&gt;Challenge-Response Protocols&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verifier:&lt;/strong&gt; picks random challenge, $y$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prover:&lt;/strong&gt; proves knowledge of $x$ by revealing $f(x, y)$.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verifer:&lt;/strong&gt; can verify prover knows $x$ from response, but learns nothing (useful) about $x$.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How can you know the website you are sending your password to is what you think it is?&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 16: Recursive Data Types</title>
      <link>https://uvacs2102.github.io/class16/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class16/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;You should read MCS Chapter 7 this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps7&#34;&gt;&lt;strong&gt;Problem Set 7&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;28 October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b350014169664ae49e537a2999b851b2&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Python code from class and list definitions: &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class16.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;structural-induction&#34;&gt;Structural Induction&lt;/h1&gt;

&lt;p&gt;We can show a property holds for &lt;em&gt;all objects of a data type&lt;/em&gt; by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Showing the property holds for all base objects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Showing that all the ways of constructing new objects, preserve the property.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is the difference between scalar data and compound data structures?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;pairs&#34;&gt;Pairs&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A $\text{\em Pair}$ is a datatype that supports these three operations:&lt;br /&gt;
\begin{quote}
     $\text{\em make_pair}: \text{\em Object} \times \text{\em Object} \rightarrow \text{\em Pair}$&lt;br /&gt;
     $\text{\em pair_first}: \text{\em Pair} \rightarrow \text{\em Object}$\&lt;br /&gt;
     $\text{\em pair_last}: \text{\em Pair} \rightarrow \text{\em Object}$\&lt;br /&gt;
\end{quote}
where, for any objects $a$ and $b$, $\text{\em pair_first}(\text{\em make_pair}(a, b)) = a$ and $\text{\em pair_last}(\text{\em make_pair}(a, b)) = b$.&lt;/p&gt;

&lt;h1 id=&#34;lists&#34;&gt;Lists&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition (1).&lt;/strong&gt; A &lt;em&gt;List&lt;/em&gt; is either (1) a &lt;em&gt;Pair&lt;/em&gt; where the second part of
  the pair is a &lt;em&gt;List&lt;/em&gt;, or (2) the empty list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition (2).&lt;/strong&gt; A &lt;em&gt;List&lt;/em&gt; is a ordered sequence of objects.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;list-operations&#34;&gt;List Operations&lt;/h2&gt;

&lt;p&gt;\begin{equation&lt;em&gt;}
\begin{split}
\text{\em first}(\text{\em prepend}(e, l)) &amp;amp;= \fillin &lt;br /&gt;
\text{\em rest}(\text{\em prepend}(e, l)) &amp;amp;= \fillin &lt;br /&gt;
\text{\em empty}(\text{\em prepend}(e, l)) &amp;amp;= \text{\bf False} &lt;br /&gt;
\text{\em empty}(\fillin) &amp;amp;= \text{\bf True} &lt;br /&gt;
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; The &lt;em&gt;length&lt;/em&gt; of a list, $p$, is:
\begin{equation&lt;em&gt;}
\begin{split}
\begin{cases}
0 &amp;amp; p\ \text{is \bf null} &lt;br /&gt;
\bigfillin %\text{\em length}(q) + 1
&amp;amp; p = \text{\em prepend}(e, q)\ \text{for some object}\ e\ \text{and some list}\ q &lt;br /&gt;
\end{cases}
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unique Construction&lt;/strong&gt; property:&lt;/p&gt;

&lt;p&gt;\begin{equation&lt;em&gt;}
\begin{split}
\forall p \in \text{\em List} - { \text{\bf null} } \ldotp \exists q \in \text{\em List}, e \in \text{\em Object} \ldotp p = \text{\em prepend}(e, q) \; \wedge &lt;br /&gt;
(\forall r \in \text{\em List}, f \in \text{\em Object} \ldotp p = \text{\em prepend}(f, r) \implies r = q \wedge f = e)
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;Why is this necessary for our length definition?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def list_prepend(e, l):
    return make_pair(e, l)

def list_first(l):
    return pair_first(l)

def list_rest(l):
    return pair_last(l)

def list_empty(l):
    return l == None

def list_length(l):
    if list_empty(l):
        return 0
    else:
        return 1 + list_length(list_rest(l))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prove: for all lists, $p$, &lt;code&gt;list_length(p)&lt;/code&gt; returns the length of the list $p$.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 7 - Revised</title>
      <link>https://uvacs2102.github.io/ps7revised/</link>
      <pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps7revised/</guid>
      <description>&lt;p&gt;A revised version of &lt;strong&gt;Problem Set 7&lt;/strong&gt; is &lt;a href=&#34;https://uvacs2102.github.io/docs/ps7.pdf&#34;&gt;now posted&lt;/a&gt;.
The change is that an additional constrait was added to the state
machine transitions (&lt;span class=&#34;math&#34;&gt;&lt;em&gt;G&lt;/em&gt;&lt;/span&gt;):
&lt;center&gt;
&lt;span class=&#34;math&#34;&gt;&amp;forall; &lt;em&gt;b&lt;/em&gt; &amp;isin; &lt;em&gt;B&lt;/em&gt; . (&lt;em&gt;a&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;) &amp;notin; &lt;em&gt;pairings&lt;/em&gt;&lt;/span&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This constraint is needed since without it, a member of &lt;span
class=&#34;math&#34;&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt; might give up a better match for a worse
one!&lt;/p&gt;

&lt;p&gt;(Thanks especially to Luke Botti for noticing this problem.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 7</title>
      <link>https://uvacs2102.github.io/ps7announce/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps7announce/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem Set 7&lt;/strong&gt; is &lt;a href=&#34;https://uvacs2102.github.io/docs/ps7.pdf&#34;&gt;now posted&lt;/a&gt;, and is due on &lt;strong&gt;Friday, 28 October at 7:29pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 15: Stable Matchings</title>
      <link>https://uvacs2102.github.io/class15/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class15/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;There is no class Thursday (Oct 20).&lt;/strong&gt; Please use the class time to do
  something worthwhile and fulfilling, preferably outdoors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; (is posted now) is due &lt;strong&gt;21
October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;6f50f3a2e5be484eacedeffdf2c98620&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;Download the full matching code: &lt;a href=&#34;https://uvacs2102.github.io/docs/matching.py&#34;&gt;matching.py&lt;/a&gt; (assertions and comments removed here for space)&lt;/p&gt;

&lt;p&gt;We didn&amp;rsquo;t get to talk about Secure Stable Mathing today, but will in a
future class.  (For now, feel free to read the links, of coure.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nytimes.com/2014/12/07/nyregion/how-game-theory-helped-improve-new-york-city-high-school-application-process.html?_r=0&#34;&gt;How Game Theory Helped Improve New York City’s High School Application Process&lt;/a&gt;, New York Times, 5 December 2014.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nrmp.org/match-process/match-algorithm/&#34;&gt;National Resident Matching Program&lt;/a&gt; (how medical school graduates are matched to residency programs)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Can anyone else see my rank order list (ROL)&lt;/em&gt;?&lt;br /&gt;
Your rank order list is confidential.  Program rank order lists can be seen only by the program director and coordinator, the institutional official and administrator, and NRMP staff (unless you give your username and password to someone else, which is a violation of the Match agreement).
(&lt;a href=&#34;http://www.nrmp.org/match-process/match-algorithm/&#34;&gt;Frequently Asked Question&lt;/a&gt; on NRMP)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oblivc.org/matching&#34;&gt;Secure Stable Matching&lt;/a&gt;: &lt;a href=&#34;https://jackdoerner.net/&#34;&gt;Jack Doerner&lt;/a&gt; (UVA BSCS and Studio Art, 2015),
David Evans, abhi shelat. &lt;a href=&#34;http://oblivc.org/docs/matching.pdf&#34;&gt;&lt;em&gt;Secure Stable Matching at
Scale&lt;/em&gt;&lt;/a&gt;.  In &lt;a href=&#34;https://www.sigsac.org/ccs/CCS2016/&#34;&gt;&lt;em&gt;23&lt;sup&gt;rd&lt;/sup&gt; ACM
Conference on Computer and Communications
Security&lt;/em&gt;&lt;/a&gt; (CCS). Vienna,
Austria. 24-28 October 2016.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class15.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;stable-matching&#34;&gt;Stable Matching&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; $M = { (a_1, b_1), (a_2, b_2), \cdots, (a_n, b_n) }$ is a
  &lt;em&gt;stable matching&lt;/em&gt; between two sets $A = { a_1, \cdots, a_n }$ and $B
  = { b_1, \cdots, b_n }$ with respective preference orderings $\prec_A$ and $\prec_B$ if there is no pair $(a_i, b_j)$ where $b&lt;em&gt;i \prec&lt;/em&gt;{a_i} b_j$ and $a&lt;em&gt;j \prec&lt;/em&gt;{b_j} a_i$.&lt;/p&gt;

&lt;p&gt;How do we know there is always a stable matching between any two
equal-size sets?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h1 id=&#34;gale-shapley-algorithm&#34;&gt;Gale-Shapley Algorithm&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def gale_shapley(A, B):
    pairings = {} # dictionary b: a pairings
    unpaired = set(a for a in A.keys()) # unpaired a&#39;s
    proposals = {a: 0 for a in A.keys()} # keep track of who gets next proposal

    while unpaired:
        a = unpaired.pop()
        ap = A[a] # a&#39;s preference list
        assert proposals[a] &amp;lt; len(ap)
        choice = ap[proposals[a]]
        proposals[a] += 1
        if choice in pairings: # a&#39;s choice already has a match
            amatch = pairings[choice]
            bp = B[choice]
            if bp.index(a) &amp;lt; bp.index(amatch):
                pairings[choice] = a
                unpaired.add(amatch) # lost match
            else:
                unpaired.add(a)
        else:
            pairings[choice] = a
    return [(a, b) for (b, a) in pairings.items()]
&lt;/code&gt;&lt;/pre&gt;

&lt;!--page--&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;A = {&amp;quot;Anna&amp;quot;: [&amp;quot;Kristoff&amp;quot;, &amp;quot;Olaf&amp;quot;], &amp;quot;Elsa&amp;quot;: [&amp;quot;Olaf&amp;quot;, &amp;quot;Kristoff&amp;quot;]}
B = {&amp;quot;Kristoff&amp;quot;: [&amp;quot;Anna&amp;quot;, &amp;quot;Elsa&amp;quot;], &amp;quot;Olaf&amp;quot;: [&amp;quot;Elsa&amp;quot;, &amp;quot;Anna&amp;quot;]}
gale_shapley(A, B)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modeling-the-gale-shapley-program-as-a-state-machine&#34;&gt;Modeling the Gale-Shapley program as a state machine&lt;/h2&gt;

&lt;p&gt;$S = $&lt;/p&gt;

&lt;p&gt;$G = $&lt;/p&gt;

&lt;p&gt;$q_0 = $&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prove termination.&lt;/strong&gt; The Gale-Shapley program, modeled by the state
  machine, eventually returns.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prove correctness.&lt;/strong&gt; The Gale-Shapley program returns a &lt;em&gt;stable matching&lt;/em&gt; of the two input sets and preferences.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6</title>
      <link>https://uvacs2102.github.io/ps6announce/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps6announce/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt; is &lt;a href=&#34;https://uvacs2102.github.io/docs/ps6.pdf&#34;&gt;now posted&lt;/a&gt;, and is due on &lt;strong&gt;Friday, 21 October at 6:29pm&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 14: Invariant Principle</title>
      <link>https://uvacs2102.github.io/class14/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class14/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; (is posted now) is due &lt;strong&gt;21
October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Exam 1 was returned Tuesday.  If you did not pick yours up yet, you can
get it after class today.  I will start charging
exponentially-increasing storage fees for inexcusably unclaimed exams
starting tomorrow.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;fcd3660e39b740a0bb2069883054a525&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Note that the version of the notes that was handed out in class mixed up
the $\vee$ and $\wedge$ symbols!  The web version is corrected.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class14.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;fast-exponentiation&#34;&gt;Fast Exponentiation&lt;/h1&gt;

&lt;p&gt;This is the algorithm from Section 6.3.1 written as Python code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def power(a, b):
   x = a
   y = 1
   z = b
   while z &amp;gt; 0:
      r = z % 2 # remainder of z / 2
      z = z // 2 # quotient of z / 2
      if r == 1:
         y = x * y
      x = x * x
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;state-machines-review-from-class-13&#34;&gt;State Machines (review from Class 13)&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;state machine&lt;/em&gt;, $M = (S, G: S \times S, q_0 \in S)$, is a binary
relation (called a &lt;em&gt;transition relation&lt;/em&gt;) on a set (both the domain and
codomain are the same set).  One state, denoted $q_0$, is designated as
the &lt;em&gt;start state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;execution&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times S, q_0
\in S)$ is a (possibly infinite) sequence of states, $(x_0, x_1, \cdots,
x_n)$ where (1) $x_0 = q_0$ (it begins with the start state), and (2)
$\forall i \in {0, 1, \ldots, n - 1} \ldotp (x&lt;em&gt;i, x&lt;/em&gt;{i + 1}) \in G$
(if $q$ and $r$ are consecutive states in the sequence, then there is an
edge $q \rightarrow r$ in $G$).&lt;/p&gt;

&lt;p&gt;A state $q$ is &lt;em&gt;reachable&lt;/em&gt; if it appears in some execution.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;preserved invariant&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times
S, q_0 \in S)$ is a predicate, $P$, on states, such that whenever $P(q)$
is true of a state $q$, and $q \rightarrow r \in G$, then $P&amp;reg;$ is
true.&lt;/p&gt;

&lt;h3 id=&#34;bishop-state-machine&#34;&gt;Bishop State Machine&lt;/h3&gt;

&lt;p&gt;$S = { (\fillin ) \, | \, r, c \in \mathbb{N} }$&lt;br /&gt;
$G = { (r, c) \rightarrow (r&amp;rsquo;, c&amp;rsquo;) \, | \, r, c \in \mathbb{N} \wedge (\exists d \in \mathbb{N}^{+} \textrm{ such that } r&amp;rsquo; = r \fillin d \wedge r&amp;rsquo; \ge 0 \wedge c&amp;rsquo; = c \fillin d \wedge c&amp;rsquo; \ge 0 }$&lt;br /&gt;
$q_0 = (0, 2)$&lt;/p&gt;

&lt;p&gt;What states are &lt;em&gt;reachable&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&#34;progress-machine&#34;&gt;``Progress&amp;rdquo; Machine&lt;/h3&gt;

&lt;p&gt;$S = { (x, d) \, | \, x \in \mathbb{Z}, d \in { \mathrm{\bf F}, \mathrm{\bf B}} }$&lt;br /&gt;
$G = { (x, \mathrm{\bf F}) \rightarrow (x + 1, \mathrm{\bf B}) \, | \, x \in \mathbb{Z} } \cup
     { (x, \mathrm{\bf B}) \rightarrow (x - 2, \mathrm{\bf F}) \, | \, x \in \mathbb{Z} }$&lt;br /&gt;
$q_0 = (0, \mathrm{\bf F})$&lt;/p&gt;

&lt;p&gt;Which states are &lt;em&gt;reachable&lt;/em&gt;?&lt;/p&gt;

&lt;!--page--&gt;

&lt;p&gt;A predicate $P(q)$ is a &lt;em&gt;preserved invariant&lt;/em&gt; of machine $M = (S, G \subseteq S \times S, q_0 \in
  S)$ if:
$$
\forall q \in S \ldotp (P(q) \wedge (q \rightarrow r) \in G) \implies P&amp;reg;
$$&lt;/p&gt;

&lt;p&gt;What are some &lt;em&gt;preserved invariants&lt;/em&gt; for the (original) Bishop State Machine?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invariant Principle.&lt;/strong&gt; If a &lt;em&gt;preserved invariant&lt;/em&gt; of a state machine
  is true for the start state, it is true for all reachable states.&lt;/p&gt;

&lt;p&gt;To show $P(q)$ for machine $M = (S, G \subseteq S \times S, q_0 \in
  S)$ all $q \in S$, show:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Base case: $P(\fillin)$&lt;/li&gt;
&lt;li&gt;$\forall s \in S \ldotp \fillin \implies \fillin$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Prove that the original Bishop State Machine never reaches a square where $r + c$ is odd.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;slow-exponentiation&#34;&gt;Slow Exponentiation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def slow_power(a, b):
   y = 1
   z = b
   while z &amp;gt; 0:
      y = y * a
      z = z - 1
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$S ::= \mathbb{N} \times \mathbb{N}$&lt;br /&gt;
$G ::= { (y, z) \rightarrow (y \cdot a, z - 1) \, | \, \forall y, z \in \mathbb{N}^{+}}$&lt;br /&gt;
$q_0 ::= (1, b)$&lt;/p&gt;

&lt;p&gt;Prove &lt;code&gt;slow_power(a, b)&lt;/code&gt; = $a^b$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>