<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs2102: Discrete Math</title>
    <link>https://uvacs2102.github.io/</link>
    <description>Recent content on cs2102: Discrete Math</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uvacs2102.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Problem Set 7 Comments</title>
      <link>https://uvacs2102.github.io/ps7comments/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps7comments/</guid>
      <description>&lt;p&gt;The Problem Set 7 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps7solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 19: Reviewing Infinities</title>
      <link>https://uvacs2102.github.io/class19/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class19/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Problem Set 8&lt;/strong&gt; is now due on &lt;strong&gt;Friday, Nov 3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5db039183a334bca9708c9f6c0d3b9dc&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class19.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;comparing-sets-recap&#34;&gt;Comparing sets Recap:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; Sets $A$ and $B$ have the same cardinality, denoted by $|A|=|B|$ if there is a bijection between $A$ and $B$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; Cardinality of $A$ is at least as big as cardinality of $B$, denoted by $|A|\geq |B|$ if and only if &lt;em&gt;either&lt;/em&gt; of the following is true (they are equivalent).
\begin{enumerate}
\item There is a surjective function from $A$ to $B$.
\item There is a total injective function from $B$ to $A$.
\end{enumerate}&lt;/p&gt;

&lt;h1 id=&#34;infinite-sets-recap&#34;&gt;Infinite Sets Recap&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $C$ is &lt;em&gt;infinite&lt;/em&gt; if and only if &lt;em&gt;either&lt;/em&gt; of the following happens (they are all equivalnet).
\begin{enumerate}&lt;/p&gt;

&lt;p&gt;\item Dedekind-infinite: There is a bijection between $C$ and a strict subset $B$ of $C$.&lt;/p&gt;

&lt;p&gt;\item There is \emph{no} bijection between $C$ and any $\mathbb{N}_k$ for any natural number $ k \in \mathbb{N}$.&lt;/p&gt;

&lt;p&gt;\item There exists a
  surjective function from $C$ to $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;\item There exists a total injective function from $\mathbb{N}$  to $C$.
\end{enumerate}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $C$ is &lt;em&gt;countable&lt;/em&gt; if and only if there exists a
  surjective function from $\mathbb{N}$ to $C$.  (That is, $\le 1$ arrow
  out from $\mathbb{N}$, $\ge 1$ arrow in to $C$.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $C$ is &lt;em&gt;countably infinite&lt;/em&gt; if and only if there
  exists a bijection between $C$ and $\mathbb{N}$.&lt;/p&gt;

&lt;h1 id=&#34;cantor-s-theorem&#34;&gt;Cantor&amp;rsquo;s Theorem&lt;/h1&gt;

&lt;p&gt;For &lt;strong&gt;all&lt;/strong&gt; sets, $S$, $| pow(S) | &amp;gt; | S |$.&lt;/p&gt;

&lt;p&gt;What does this mean for $| \mathbb{N} |$?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Show there is a bijection between $[0, 1]$ and $pow(\mathbb{N})$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;What is the cardinality of all the real numbers? Show a bijection between $[0, 1]$ and all real numbers. Hint, first show a bijection between $(0, 1)$ and real numbers, and then a bijection between $[0, 1]$ and $(0, 1)$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 8</title>
      <link>https://uvacs2102.github.io/ps8posted/</link>
      <pubDate>Sat, 28 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps8posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps8&#34;&gt;&lt;strong&gt;Problem Set 8&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps8.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 3 Nov at 6:29:00pm&lt;/strong&gt;. Please read the
collaboration policy carefully.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 18: Spooky Infinities</title>
      <link>https://uvacs2102.github.io/class18/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class18/</guid>
      <description>

&lt;h3 id=&#34;schedule:31a24b707f457b52726ca1d5e1ddffba&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps7&#34;&gt;&lt;strong&gt;Problem Set 7&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday (27 Oct) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exam 2&lt;/strong&gt; is two weeks from today (November 9, in class).  We will
  post more information about Exam 2 soon.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;74956d35d8ae473d9e7c99973d8d9718&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class18.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links:31a24b707f457b52726ca1d5e1ddffba&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Logicomix-search-truth-Apostolos-Doxiadis/dp/1596914521/&#34;&gt;&lt;em&gt;Logicomix: An epic search for truth&lt;/em&gt;&lt;/a&gt;, comic book by Apostolos Doxiadis and &lt;a href=&#34;https://people.eecs.berkeley.edu/~christos/&#34;&gt;Christos H. Papadimitrou&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last year, there was a &lt;a href=&#34;https://uvacs2102.github.io/f16/ps/psz/&#34;&gt;Problem Set &amp;omega;&lt;/a&gt; - you can see some examples of &lt;a href=&#34;https://uvacs2102.github.io/f16/pszhighlights/&#34;&gt;student&amp;rsquo;s work&lt;/a&gt;. (Note that having a PS &amp;omega; does not imply any limit on the number of regular problem sets, since there are infinitely many natural numbers before &amp;omega;!)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;countable-and-uncountable-sets:31a24b707f457b52726ca1d5e1ddffba&#34;&gt;Countable and Uncountable Sets&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;countably infinite&lt;/em&gt; if and only if there
  exists a bijection between $S$ and $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;uncountable&lt;/em&gt;, if there exists no bijection
  between $S$ and $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;power set&lt;/strong&gt; of $A$ ($\textrm{pow}(A)$)is the set of all subsets of $A$:
$$
B \in \textrm{pow}(A) \iff B \subseteq A.
$$&lt;/p&gt;

&lt;p&gt;For all &lt;strong&gt;finite&lt;/strong&gt; sets $S$, $|pow(S)| = 2^{|S|}$.&lt;/p&gt;

&lt;p&gt;#
#&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;all&lt;/strong&gt; sets $S$, $|pow(S)| &amp;gt; |S|$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Prove $pow(\mathbb{N})$ is uncountable.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;$\text{bitstrings} = \forall n \in \mathbb{N} . {0, 1}^n$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;ordinal-and-cardinal-numbers:31a24b707f457b52726ca1d5e1ddffba&#34;&gt;Ordinal and Cardinal Numbers&lt;/h2&gt;

&lt;p&gt;$\omega$ is the &lt;em&gt;smallest infinite ordinal&lt;/em&gt;.  The first ordinal after
$0, 1, 2, \cdots$.&lt;/p&gt;

&lt;p&gt;What is the difference between an &lt;em&gt;ordinal&lt;/em&gt; and &lt;em&gt;cardinal&lt;/em&gt; number?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What should $2\omega$ mean?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;Is $\text{InfiniteBitStrings} = {0, 1}^\omega$ countable?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Prove the number of real numbers in the interval $[0, 1]$ is uncountable.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6 Comments</title>
      <link>https://uvacs2102.github.io/ps6comments/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps6comments/</guid>
      <description>&lt;p&gt;The Problem Set 6 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps6solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 17: Infinite Sets</title>
      <link>https://uvacs2102.github.io/class17/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class17/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;Before Thursday, everyone should have finished reading MCS Chapter 8.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps7&#34;&gt;&lt;strong&gt;Problem Set 7&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;Friday (27 Oct) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;57544e0622ea4b4cbe07b4e4385eca85&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class17.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.cornell.edu/courses/cs2800/2017fa/lectures/lec14-cantor.html&#34;&gt;Proof of Schr&amp;ouml;der-Bernstein Theorem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;infinite-sets&#34;&gt;Infinite Sets&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Finite Cardinality.&lt;/strong&gt; The &lt;em&gt;cardinality&lt;/em&gt; of the set
$$
\mathbb{N}_k = { n | n \in \mathbb{N} \wedge n &amp;lt; k }
$$
is $k$.  If there is a &lt;em&gt;bijection&lt;/em&gt; between two sets, they have the same
cardinality.  (Class 9)&lt;/p&gt;

&lt;p&gt;Does this definition tell us the cardinality of $\mathbb{N}$?&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;infinite&lt;/em&gt; if there is no bijection between
  $S$ and any set $\mathbb{N}_k$ (as defined above).&lt;/p&gt;

&lt;p&gt;Show that $\mathbb{Z}$ is infinite.&lt;/p&gt;

&lt;h3 id=&#34;cardinality-of-infinite-sets&#34;&gt;Cardinality of Infinite Sets&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Equal Carinalities.&lt;/strong&gt; We say $|A|\; = |B|$  for arbitrary sets $A,B$ (and say that they have the same cardinality), if there is a bijection between $A$ and $B$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparing Cardinalities.&lt;/strong&gt; We say $|B|\; \leq |A|$  for arbitrary sets $A,B$ (and say that $B$&amp;rsquo;s cardinality is less than or equal to the cardinality of $A$), if there is a &lt;em&gt;surjective function&lt;/em&gt; from $A$ to $B$.&lt;/p&gt;

&lt;p&gt;Show that $|A|\; = |B|$ implies $|B|\; \leq |A|$ and $|A|\; \leq |B|$. Be careful as these sets might not be finite, in which case we cannot simply use natural numbers to denote their cardinalities.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Schr\wrap{\&amp;ldquo;{o}}der-Bernstein Theorem:&lt;/strong&gt; If $|A|\; \leq |B|$ and $|B|\; \leq |A|$, then there is a bijection between $A$ and $B$, namely $|A|\; = |B|$. (Not proven in cs2102; this is somewhat tricky to prove! For a full proof, see &lt;a href=&#34;http://www.cs.cornell.edu/courses/cs2800/2017fa/lectures/lec14-cantor.html&#34;&gt;the linked lecture notes&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;other-definitions-for-infinite-sets&#34;&gt;Other Definitions for Infinite Sets&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dedekind-Infinite.&lt;/strong&gt; A set $A$ is &lt;em&gt;Dedekind-infinite&lt;/em&gt; if and only if there exists a &lt;em&gt;strict subset&lt;/em&gt; of $A$ with the same cardinality as $A$.  That is,
$$\exists B \subset A \ldotp \exists R \ldotp R\ \text{is a bijection between}\ A\ \text{and}\ B.$$&lt;/p&gt;

&lt;p&gt;Recall the definition of strict subset:
$$B \subset A \iff B \subseteq A \wedge \exists x \in A\; .\; x \notin B.$$&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;third-definition infinite&lt;/em&gt; if $|S|\; \geq |\mathbb{N}|$ (as defined on the previous page).  Namely, there is a &lt;em&gt;surjective function&lt;/em&gt; from $S$ to $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;Are the above three definitions of (standard) &lt;em&gt;infinite&lt;/em&gt; and &lt;em&gt;Dedekind-infinite&lt;/em&gt; and &lt;em&gt;third-definition infinite&lt;/em&gt;
equivalent definitions?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;countable&lt;/em&gt; if and only if there exists a
  surjective function from $\mathbb{N}$ to $S$.  (That is, $\le 1$ arrow
  out from $\mathbb{N}$, $\ge 1$ arrow in to $S$.) Using our notation defined above, this means $|S|\; \leq |\mathbb{N}|$.&lt;/p&gt;

&lt;p&gt;Prove that these sets are countable: $\mathbb{Z}$, $\mathbb{N} \times
\mathbb{N}$, $\mathbb{Q}$ (rationals), $\emptyset$, $\mathbb{N} \cup (\mathbb{N} \times \mathbb{N}) \cup (\mathbb{N} \times \mathbb{N} \times \mathbb{N})$, all finite sequences of elements of $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A set $S$ is &lt;em&gt;countably infinite&lt;/em&gt; if and only if it is &lt;em&gt;countable&lt;/em&gt; and it is &lt;em&gt;infinite&lt;/em&gt; (according to standard definition).&lt;/p&gt;

&lt;p&gt;Must a &lt;em&gt;countable&lt;/em&gt; set that is &lt;em&gt;Dedekind-infinite&lt;/em&gt; be &lt;em&gt;countably infinite&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Using the definition of countable, and third definition of infinite, show that $S$ is countably infinite if and only if there is a bijection between $S$ and $\mathbb{N}$. (We might as well use this definition in the future.)&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 7</title>
      <link>https://uvacs2102.github.io/ps7posted/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps7posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps7&#34;&gt;&lt;strong&gt;Problem Set 7&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps7.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 27 Oct at 6:29:00pm&lt;/strong&gt;. Please read the
collaboration policy carefully.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 16: Structural Induction</title>
      <link>https://uvacs2102.github.io/class16/</link>
      <pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class16/</guid>
      <description>

&lt;h3 id=&#34;schedule&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps7&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;tomorrow at 6:29pm&lt;/strong&gt;. Make sure to read the corrected version of Problem 7.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;df7755f817fe4902abc3b73573f79752&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class16.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;lists&#34;&gt;Lists&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A &lt;em&gt;list&lt;/em&gt; is an ordered sequence of objects.  A list is
  either the empty list ($\lambda$), or the result of $\text{prepend}(e,
  l)$ for some object $e$ and list $l$.&lt;/p&gt;

&lt;p&gt;\begin{equation&lt;em&gt;}
\begin{split}
\text{\em first}(\text{prepend}(e, l)) &amp;amp;= e \
\text{\em rest}(\text{prepend}(e, l)) &amp;amp;= l \
\text{\em empty}(\text{prepend}(e, l)) &amp;amp;= \text{\bf False} \
\text{\em empty}(\text{\bf null}) &amp;amp;= \text{\bf True} \
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; The &lt;em&gt;length&lt;/em&gt; of a list, $p$, is:
\begin{equation&lt;em&gt;}
\begin{split}
\begin{cases}
0 &amp;amp; \text{if}\ p\ \text{is \bf null} \
\text{\em length}(q) + 1 &amp;amp; \text{otherwise}\ p = \text{\em prepend}(e, q)\ \text{for some object}\ e\ \text{and some list}\ q \
\end{cases}
\end{split}
\end{equation&lt;/em&gt;}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def list_length(l):
    if list_empty(l):
        return 0
    else:
        return 1 + list_length(list_rest(l))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prove: for all lists, $p$, &lt;code&gt;list_length(p)&lt;/code&gt; returns the length of the list $p$.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; The &lt;em&gt;concatenation&lt;/em&gt; of two lists, $p = (p_1, p_2, \cdots, p_n)$ and $q = (q_1, q_2, \cdots, q_m)$ is
$$(p_1, p_2, \cdots, p_n, q_1, q_2, \cdots, q_m).$$&lt;/p&gt;

&lt;p&gt;Provide a &lt;em&gt;constructuve&lt;/em&gt; definition of &lt;em&gt;concatenation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that $\text{prepend}(p,q)$ is not a good idea for two reasons. If we use this definition, then the first element of the constructed list will be the object (list) $p$ (as a whole) rather than the first element $p_1$ of the list $p$. Also, if we want to &lt;em&gt;only&lt;/em&gt; define lists of &lt;em&gt;specific&lt;/em&gt; objects, for example integers, we can still use the same recursive/constructive definition of lists by substituting &amp;ldquo;object&amp;rdquo; with &amp;ldquo;integer&amp;rdquo;, but in that case $\text{prepend}(p,q)$ will not even well defined, as it can only accept integers as first input.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h2 id=&#34;structural-induction&#34;&gt;Structural Induction&lt;/h2&gt;

&lt;p&gt;To prove proposition $P(x)$ for element $x \in D$ where $D$ is a
recursively-constructed data type, we do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Show $P(x)$ is true for all $x \in D$ that are defined using base cases.&lt;/li&gt;
&lt;li&gt;Show that if $P(y)$ is true for element $y$ and $x$ is constructed from $y$
using any &amp;ldquo;construct case&amp;rdquo; rules, then $P(x)$ is true as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;comparing-various-forms-of-induction&#34;&gt;Comparing Various forms of Induction&lt;/h2&gt;

&lt;p&gt;\begin{center}
\begin{tabular}{lccc}
&amp;amp; {\bf Regular Induction} &amp;amp; {\bf Invariant Principle} &amp;amp; {\bf Structural Induction} \ \hline
Works on: &amp;amp; natural numbers &amp;amp; state machines &amp;amp; data types \
To prove $P(\cdot)$ &amp;amp; {\em for all natural numbers} &amp;amp; {\em for all reachable states} &amp;amp; {\em for all data type objects} \
Prove {\bf base case(s)} &amp;amp; $P(0)$ &amp;amp; $P(q_0)$ &amp;amp; $P(\text{base object(s)})$ \
and {\bf inductive step} &amp;amp; $\forall m \in \mathbb{N} \ldotp$ &amp;amp; $\forall (q, r) \in G \ldotp $ &amp;amp; $\forall s \in \text{\em Type} \ldotp$ \
  &amp;amp; $P(m) \implies P(m+1)$ &amp;amp; $P(q) \implies P&amp;reg;$ &amp;amp; $P(s) \implies P(t)$ \
 &amp;amp; &amp;amp; &amp;amp; $\quad \forall t\ \text{constructable from}\ s$ \
\end{tabular}
\end{center}&lt;/p&gt;

&lt;p&gt;#
##&lt;/p&gt;

&lt;p&gt;Prove. For any two lists, $p$ and $q$, $\text{length}(p + q) = \text{length}(p) + \text{length}(q)$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 15: Recursive Data Types</title>
      <link>https://uvacs2102.github.io/class15/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class15/</guid>
      <description>

&lt;h3 id=&#34;schedule:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;You should read MCS Chapter 7 this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;20 October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9d25492c6e134346a212652c6d0052ab&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;links:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Python code from class and list definitions: &lt;a href=&#34;https://uvacs2102.github.io/docs/pairs.py&#34;&gt;pairs.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class15.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;proving-correctness:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Proving Correctness&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def slow_power(a, b):
   y = 1
   z = b
   while z &amp;gt; 0:
      y = y * a
      z = z - 1
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We model the Python program with a state machine:&lt;/p&gt;

&lt;p&gt;$S ::= \mathbb{N} \times \mathbb{N}$&lt;br /&gt;
$G ::= { (y, z) \rightarrow (y \cdot a, z - 1) \, | \, \forall y, z \in \mathbb{N}^{+}}$&lt;br /&gt;
$q_0 ::= (1, b)$&lt;/p&gt;

&lt;p&gt;It is important to remember this is a &lt;em&gt;model&lt;/em&gt;. It does not capture
many important aspects of execution of a real Python program. In
particular, it only models inputs in $\mathbb{N}$, when the actual
inputs could be other types in PYthon.  It also assume all math
opderations work mathematically, not Pythonically.&lt;/p&gt;

&lt;p&gt;To prove partial correctness, we show $P(q = (y, z)) := y = a^{b-z}$
is a &lt;em&gt;preserved invariant&lt;/em&gt;. Then, we show that it holds in state
$q_0$.  Finally, we show that in all final states, $y = a^b$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invariant is Preserved:&lt;/strong&gt; We need to show that $\forall q \in S . \forall t \in S . (q, t) \in G \implies P(q) \implies P(t)$.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$q = (y, z)$. $P(q = (y, z))$: $y = a^{b-z}$.&lt;/li&gt;
&lt;li&gt;If there is an edge from $q$ to $t$, that means $t = (y \cdot a, z-1)$ and $z \ge 1$ since this is the only edge from $q$ in $G$.&lt;/li&gt;
&lt;li&gt;We show $P(t = (y \cdot a, z-1))$ holds by multiplying both sides of $P(q)$ by $a$: $$ya = (a^{b -z}) \cdot a = a^{b - z + 1} = a ^{b - (z - 1)}.$$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Invariant holds in $q_0$:&lt;/strong&gt; $q_0 = (1, b)$. So, we need to show $P(q_0 = (1, b))$: $1 = a^{b - b}$. This holds since $a^{0} = 1$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final states:&lt;/strong&gt; All states where $z \ge 1$ have an outgoing edge, but no states where $z = 0$ do. So, the final states are all of the form $(\alpha, 0)$. If a final state is reachable from $q_0$, the invariant must hold since we proved it is preserve. Hence, in the final state $(\alpha, 0)$ we know $\alpha = a^{b}$.&lt;/p&gt;

&lt;p&gt;This proves &lt;em&gt;partial correctness&lt;/em&gt;: if the program terminates, it
terminates in a state where the property ($y = a^b$ is satisfied).  To
prove &lt;em&gt;total correctness&lt;/em&gt; we also need to know the execution
&lt;em&gt;eventually&lt;/em&gt; reaches a final state.&lt;/p&gt;

&lt;p&gt;We prove this by showing that from any initial state $q_0 = (1, b)$,
the machine will reach a final state $q_f = (y, 0)$ in $b$ steps.  The
proof in class used the Well Ordering Principle. You could also prove
this using regular Induction.&lt;/p&gt;

&lt;h1 id=&#34;pairs:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Pairs&lt;/h1&gt;

&lt;p&gt;What is the difference between scalar data and compound data structures?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; A $\text{\em Pair}$ is a datatype that supports these three operations:&lt;br /&gt;
\begin{quote}
     $\text{\em make_pair}: \text{\em Object} \times \text{\em Object} \rightarrow \text{\em Pair}$\
     $\text{\em pair_first}: \text{\em Pair} \rightarrow \text{\em Object}$\&lt;br /&gt;
     $\text{\em pair_last}: \text{\em Pair} \rightarrow \text{\em Object}$\&lt;br /&gt;
\end{quote}
where, for any objects $a$ and $b$, $\text{\em pair_first}(\text{\em make_pair}(a, b)) = a$ and $\text{\em pair_last}(\text{\em make_pair}(a, b)) = b$.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def make_pair(a, b):
    def selector(which):
        if which:
            return a
        else:
            return b
    return selector

def pair_first(p):
    return p(True)

def pair_last(p):
    return p(False)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lists:82758e0aba59693fe0fb1bf5353fa6c7&#34;&gt;Lists&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Definition (1).&lt;/strong&gt; A &lt;em&gt;List&lt;/em&gt; is either (1) a &lt;em&gt;Pair&lt;/em&gt; where the second part of
  the pair is a &lt;em&gt;List&lt;/em&gt;, or (2) the empty list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition (2).&lt;/strong&gt; A &lt;em&gt;List&lt;/em&gt; is a ordered sequence of objects.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6</title>
      <link>https://uvacs2102.github.io/ps/ps6/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps/ps6/</guid>
      <description>

&lt;div class=&#34;latex&#34;&gt;
   \dbox{{\bf Deliverable:} Submit your responses as a
single, readable PDF file on the collab site before {\bf 6:29pm} on {\bf Friday, 20 October}.  
The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX).}
&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightr&#34;&gt;
   &lt;strong&gt;Deliverable:&lt;/strong&gt; Submit your responses as a
single, readable PDF file on the collab site before &lt;strong&gt;6:29pm&lt;/strong&gt; on &lt;strong&gt;Friday, 20
October&lt;/strong&gt;. The PDF you submit can be a scanned handwritten file
(please check the scan is readable), or a typeset PDF file (e.g.,
generated by LaTeX or Word).
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;h3 id=&#34;collaboration-policy-read-carefully&#34;&gt;Collaboration Policy - Read Carefully&lt;/h3&gt;

&lt;p&gt;As with PS5, you should work in groups of one to three students to
write-up a solution together. The rest of the collaboration policy is
identical to what it was on &lt;a href=&#34;https://uvacs2102.github.io/ps/ps5&#34;&gt;PS5&lt;/a&gt;, and is not repeated here.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;This problem set focuses on Sections 6.1-6.3 of the MCS book, and &lt;a href=&#34;https://uvacs2102.github.io/class13&#34;&gt;Class
13&lt;/a&gt; and &lt;a href=&#34;https://uvacs2102.github.io/class14&#34;&gt;Class 14&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
    &lt;a href=&#34;https://uvacs2102.github.io/docs/ps6.pdf&#34;&gt;Download PDF for Problems&lt;/a&gt;.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightr&#34;&gt;
Your response should be submitted as a single PDF file using collab.
Please read and follow the &lt;a href=&#34;https://uvacs2102.github.io/pdfs/&#34;&gt;Generating
PDFs&lt;/a&gt; advice on the course site.
   &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;p&gt;Solve as many of the 8 problems as you can.  For maximum credit, your
answers should be correct, clear, well-written, and convincing.&lt;/p&gt;

&lt;p&gt;Problems marked with $(\star)$ are challenging enough that it is not
necessary to solve them well to get a ``gold-star level&amp;rdquo; grade on this
assignment (although we certainly hope you will try and some will
succeed!)&lt;/p&gt;

&lt;h1 id=&#34;state-machines&#34;&gt;State Machines&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Describe a state machine that can be used to determine if the number
of steps is divisible by 3.  You should clearly define the set of states
in your machine, and how each is interpreted, and the transition
relation.  (Don&amp;rsquo;t forget to also specify $q_0$.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Describe the set of states that are &lt;em&gt;reachable&lt;/em&gt; for the ``Progress&amp;rdquo;
Machine defined as $M = (S, G, q_0)$:&lt;/p&gt;

&lt;p&gt;$S = { (x, d) \, | \, x \in \mathbb{Z}, d \in { \mathrm{\bf F}, \mathrm{\bf B}} }$&lt;br /&gt;
$G = { (x, \mathrm{\bf F}) \rightarrow (x + 1, \mathrm{\bf B}) \, | \, x \in \mathbb{Z} } \cup
 { (x, \mathrm{\bf B}) \rightarrow (x - 2, \mathrm{\bf F}) \, | \, x \in \mathbb{Z} }$&lt;br /&gt;
$q_0 = (0, \mathrm{\bf F})$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$M = (S, G \subseteq S \times S, q_0 \in S)$ is a state machine where
the cardinality of $S$ is finite, and transition relation, $G$, is a
total injective function.  Show that it is possible for some states in
$S$ to be unreachable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--page--&gt;

&lt;h1 id=&#34;knight-s-moves&#34;&gt;Knight&amp;rsquo;s Moves&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;($\star$) A &lt;em&gt;knight&lt;/em&gt; in chess can move two squares up, down, left, or right, followed by one square in a direction perpendicular to the two squares (so, it can move two squares up or down, followed by one square left or right; or, can move two squares left or right, followed by one square up or down).  We can define the possible moves of a knight on an infinite chess board as the Knight State Machine (similarly to how we defined the Bishop State Machine in &lt;a href=&#34;https://uvacs2102.github.io/class14&#34;&gt;Class 14&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;$S = { (r, c) \, | \, r, c \in \mathbb{N} }$
$G = { (r, c) \rightarrow (r&amp;rsquo;, c&amp;rsquo;) \, | \, r, c \in \mathbb{N} \wedge
((r&amp;rsquo; = r \pm 2 \wedge c&amp;rsquo; = c \pm 1) \vee (r&amp;rsquo; = r \pm 1 \wedge c&amp;rsquo; = c \pm 2)) \wedge r&amp;rsquo; \ge 0 \wedge c&amp;rsquo; \ge 0 }$
$q_0 = (0, 0)$&lt;/p&gt;

&lt;p&gt;Prove that all states in $S$ are reachable for the Knight State Machine.
(Hint: use induction, but be careful to either set up an appropriate
$P(n)$ or break the proof into two separate induction proofs to show you
can reach any column and can reach any rwo.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;invariant-principle&#34;&gt;Invariant Principle&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MCS Problem 6.3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the principle of induction to prove the invariant principle.
(Hint: your induction predicate, $P(n)$ should use $n$ as the number of
steps.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MCS Problem 6.11. Parts  (b) and &amp;copy; are considered ($\star$)-ed parts. For part (a) you can only list the items that are preserved invariants, but for part (b) and &amp;copy;
your answers should contain full proofs for any claims or answers (even for part (b) where the wording of the problem in the book asks for only a number).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is also some typos in how the part (a) is listd. The actual (simpler-to-solve) peroperties are as follows. $rem(a,b)$ is the remainder of dividing $a$ by $b$ and is the same as $a \mod b$.&lt;/p&gt;

&lt;p&gt;(6.5) $rem(n_b+n_w, 3) \neq 2$&lt;/p&gt;

&lt;p&gt;(6.6) $rem(n_w-n_b, 3) = 2$&lt;/p&gt;

&lt;p&gt;(6.7) $rem(n_b-n_w, 3) = 2$&lt;/p&gt;

&lt;p&gt;(6.8) $n_b + n_w &amp;gt; 5$&lt;/p&gt;

&lt;p&gt;(6.9) $n_b + n_w &amp;lt; 5$&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;($\star$) Prove the Python program below is a correct implementation of the
factorial function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def factorial(n):
    x = 1 # poor choices of variable names for programmers
    y = 1 
    while x &amp;lt;= n:
        y = y * x
        x = x + 1
    return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be &lt;em&gt;correct&lt;/em&gt;, for any input $n \in \mathbb{N}$, the program should
always return a result equal to $n!$.  The factorial of $n$ is defined
as the product of all positive integers up to and including $n$.  (Note
that $0! = 1$.)&lt;/p&gt;

&lt;p&gt;A good answer will explain (1) how to map the program to a state machine, (2) come up with a preserved invariant property that (2.a) holds at the beginning and (2.b) if it holds at the termination, it implies the right answer is produced. A perfect answer also shall argue why the program terminates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Class 14: Invariant Principle</title>
      <link>https://uvacs2102.github.io/class14/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class14/</guid>
      <description>

&lt;h3 id=&#34;schedule:69e304a0e65e98722637abe379145c02&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; is due &lt;strong&gt;20 October (Friday) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Exam 1 was returned Tuesday.  If you did not pick yours up yet, you
can get it after class today.  We will start charging
exponentially-increasing storage fees for inexcusably unclaimed exams
starting after Prof. Mahmoody&amp;rsquo;s office hours Monday.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;02ef275aa1474918a22516979d995c6d&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;
   &lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class14.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;state-machines-review-from-class-13:69e304a0e65e98722637abe379145c02&#34;&gt;State Machines (review from Class 13)&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;state machine&lt;/em&gt;, $M = (S, G: S \times S, q_0 \in S)$, is a binary
relation (called a &lt;em&gt;transition relation&lt;/em&gt;) on a set (both the domain and
codomain are the same set).  One state, denoted $q_0$, is designated as
the &lt;em&gt;start state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;execution&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times S, q_0
\in S)$ is a (possibly infinite) sequence of states, $(x_0, x_1, \cdots,
x_n)$ where (1) $x_0 = q_0$ (it begins with the start state), and (2)
$\forall i \in {0, 1, \ldots, n - 1} \ldotp (x&lt;em&gt;i, x&lt;/em&gt;{i + 1}) \in G$
(if $q$ and $r$ are consecutive states in the sequence, then there is an
edge $q \rightarrow r$ in $G$).&lt;/p&gt;

&lt;p&gt;A state $q$ is &lt;em&gt;reachable&lt;/em&gt; if it appears in some execution.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;preserved invariant&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times
S, q_0 \in S)$ is a predicate, $P$, on states, such that whenever $P(q)$
is true of a state $q$, and $q \rightarrow r \in G$, then $P&amp;reg;$ is
true.&lt;/p&gt;

&lt;h3 id=&#34;bishop-state-machine:69e304a0e65e98722637abe379145c02&#34;&gt;Bishop State Machine&lt;/h3&gt;

&lt;p&gt;$S = { (\fillin ) \, | \, r, c \in \mathbb{N} }$
$G = { (r, c) \rightarrow (r&amp;rsquo;, c&amp;rsquo;) \, | \, r, c \in \mathbb{N} \wedge (\exists d \in \mathbb{N}^{+} \textrm{ such that } r&amp;rsquo; = r \fillin d \wedge r&amp;rsquo; \ge 0 \wedge c&amp;rsquo; = c \fillin d \wedge c&amp;rsquo; \ge 0 }$
$q_0 = (0, 2)$&lt;/p&gt;

&lt;p&gt;What states are &lt;em&gt;reachable&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h3 id=&#34;progress-machine:69e304a0e65e98722637abe379145c02&#34;&gt;``Progress&amp;rdquo; Machine&lt;/h3&gt;

&lt;p&gt;$S = { (x, d) \, | \, x \in \mathbb{Z}, d \in { \mathrm{\bf F}, \mathrm{\bf B}} }$
$G = { (x, \mathrm{\bf F}) \rightarrow (x + 1, \mathrm{\bf B}) \, | \, x \in \mathbb{Z} } \cup
     { (x, \mathrm{\bf B}) \rightarrow (x - 2, \mathrm{\bf F}) \, | \, x \in \mathbb{Z} }$
$q_0 = (0, \mathrm{\bf F})$&lt;/p&gt;

&lt;p&gt;Which states are &lt;em&gt;reachable&lt;/em&gt;?&lt;/p&gt;

&lt;!--page--&gt;

&lt;h2 id=&#34;preserved-invariants:69e304a0e65e98722637abe379145c02&#34;&gt;Preserved Invariants&lt;/h2&gt;

&lt;p&gt;A predicate $P(q)$ is a &lt;em&gt;preserved invariant&lt;/em&gt; of machine $M = (S, G \subseteq S \times S, q_0 \in
  S)$ if:
$$
\forall q \in S \ldotp (P(q) \wedge (q \rightarrow r) \in G) \implies P&amp;reg;
$$&lt;/p&gt;

&lt;p&gt;What are some &lt;em&gt;preserved invariants&lt;/em&gt; for the (original) Bishop State Machine?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invariant Principle.&lt;/strong&gt; If a &lt;em&gt;preserved invariant&lt;/em&gt; of a state machine
  is true for the start state, it is true for all reachable states.&lt;/p&gt;

&lt;p&gt;To show $P(q)$ for machine $M = (S, G \subseteq S \times S, q_0 \in
  S)$ all $q \in S$, show:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Base case: $P(\fillin)$&lt;/li&gt;
&lt;li&gt;$\forall s \in S \ldotp \fillin \implies \fillin$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Prove that the original Bishop State Machine never reaches a square where $r + c$ is odd.&lt;/p&gt;

&lt;!--page--&gt;

&lt;h1 id=&#34;slow-exponentiation:69e304a0e65e98722637abe379145c02&#34;&gt;Slow Exponentiation&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def slow_power(a, b):
   y = 1
   z = b
   while z &amp;gt; 0:
      y = y * a
      z = z - 1
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$S ::= \mathbb{N} \times \mathbb{N}$
$G ::= { (y, z) \rightarrow (y \cdot a, z - 1) \, | \, \forall y, z \in \mathbb{N}^{+}}$
$q_0 ::= (1, b)$&lt;/p&gt;

&lt;p&gt;Prove &lt;code&gt;slow_power(a, b)&lt;/code&gt; = $a^b$.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;fast-exponentiation:69e304a0e65e98722637abe379145c02&#34;&gt;Fast Exponentiation&lt;/h1&gt;

&lt;p&gt;This is the algorithm from Section 6.3.1 written as Python code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def power(a, b):
   x = a
   y = 1
   z = b
   while z &amp;gt; 0:
      r = z % 2 # remainder of z / 2
      z = z // 2 # quotient of z / 2
      if r == 1:
         y = x * y
      x = x * x
   return y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 6</title>
      <link>https://uvacs2102.github.io/ps6posted/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps6posted/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; [&lt;a href=&#34;https://uvacs2102.github.io/docs/ps6.pdf&#34;&gt;PDF&lt;/a&gt;] is now posted and
is due &lt;strong&gt;Friday, 20 Oct at 6:29:00pm&lt;/strong&gt;. Please read the
collaboration policy carefully.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class 13: State Machines</title>
      <link>https://uvacs2102.github.io/class13/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/class13/</guid>
      <description>

&lt;h3 id=&#34;schedule:af2ff3ef0db44829d3ff131eac0d7ec7&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;There is no Problem Set due this week. &lt;a href=&#34;https://uvacs2102.github.io/ps/ps6&#34;&gt;&lt;strong&gt;Problem Set 6&lt;/strong&gt;&lt;/a&gt; will be posted soon and due next &lt;strong&gt;Friday (October 20) at 6:29pm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Exam 1 was returned in class today.  Please read the solutions posted
in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/exam1comments.pdf&#34;&gt;Exam 1
Comments&lt;/a&gt;.
If you didn&amp;rsquo;t pick up Exam 1 in class today, you can get it at Dave&amp;rsquo;s
office hours tomorrow, or before or after class on Thursday.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;notpdf&#34;&gt;
   &lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a9794b8b691346209a71c909a67e860c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
   &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlightm&#34;&gt;
   &lt;a href=&#34;https://uvacs2102.github.io/docs/class13.pdf&#34;&gt;See PDF Version for &lt;b&gt;Notes and Questions&lt;/b&gt;&lt;/a&gt;.
   &lt;/div&gt;
   &lt;/div&gt;&lt;!--endpdf--&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;latex&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;state-machines:af2ff3ef0db44829d3ff131eac0d7ec7&#34;&gt;State Machines&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;state machine&lt;/em&gt; is a binary relation (called a &lt;em&gt;transition relation&lt;/em&gt;)
on a set (both the domain and codomain are the same set).  One state is
designated as the &lt;em&gt;start state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;$$M = (S, G: S \times S, q_0 \in S)$$&lt;/p&gt;

&lt;p&gt;What does it mean if $G$ is &lt;em&gt;total&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;What does it mean if $G$ is not a &lt;em&gt;function&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parity Counter.&lt;/strong&gt; Describe a state machine that determines if the
  number of steps is even.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unbounded Counter.&lt;/strong&gt; Describe a state machine that counts the number of steps.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;How well do state machines model real computers?  What kind of
transition relation does the state machine modeling your computer have?&lt;/p&gt;

&lt;h2 id=&#34;state-machine-execution:af2ff3ef0db44829d3ff131eac0d7ec7&#34;&gt;State Machine Execution&lt;/h2&gt;

&lt;p&gt;An &lt;em&gt;execution&lt;/em&gt; of a state machine $M = (S, G \subseteq S \times S, q_0 \in S)$ is a (possibly infinite) sequence of states, $(x_0, x_1, \cdots, x_n)$ where:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$x_0 = q_0$ (it begins with the start state), and&lt;/li&gt;
&lt;li&gt;$\forall i \in {0, 1, \ldots, n - 1} \ldotp (x&lt;em&gt;i, x&lt;/em&gt;{i + 1}) \in G$ (if $q$ and $r$ are consecutive states in the sequence, then there is an edge $q \rightarrow r$ in $G$)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A state $q$ is &lt;em&gt;reachable&lt;/em&gt; if it appears in some execution.  (That is,
there is a sequence of transitions starting from $q_0$, following edges
in $G$, that ends with $q$.)&lt;/p&gt;

&lt;p&gt;$$
M_1 = (S = \mathbb{N}, G = {(x, y) | y = x^2 }, q_0 = 1)
$$
$$
M_2 = (S = \mathbb{N}, G = {(x, y) | \exists k \in \mathbb{N} \ldotp y = kx }, q_0 = 1)
$$&lt;/p&gt;

&lt;p&gt;Which states are &lt;em&gt;reachable&lt;/em&gt; for $M_1$ and $M_2$?&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall Break Office Hours</title>
      <link>https://uvacs2102.github.io/fbofficehours/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/fbofficehours/</guid>
      <description>

&lt;p&gt;The office hours schedule for next week will be different from normal
because of “Fall Break” and the Exam (as usual, all will be in Rice
436 except the professors&amp;rsquo; as noted):&lt;/p&gt;

&lt;h4 id=&#34;monday-2-oct:d0632df39174fbd03a717f33cd2b5853&#34;&gt;Monday (2 Oct)&lt;/h4&gt;

&lt;p&gt;Mohammad Mahmoody (Rice 511), 10:45-11:45am&lt;br /&gt;
Sarah Meng, 4:30-6:00pm&lt;/p&gt;

&lt;h4 id=&#34;tuesday-3-oct:d0632df39174fbd03a717f33cd2b5853&#34;&gt;Tuesday (3 Oct)&lt;/h4&gt;

&lt;p&gt;Nate Olsen, 10-11:30am&lt;br /&gt;
Michael Woon, 11am-12:30pm&lt;br /&gt;
Henry Spece, 3:30-5pm&lt;/p&gt;

&lt;h4 id=&#34;wednesday-4-oct:d0632df39174fbd03a717f33cd2b5853&#34;&gt;Wednesday (4 Oct)&lt;/h4&gt;

&lt;p&gt;Colin Harfst, 9:30am-12:30pm&lt;br /&gt;
Anna Wu, noon-1:30pm&lt;br /&gt;
Michael Woon, 12:30-2:00pm&lt;br /&gt;
David Evans (Rice 507), 2:30-3:30pm&lt;br /&gt;
Bhuvanesh Murali, 3-5pm&lt;br /&gt;
Helen Simecek, 3:30-5pm&lt;br /&gt;
Yasasvini Puligundle, 5-6pm&lt;br /&gt;
Xueying Bai, 6-7pm&lt;br /&gt;
Fan Feng, 7-8:30pm&lt;br /&gt;
Nate Olsen, 7:30-9:00pm&lt;/p&gt;

&lt;h4 id=&#34;thursday-5-oct:d0632df39174fbd03a717f33cd2b5853&#34;&gt;Thursday (5 Oct)&lt;/h4&gt;

&lt;p&gt;Amar Singh, 9am-10:30&lt;br /&gt;
Xiao Zhang, 10-11am&lt;br /&gt;
Prashant Gorthi, 11am-noon&lt;/p&gt;

&lt;p&gt;No office hours Thursday afternnon and evening. The normal office
hours schedule will resume on Monday, 9 October.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 5 Comments</title>
      <link>https://uvacs2102.github.io/ps5comments/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://uvacs2102.github.io/ps5comments/</guid>
      <description>&lt;p&gt;The Problem Set 5 solutions and comments are now posted in collab: &lt;a href=&#34;https://collab.its.virginia.edu/access/content/group/9bd99d1c-6f18-4542-a7d1-8ffc4fccbd3d/ps5solutions.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>